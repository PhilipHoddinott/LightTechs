/*	Name: Philip Hoddinott
	Section: 4
	Side: A
	Date: 2/28/2016

	Gain:
	Port pin:

	File name: hw7.c
	Description: 
Your code needs to read an analog input, print the digital value of the A/D conversion and print the input voltage. The specific requirements are:

Read the analog input on Port 1.4
Set a gain value of 2
Print the A/D value
Print the input voltage in millivolts (as an integer). Remember to include the gain term when calculating voltage.
You may want to build your own test circuit (refer to worksheet 6) before submitting your code. Resistors are available in the cabinet on the center table.

This homework is due prior to the start of class on the due date for your section. The assignment is individual.

When you are finished, edit the name of your c-file code to include your name, for example HW7_Russ_Kraft.c and upload the c-file using the link below.

Do NOT click the Submit button before you are finished uploading your code. You will lose your assignment if you do so.

 REF0CN = 0x03;


page 59, for gain of 2 adc1 bits 1-0 do gain 2
*/

#include <c8051_SDCC.h>// include files. This file is available online
#include <stdio.h>


//-----------------------------------------------------------------------------
// Function Prototypes
//-----------------------------------------------------------------------------
void Timer_Init(void);     // Initialize Timer 0 
void Interrupt_Init(void); //Initialize interrupts
void Timer0_ISR(void) __interrupt 1;
void ADC_Init(void);
void Port_Init(void);
unsigned char read_AD_input(unsigned char pin_number);



//-----------------------------------------------------------------------------
// Global Variables
//-----------------------------------------------------------------------------

unsigned int counts1;
unsigned int counts2;
unsigned char AD_value;
unsigned char input;
unsigned char result;
unsigned long milivolts;

//***************
void main(void) {
	Sys_Init();      // System Initialization
	putchar(' ');    // the quote fonts may not copy correctly into SiLabs IDE
	Interrupt_Init();
	Timer_Init();    // Initialize Timer 0
	Port_Init(); 
	ADC_Init();

	printf("Start \r\n");
    while (1)  {
    	//maybe put  wait in here??
		printf("press enter to read A/D input \r\n");
		input = getchar();

		// add code necessary to complete the homework


		input = read_AD_input(4);// set port 4
		input = input*2;// see below why this is happining

		milivolts = ((long) 1000*input * 24) / (10*256 * 2);// from page 56, multiply by 1000 to get miivoles

		printf("\n\rInput value is %u\r\n", input);
		printf("\n\rIn milivots the value gain was 2 is %lu\r\n", milivolts);

    }//end while loop
}//end main


//
// add the initialization code needed for the ADC1
//
void ADC_Init(void) {
	REF0CN = 0x03; //code from page 61
	ADC1CN = 0x80;
	ADC1CF |= 0x02;  //gain is 2 now
}//end ADC INIT
//
// function that completes an A/D conversion
//
unsigned char read_AD_input(unsigned char pin_number) {
	AMX1SL = pin_number;//set it to pin numer
	ADC1CN = ADC1CN & ~0x20; // Clear “Conversion Completed” flag
	ADC1CN = ADC1CN | 0x10; // Initiate A/D Conversion
	while ((ADC1CN & 0x20) == 0x00); // Wait for conversion to finish
	return ADC1; // Return digital value from ADC1
}//end read_AD_INPUT

//
// add Port initialization code
//
void Port_Init(void){
	P1MDIN &= ~0x04; // Configure P1.4 as analoug input
	P1MDOUT &= ~0x04; //  P1.4  open-drain input
	P1 |= 0x04; // set logic 1 to P1.4

}//end port init


//
// the following functions can be used if needed, no edits required
//

void Interrupt_Init(void){
	IE |= 0x82;      // enable Timer0 Interrupt request
}//end inerupt init

void Timer_Init(void){
	
	CKCON |= 0x08;  // Timer0 uses SYSCLK 
	TMOD &= 0xF0;   // clear the 4 least significant bits
	TMOD |= 0x01;   // Timer0 mode 16
	TR0 = 0;        // Stop Timer0
	TL0 = 0;        // Clear low byte of register T0
	TH0 = 0;        // Clear high byte of register T0

}//end timer init
void Timer0_ISR(void) __interrupt 1
{
	counts1++;
	counts2++;
}//end timer0 
