//modified 4/28/2010 RPK, 11/17/2011 RPK (return 0 when not wired correctly)
//LCD Model: Devantech LCD02
//LCD Documentation: http://www.robot-electronics.co.uk/htm/Lcd02tech.htm
/*
kpdlcdtestPCA.c - Keypad and LCD test program - Uses PCA0 rather than Timer 0
Spring 2010
Use this program to exercise the LCD display and keypad to see how they work.
This program assumes SMB is on P0.2 & P0.3 (XBR0 = 0x05)

**** It is OK to change the XBR0 setting to 0x07 to match your wiring ****

Students were expected to remove Timer 0 delays from kpdlcdtest.c, the old
version of this demo and integrate it into their Gondola s/w, resulting in
something similar to this program.
*/

#include <stdio.h>
#include <stdlib.h>
#include <c8051_SDCC.h> // Include files. This file is available online in LMS
#include <i2c.h>        // Get from LMS, THIS MUST BE INCLUDED AFTER stdio.h
#define PCA_START 28672 // 28672 for exactly 20ms
//-----------------------------------------------------------------------------
// Function Prototypes
//-----------------------------------------------------------------------------
void Port_Init(void);   // Initialize ports for input and output
void Interrupt_Init(void);
void PCA_Init(void);
void SMB0_Init(void);
void PCA_ISR(void) __interrupt 9;
void wait(void);
void pause(void);
char philip_read_keyboard(void);

void kpd_input_zero(void);
void kpd_input_one(void);
void normal_operation(void);
void two_key_input(void);

// Global variables
volatile unsigned int Counts, nCounts, nOverflows;

//*****************************************************************************
//Main function
//*****************************************************************************
void main(void) { 
    Sys_Init();     // System Initialization - MUST BE 1st EXECUTABLE STATEMENT
    Port_Init();    // Initialize ports 2 and 3 - XBR0 set to 0x05, UART0 & SMB
    Interrupt_Init();   // You may want to change XBR0 to match your SMB wiring
    PCA_Init();
    SMB0_Init();
    putchar('\r');  // Dummy write to serial port
    printf("\nStart\r\n");

    Counts = 0;
    while (Counts < 1); // Wait a long time (1s) for keypad & LCD to initialize
	printf("\rclear error\n");
    lcd_clear();
	printf("\rif you see this code works\n");//IF THESE Errors do not show up, you must change your code and tur nthe car on/off
    lcd_print("Calibration:\nHello world!\nPhilip Hoddinott\wrote this code");
    while (1){
       //normal_operation();
       //two_key_input();
       //kpd_input_one();
       kpd_input_zero();
    }//end while
}//end main


//*****************************************************************************
//Operation functions
//*****************************************************************************

void normal_operation(void){
    char keypad;
    keypad = read_keypad();
    pause();    // This pauses for 1 PCA0 counter clock cycle (20ms) 
                // If the keypad is read too frequently (no delay), it will
                // lock up and stop responding. Must power down to reset.
    if (keypad != -1){   // keypad = -1 if no key is pressed
               // Note: fast read results in multiple lines on terminal
                // A longer delay will reduce multiple keypad reads but a
                // better approach is to wait for a -1 between keystrokes.
        lcd_clear();
        lcd_print("Your key was:\n %c,  = Hex %X", keypad, keypad);
        printf("\n\rYour key was: %c,  = Hex %X", keypad, keypad);
        if(keypad == 0){
            printf("   **Wire Connection/XBR0 Error**   ");
                // A returned value of 0 (0x00) indicates wiring error
        }//end if keypad =0
    }//end if key pressed       
}//end normal operation

void kpd_input_zero(void){
    char keypad;
    keypad = kpd_input(0);
    pause();    // This pauses for 1 PCA0 counter clock cycle (20ms) 
                // If the keypad is read too frequently (no delay), it will
                // lock up and stop responding. Must power down to reset.
    if (keypad != -1){   // keypad = -1 if no key is pressed
               // Note: fast read results in multiple lines on terminal
                // A longer delay will reduce multiple keypad reads but a
                // better approach is to wait for a -1 between keystrokes.
        lcd_clear();
        //lcd_print("Your key was:\n %c,  = Hex %X\n", keypad, keypad);
        printf("\n\rYour key was: %c,  = Hex %X", keypad, keypad);
        if(keypad == 0){
            printf("   **Wire Connection/XBR0 Error**   ");
                // A returned value of 0 (0x00) indicates wiring error
        }//end if keypad =0
    }//end if key pressed 
}//end kpd operation 0

void kpd_input_one(void){
    char keypad;
    keypad = kpd_input(1);
    pause();    // This pauses for 1 PCA0 counter clock cycle (20ms) 
                // If the keypad is read too frequently (no delay), it will
                // lock up and stop responding. Must power down to reset.
    if (keypad != -1){   // keypad = -1 if no key is pressed
               // Note: fast read results in multiple lines on terminal
                // A longer delay will reduce multiple keypad reads but a
                // better approach is to wait for a -1 between keystrokes.
        lcd_clear();
        lcd_print("Your key was:\n %c,  = Hex %X\n", keypad, keypad);
        printf("\n\rYour key was: %c,  = Hex %X", keypad, keypad);
        if(keypad == 0){
            printf("   **Wire Connection/XBR0 Error**   ");
                // A returned value of 0 (0x00) indicates wiring error
        }//end if keypad =0
    }//end if key pressed 
}//end kpd operation 0


void two_key_input(void){
    char keypad1=0, keypad2=0, result;
    keypad1 = philip_read_keyboard();
    keypad2 = philip_read_keyboard();
    result = (((keypad1)*10) + (keypad2));

    printf("\rFirst number was %u, second number was %u\n", keypad1, keypad2);//for debugging
    printf("\rResult is %u\n", result);
    lcd_print("\rResult is %u\n", result);
    wait(); wait(); 
    //result=philip_read_keyboard();
    lcd_clear();
}//end two key input

char philip_read_keyboard(void){
	char keypad,keypad_prime = 0;
	keypad = read_keypad();
    pause();    // This pauses for 1 PCA0 counter clock cycle (20ms) 
                    // If the keypad is read too frequently (no delay), it will
                    // lock up and stop responding. Must power down to reset.
	while(keypad == (-1)){
		keypad = read_keypad();
	}//end while no key input
    if (keypad != (-1)){  // keypad = -1 if no key is pressed
               // Note: fast read results in multiple lines on terminal
                    // A longer delay will reduce multiple keypad reads but a
                    // better approach is to wait for a -1 between keystrokes.
		lcd_clear();
		lcd_print("Key was:\n %c,= Hx %X\n", keypad, keypad);
		printf("\rYour key was: %c,  = Hex %X\n", keypad, keypad);
		if(keypad == 0){
			printf("   **Wire Connection Error**   ");
        }//end keypad = 0
		keypad_prime = keypad;
	}           // A returned value of 0 (0x00) indicates wiring error'
	while(keypad != -1) {
        keypad = read_keypad(); // Waits until keypad returns a -1
    }//end kepad = -1
	return (keypad_prime - 48);
}

//**********************************************
//Timer and pause functions
//**********************************************
void pause(void) {//waits 1/50 second
    nCounts = 0;
    while (nCounts < 1);// 1 count -> (65536-PCA_START) x 12/22118400 = 20ms
}//end pause           // 6 counts avoids most of the repeated hits

void wait(void) {//waits 1 second
    nCounts = 0;
    while (nCounts < 50);    // 50 counts -> 50 x 20ms = 1000ms
}//end wait 

void PCA_ISR(void) __interrupt 9 {//timer interupt
    if (CF) {
        CF = 0;                     // clear the interrupt flag
        nOverflows++;               // continuous overflow counter
        nCounts++;
        PCA0L = PCA_START & 0xFF;   // low byte of start count
        PCA0H = PCA_START >> 8;     // high byte of start count
        if (nCounts > 50) {
            nCounts = 0;
            Counts++;               // seconds counter
        }
     }
     else PCA0CN &= 0xC0;           // clear all other 9-type interrupts
}//end PCA isr

//**********************************************
//Init functions
//**********************************************
void Port_Init(void){   //0x05
    XBR0 = 0x27;    // NOTE: Only UART0 & SMB enabled; SMB on P0.2 & P0.3
}//end port init   // No CEXn are used; no ports to initialize

void Interrupt_Init(void){
    IE |= 0x02;
    EIE1 |= 0x08;
    EA = 1;
}//end interupt init

void PCA_Init(void){
    PCA0MD = 0x81;      // SYSCLK/12, enable CF interrupts, suspend when idle
//  PCA0CPMn = 0xC2;    // 16 bit, enable compare, enable PWM; NOT USED HERE
    PCA0CN |= 0x40;     // enable PCA
}//end PCA init

void SMB0_Init(void){    // This was at the top, moved it here to call wait()
    SMB0CR = 0x93;      // Set SCL to 100KHz
    ENSMB = 1;          // Enable SMBUS0
}//end SMB0 init
