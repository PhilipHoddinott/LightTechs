                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Jun 20 2015) (MINGW64)
                                      4 ; This file was generated Fri Apr 15 15:21:47 2016
                                      5 ;--------------------------------------------------------
                                      6 	.module LAB4_V45_TESTCODE
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _start_ping
                                     13 	.globl _ReadRanger
                                     14 	.globl _main
                                     15 	.globl _read_keypad
                                     16 	.globl _strlen
                                     17 	.globl _getchar_nw
                                     18 	.globl _Sys_Init
                                     19 	.globl _UART0_Init
                                     20 	.globl _SYSCLK_Init
                                     21 	.globl _abs
                                     22 	.globl _vsprintf
                                     23 	.globl _printf
                                     24 	.globl _SS
                                     25 	.globl _BUS_SCL
                                     26 	.globl _BUS_TOE
                                     27 	.globl _BUS_FTE
                                     28 	.globl _BUS_AA
                                     29 	.globl _BUS_INT
                                     30 	.globl _BUS_STOP
                                     31 	.globl _BUS_START
                                     32 	.globl _BUS_EN
                                     33 	.globl _BUS_BUSY
                                     34 	.globl _SPIF
                                     35 	.globl _WCOL
                                     36 	.globl _MODF
                                     37 	.globl _RXOVRN
                                     38 	.globl _TXBSY
                                     39 	.globl _SLVSEL
                                     40 	.globl _MSTEN
                                     41 	.globl _SPIEN
                                     42 	.globl _AD0EN
                                     43 	.globl _ADCEN
                                     44 	.globl _AD0TM
                                     45 	.globl _ADCTM
                                     46 	.globl _AD0INT
                                     47 	.globl _ADCINT
                                     48 	.globl _AD0BUSY
                                     49 	.globl _ADBUSY
                                     50 	.globl _AD0CM1
                                     51 	.globl _ADSTM1
                                     52 	.globl _AD0CM0
                                     53 	.globl _ADSTM0
                                     54 	.globl _AD0WINT
                                     55 	.globl _ADWINT
                                     56 	.globl _AD0LJST
                                     57 	.globl _ADLJST
                                     58 	.globl _CF
                                     59 	.globl _CR
                                     60 	.globl _CCF4
                                     61 	.globl _CCF3
                                     62 	.globl _CCF2
                                     63 	.globl _CCF1
                                     64 	.globl _CCF0
                                     65 	.globl _CY
                                     66 	.globl _AC
                                     67 	.globl _F0
                                     68 	.globl _RS1
                                     69 	.globl _RS0
                                     70 	.globl _OV
                                     71 	.globl _F1
                                     72 	.globl _P
                                     73 	.globl _TF2
                                     74 	.globl _EXF2
                                     75 	.globl _RCLK
                                     76 	.globl _TCLK
                                     77 	.globl _EXEN2
                                     78 	.globl _TR2
                                     79 	.globl _CT2
                                     80 	.globl _CPRL2
                                     81 	.globl _BUSY
                                     82 	.globl _ENSMB
                                     83 	.globl _STA
                                     84 	.globl _STO
                                     85 	.globl _SI
                                     86 	.globl _AA
                                     87 	.globl _SMBFTE
                                     88 	.globl _SMBTOE
                                     89 	.globl _PT2
                                     90 	.globl _PS
                                     91 	.globl _PS0
                                     92 	.globl _PT1
                                     93 	.globl _PX1
                                     94 	.globl _PT0
                                     95 	.globl _PX0
                                     96 	.globl _P3_7
                                     97 	.globl _P3_6
                                     98 	.globl _P3_5
                                     99 	.globl _P3_4
                                    100 	.globl _P3_3
                                    101 	.globl _P3_2
                                    102 	.globl _P3_1
                                    103 	.globl _P3_0
                                    104 	.globl _EA
                                    105 	.globl _ET2
                                    106 	.globl _ES
                                    107 	.globl _ES0
                                    108 	.globl _ET1
                                    109 	.globl _EX1
                                    110 	.globl _ET0
                                    111 	.globl _EX0
                                    112 	.globl _P2_7
                                    113 	.globl _P2_6
                                    114 	.globl _P2_5
                                    115 	.globl _P2_4
                                    116 	.globl _P2_3
                                    117 	.globl _P2_2
                                    118 	.globl _P2_1
                                    119 	.globl _P2_0
                                    120 	.globl _S0MODE
                                    121 	.globl _SM00
                                    122 	.globl _SM0
                                    123 	.globl _SM10
                                    124 	.globl _SM1
                                    125 	.globl _MCE0
                                    126 	.globl _SM20
                                    127 	.globl _SM2
                                    128 	.globl _REN0
                                    129 	.globl _REN
                                    130 	.globl _TB80
                                    131 	.globl _TB8
                                    132 	.globl _RB80
                                    133 	.globl _RB8
                                    134 	.globl _TI0
                                    135 	.globl _TI
                                    136 	.globl _RI0
                                    137 	.globl _RI
                                    138 	.globl _P1_7
                                    139 	.globl _P1_6
                                    140 	.globl _P1_5
                                    141 	.globl _P1_4
                                    142 	.globl _P1_3
                                    143 	.globl _P1_2
                                    144 	.globl _P1_1
                                    145 	.globl _P1_0
                                    146 	.globl _TF1
                                    147 	.globl _TR1
                                    148 	.globl _TF0
                                    149 	.globl _TR0
                                    150 	.globl _IE1
                                    151 	.globl _IT1
                                    152 	.globl _IE0
                                    153 	.globl _IT0
                                    154 	.globl _P0_7
                                    155 	.globl _P0_6
                                    156 	.globl _P0_5
                                    157 	.globl _P0_4
                                    158 	.globl _P0_3
                                    159 	.globl _P0_2
                                    160 	.globl _P0_1
                                    161 	.globl _P0_0
                                    162 	.globl _PCA0CP4
                                    163 	.globl _PCA0CP3
                                    164 	.globl _PCA0CP2
                                    165 	.globl _PCA0CP1
                                    166 	.globl _PCA0CP0
                                    167 	.globl _PCA0
                                    168 	.globl _DAC1
                                    169 	.globl _DAC0
                                    170 	.globl _ADC0LT
                                    171 	.globl _ADC0GT
                                    172 	.globl _ADC0
                                    173 	.globl _RCAP4
                                    174 	.globl _TMR4
                                    175 	.globl _TMR3RL
                                    176 	.globl _TMR3
                                    177 	.globl _RCAP2
                                    178 	.globl _TMR2
                                    179 	.globl _TMR1
                                    180 	.globl _TMR0
                                    181 	.globl _WDTCN
                                    182 	.globl _PCA0CPH4
                                    183 	.globl _PCA0CPH3
                                    184 	.globl _PCA0CPH2
                                    185 	.globl _PCA0CPH1
                                    186 	.globl _PCA0CPH0
                                    187 	.globl _PCA0H
                                    188 	.globl _SPI0CN
                                    189 	.globl _EIP2
                                    190 	.globl _EIP1
                                    191 	.globl _TH4
                                    192 	.globl _TL4
                                    193 	.globl _SADDR1
                                    194 	.globl _SBUF1
                                    195 	.globl _SCON1
                                    196 	.globl _B
                                    197 	.globl _RSTSRC
                                    198 	.globl _PCA0CPL4
                                    199 	.globl _PCA0CPL3
                                    200 	.globl _PCA0CPL2
                                    201 	.globl _PCA0CPL1
                                    202 	.globl _PCA0CPL0
                                    203 	.globl _PCA0L
                                    204 	.globl _ADC0CN
                                    205 	.globl _EIE2
                                    206 	.globl _EIE1
                                    207 	.globl _RCAP4H
                                    208 	.globl _RCAP4L
                                    209 	.globl _XBR2
                                    210 	.globl _XBR1
                                    211 	.globl _XBR0
                                    212 	.globl _ACC
                                    213 	.globl _PCA0CPM4
                                    214 	.globl _PCA0CPM3
                                    215 	.globl _PCA0CPM2
                                    216 	.globl _PCA0CPM1
                                    217 	.globl _PCA0CPM0
                                    218 	.globl _PCA0MD
                                    219 	.globl _PCA0CN
                                    220 	.globl _DAC1CN
                                    221 	.globl _DAC1H
                                    222 	.globl _DAC1L
                                    223 	.globl _DAC0CN
                                    224 	.globl _DAC0H
                                    225 	.globl _DAC0L
                                    226 	.globl _REF0CN
                                    227 	.globl _PSW
                                    228 	.globl _SMB0CR
                                    229 	.globl _TH2
                                    230 	.globl _TL2
                                    231 	.globl _RCAP2H
                                    232 	.globl _RCAP2L
                                    233 	.globl _T4CON
                                    234 	.globl _T2CON
                                    235 	.globl _ADC0LTH
                                    236 	.globl _ADC0LTL
                                    237 	.globl _ADC0GTH
                                    238 	.globl _ADC0GTL
                                    239 	.globl _SMB0ADR
                                    240 	.globl _SMB0DAT
                                    241 	.globl _SMB0STA
                                    242 	.globl _SMB0CN
                                    243 	.globl _ADC0H
                                    244 	.globl _ADC0L
                                    245 	.globl _P1MDIN
                                    246 	.globl _ADC0CF
                                    247 	.globl _AMX0SL
                                    248 	.globl _AMX0CF
                                    249 	.globl _SADEN0
                                    250 	.globl _IP
                                    251 	.globl _FLACL
                                    252 	.globl _FLSCL
                                    253 	.globl _P74OUT
                                    254 	.globl _OSCICN
                                    255 	.globl _OSCXCN
                                    256 	.globl _P3
                                    257 	.globl __XPAGE
                                    258 	.globl _EMI0CN
                                    259 	.globl _SADEN1
                                    260 	.globl _P3IF
                                    261 	.globl _AMX1SL
                                    262 	.globl _ADC1CF
                                    263 	.globl _ADC1CN
                                    264 	.globl _SADDR0
                                    265 	.globl _IE
                                    266 	.globl _P3MDOUT
                                    267 	.globl _PRT3CF
                                    268 	.globl _P2MDOUT
                                    269 	.globl _PRT2CF
                                    270 	.globl _P1MDOUT
                                    271 	.globl _PRT1CF
                                    272 	.globl _P0MDOUT
                                    273 	.globl _PRT0CF
                                    274 	.globl _EMI0CF
                                    275 	.globl _EMI0TC
                                    276 	.globl _P2
                                    277 	.globl _CPT1CN
                                    278 	.globl _CPT0CN
                                    279 	.globl _SPI0CKR
                                    280 	.globl _ADC1
                                    281 	.globl _SPI0DAT
                                    282 	.globl _SPI0CFG
                                    283 	.globl _SBUF0
                                    284 	.globl _SBUF
                                    285 	.globl _SCON0
                                    286 	.globl _SCON
                                    287 	.globl _P7
                                    288 	.globl _TMR3H
                                    289 	.globl _TMR3L
                                    290 	.globl _TMR3RLH
                                    291 	.globl _TMR3RLL
                                    292 	.globl _TMR3CN
                                    293 	.globl _P1
                                    294 	.globl _PSCTL
                                    295 	.globl _CKCON
                                    296 	.globl _TH1
                                    297 	.globl _TH0
                                    298 	.globl _TL1
                                    299 	.globl _TL0
                                    300 	.globl _TMOD
                                    301 	.globl _TCON
                                    302 	.globl _PCON
                                    303 	.globl _P6
                                    304 	.globl _P5
                                    305 	.globl _P4
                                    306 	.globl _DPH
                                    307 	.globl _DPL
                                    308 	.globl _SP
                                    309 	.globl _P0
                                    310 	.globl _steer_gain
                                    311 	.globl _keypad
                                    312 	.globl _battery
                                    313 	.globl _near_obstical
                                    314 	.globl _error1
                                    315 	.globl _desired_heading
                                    316 	.globl _STEER_PW
                                    317 	.globl _MOTOR_PW_AND_STEER_PW
                                    318 	.globl _PW_CENTER
                                    319 	.globl _PW_MIN
                                    320 	.globl _PW_MAX
                                    321 	.globl _ping_Data
                                    322 	.globl _comp_and_range_Data
                                    323 	.globl _range_and_ping_addr
                                    324 	.globl _comp_addr
                                    325 	.globl _new_range
                                    326 	.globl _new_heading
                                    327 	.globl _heading
                                    328 	.globl _range
                                    329 	.globl _print_count
                                    330 	.globl _n_count
                                    331 	.globl _Counts
                                    332 	.globl _new_print
                                    333 	.globl _hr_count
                                    334 	.globl _i2c_read_data_PARM_4
                                    335 	.globl _i2c_read_data_PARM_3
                                    336 	.globl _i2c_read_data_PARM_2
                                    337 	.globl _i2c_write_data_PARM_4
                                    338 	.globl _i2c_write_data_PARM_3
                                    339 	.globl _i2c_write_data_PARM_2
                                    340 	.globl _putchar
                                    341 	.globl _getchar
                                    342 	.globl _lcd_print
                                    343 	.globl _lcd_clear
                                    344 	.globl _kpd_input
                                    345 	.globl _delay_time
                                    346 	.globl _i2c_start
                                    347 	.globl _i2c_write
                                    348 	.globl _i2c_write_and_stop
                                    349 	.globl _i2c_read
                                    350 	.globl _i2c_read_and_stop
                                    351 	.globl _i2c_write_data
                                    352 	.globl _i2c_read_data
                                    353 	.globl _Accel_Init
                                    354 	.globl _start_run
                                    355 	.globl _slide_switch_off
                                    356 	.globl _ReadCompass
                                    357 	.globl _Heading
                                    358 	.globl _Ranger
                                    359 	.globl _LCD_Print
                                    360 	.globl _choose_gain
                                    361 	.globl _choose_heading
                                    362 	.globl _choose_speed
                                    363 	.globl _Steering_Servo
                                    364 	.globl _Drive_Motor
                                    365 	.globl _pause
                                    366 	.globl _PCA_Init
                                    367 	.globl _Port_Init
                                    368 	.globl _XBR0_Init
                                    369 	.globl _ADC_Init
                                    370 	.globl _read_AD_input
                                    371 	.globl _SMB_Init
                                    372 	.globl _PCA_ISR
                                    373 ;--------------------------------------------------------
                                    374 ; special function registers
                                    375 ;--------------------------------------------------------
                                    376 	.area RSEG    (ABS,DATA)
      000000                        377 	.org 0x0000
                           000080   378 G$P0$0$0 == 0x0080
                           000080   379 _P0	=	0x0080
                           000081   380 G$SP$0$0 == 0x0081
                           000081   381 _SP	=	0x0081
                           000082   382 G$DPL$0$0 == 0x0082
                           000082   383 _DPL	=	0x0082
                           000083   384 G$DPH$0$0 == 0x0083
                           000083   385 _DPH	=	0x0083
                           000084   386 G$P4$0$0 == 0x0084
                           000084   387 _P4	=	0x0084
                           000085   388 G$P5$0$0 == 0x0085
                           000085   389 _P5	=	0x0085
                           000086   390 G$P6$0$0 == 0x0086
                           000086   391 _P6	=	0x0086
                           000087   392 G$PCON$0$0 == 0x0087
                           000087   393 _PCON	=	0x0087
                           000088   394 G$TCON$0$0 == 0x0088
                           000088   395 _TCON	=	0x0088
                           000089   396 G$TMOD$0$0 == 0x0089
                           000089   397 _TMOD	=	0x0089
                           00008A   398 G$TL0$0$0 == 0x008a
                           00008A   399 _TL0	=	0x008a
                           00008B   400 G$TL1$0$0 == 0x008b
                           00008B   401 _TL1	=	0x008b
                           00008C   402 G$TH0$0$0 == 0x008c
                           00008C   403 _TH0	=	0x008c
                           00008D   404 G$TH1$0$0 == 0x008d
                           00008D   405 _TH1	=	0x008d
                           00008E   406 G$CKCON$0$0 == 0x008e
                           00008E   407 _CKCON	=	0x008e
                           00008F   408 G$PSCTL$0$0 == 0x008f
                           00008F   409 _PSCTL	=	0x008f
                           000090   410 G$P1$0$0 == 0x0090
                           000090   411 _P1	=	0x0090
                           000091   412 G$TMR3CN$0$0 == 0x0091
                           000091   413 _TMR3CN	=	0x0091
                           000092   414 G$TMR3RLL$0$0 == 0x0092
                           000092   415 _TMR3RLL	=	0x0092
                           000093   416 G$TMR3RLH$0$0 == 0x0093
                           000093   417 _TMR3RLH	=	0x0093
                           000094   418 G$TMR3L$0$0 == 0x0094
                           000094   419 _TMR3L	=	0x0094
                           000095   420 G$TMR3H$0$0 == 0x0095
                           000095   421 _TMR3H	=	0x0095
                           000096   422 G$P7$0$0 == 0x0096
                           000096   423 _P7	=	0x0096
                           000098   424 G$SCON$0$0 == 0x0098
                           000098   425 _SCON	=	0x0098
                           000098   426 G$SCON0$0$0 == 0x0098
                           000098   427 _SCON0	=	0x0098
                           000099   428 G$SBUF$0$0 == 0x0099
                           000099   429 _SBUF	=	0x0099
                           000099   430 G$SBUF0$0$0 == 0x0099
                           000099   431 _SBUF0	=	0x0099
                           00009A   432 G$SPI0CFG$0$0 == 0x009a
                           00009A   433 _SPI0CFG	=	0x009a
                           00009B   434 G$SPI0DAT$0$0 == 0x009b
                           00009B   435 _SPI0DAT	=	0x009b
                           00009C   436 G$ADC1$0$0 == 0x009c
                           00009C   437 _ADC1	=	0x009c
                           00009D   438 G$SPI0CKR$0$0 == 0x009d
                           00009D   439 _SPI0CKR	=	0x009d
                           00009E   440 G$CPT0CN$0$0 == 0x009e
                           00009E   441 _CPT0CN	=	0x009e
                           00009F   442 G$CPT1CN$0$0 == 0x009f
                           00009F   443 _CPT1CN	=	0x009f
                           0000A0   444 G$P2$0$0 == 0x00a0
                           0000A0   445 _P2	=	0x00a0
                           0000A1   446 G$EMI0TC$0$0 == 0x00a1
                           0000A1   447 _EMI0TC	=	0x00a1
                           0000A3   448 G$EMI0CF$0$0 == 0x00a3
                           0000A3   449 _EMI0CF	=	0x00a3
                           0000A4   450 G$PRT0CF$0$0 == 0x00a4
                           0000A4   451 _PRT0CF	=	0x00a4
                           0000A4   452 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   453 _P0MDOUT	=	0x00a4
                           0000A5   454 G$PRT1CF$0$0 == 0x00a5
                           0000A5   455 _PRT1CF	=	0x00a5
                           0000A5   456 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   457 _P1MDOUT	=	0x00a5
                           0000A6   458 G$PRT2CF$0$0 == 0x00a6
                           0000A6   459 _PRT2CF	=	0x00a6
                           0000A6   460 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   461 _P2MDOUT	=	0x00a6
                           0000A7   462 G$PRT3CF$0$0 == 0x00a7
                           0000A7   463 _PRT3CF	=	0x00a7
                           0000A7   464 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   465 _P3MDOUT	=	0x00a7
                           0000A8   466 G$IE$0$0 == 0x00a8
                           0000A8   467 _IE	=	0x00a8
                           0000A9   468 G$SADDR0$0$0 == 0x00a9
                           0000A9   469 _SADDR0	=	0x00a9
                           0000AA   470 G$ADC1CN$0$0 == 0x00aa
                           0000AA   471 _ADC1CN	=	0x00aa
                           0000AB   472 G$ADC1CF$0$0 == 0x00ab
                           0000AB   473 _ADC1CF	=	0x00ab
                           0000AC   474 G$AMX1SL$0$0 == 0x00ac
                           0000AC   475 _AMX1SL	=	0x00ac
                           0000AD   476 G$P3IF$0$0 == 0x00ad
                           0000AD   477 _P3IF	=	0x00ad
                           0000AE   478 G$SADEN1$0$0 == 0x00ae
                           0000AE   479 _SADEN1	=	0x00ae
                           0000AF   480 G$EMI0CN$0$0 == 0x00af
                           0000AF   481 _EMI0CN	=	0x00af
                           0000AF   482 G$_XPAGE$0$0 == 0x00af
                           0000AF   483 __XPAGE	=	0x00af
                           0000B0   484 G$P3$0$0 == 0x00b0
                           0000B0   485 _P3	=	0x00b0
                           0000B1   486 G$OSCXCN$0$0 == 0x00b1
                           0000B1   487 _OSCXCN	=	0x00b1
                           0000B2   488 G$OSCICN$0$0 == 0x00b2
                           0000B2   489 _OSCICN	=	0x00b2
                           0000B5   490 G$P74OUT$0$0 == 0x00b5
                           0000B5   491 _P74OUT	=	0x00b5
                           0000B6   492 G$FLSCL$0$0 == 0x00b6
                           0000B6   493 _FLSCL	=	0x00b6
                           0000B7   494 G$FLACL$0$0 == 0x00b7
                           0000B7   495 _FLACL	=	0x00b7
                           0000B8   496 G$IP$0$0 == 0x00b8
                           0000B8   497 _IP	=	0x00b8
                           0000B9   498 G$SADEN0$0$0 == 0x00b9
                           0000B9   499 _SADEN0	=	0x00b9
                           0000BA   500 G$AMX0CF$0$0 == 0x00ba
                           0000BA   501 _AMX0CF	=	0x00ba
                           0000BB   502 G$AMX0SL$0$0 == 0x00bb
                           0000BB   503 _AMX0SL	=	0x00bb
                           0000BC   504 G$ADC0CF$0$0 == 0x00bc
                           0000BC   505 _ADC0CF	=	0x00bc
                           0000BD   506 G$P1MDIN$0$0 == 0x00bd
                           0000BD   507 _P1MDIN	=	0x00bd
                           0000BE   508 G$ADC0L$0$0 == 0x00be
                           0000BE   509 _ADC0L	=	0x00be
                           0000BF   510 G$ADC0H$0$0 == 0x00bf
                           0000BF   511 _ADC0H	=	0x00bf
                           0000C0   512 G$SMB0CN$0$0 == 0x00c0
                           0000C0   513 _SMB0CN	=	0x00c0
                           0000C1   514 G$SMB0STA$0$0 == 0x00c1
                           0000C1   515 _SMB0STA	=	0x00c1
                           0000C2   516 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   517 _SMB0DAT	=	0x00c2
                           0000C3   518 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   519 _SMB0ADR	=	0x00c3
                           0000C4   520 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   521 _ADC0GTL	=	0x00c4
                           0000C5   522 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   523 _ADC0GTH	=	0x00c5
                           0000C6   524 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   525 _ADC0LTL	=	0x00c6
                           0000C7   526 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   527 _ADC0LTH	=	0x00c7
                           0000C8   528 G$T2CON$0$0 == 0x00c8
                           0000C8   529 _T2CON	=	0x00c8
                           0000C9   530 G$T4CON$0$0 == 0x00c9
                           0000C9   531 _T4CON	=	0x00c9
                           0000CA   532 G$RCAP2L$0$0 == 0x00ca
                           0000CA   533 _RCAP2L	=	0x00ca
                           0000CB   534 G$RCAP2H$0$0 == 0x00cb
                           0000CB   535 _RCAP2H	=	0x00cb
                           0000CC   536 G$TL2$0$0 == 0x00cc
                           0000CC   537 _TL2	=	0x00cc
                           0000CD   538 G$TH2$0$0 == 0x00cd
                           0000CD   539 _TH2	=	0x00cd
                           0000CF   540 G$SMB0CR$0$0 == 0x00cf
                           0000CF   541 _SMB0CR	=	0x00cf
                           0000D0   542 G$PSW$0$0 == 0x00d0
                           0000D0   543 _PSW	=	0x00d0
                           0000D1   544 G$REF0CN$0$0 == 0x00d1
                           0000D1   545 _REF0CN	=	0x00d1
                           0000D2   546 G$DAC0L$0$0 == 0x00d2
                           0000D2   547 _DAC0L	=	0x00d2
                           0000D3   548 G$DAC0H$0$0 == 0x00d3
                           0000D3   549 _DAC0H	=	0x00d3
                           0000D4   550 G$DAC0CN$0$0 == 0x00d4
                           0000D4   551 _DAC0CN	=	0x00d4
                           0000D5   552 G$DAC1L$0$0 == 0x00d5
                           0000D5   553 _DAC1L	=	0x00d5
                           0000D6   554 G$DAC1H$0$0 == 0x00d6
                           0000D6   555 _DAC1H	=	0x00d6
                           0000D7   556 G$DAC1CN$0$0 == 0x00d7
                           0000D7   557 _DAC1CN	=	0x00d7
                           0000D8   558 G$PCA0CN$0$0 == 0x00d8
                           0000D8   559 _PCA0CN	=	0x00d8
                           0000D9   560 G$PCA0MD$0$0 == 0x00d9
                           0000D9   561 _PCA0MD	=	0x00d9
                           0000DA   562 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   563 _PCA0CPM0	=	0x00da
                           0000DB   564 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   565 _PCA0CPM1	=	0x00db
                           0000DC   566 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   567 _PCA0CPM2	=	0x00dc
                           0000DD   568 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   569 _PCA0CPM3	=	0x00dd
                           0000DE   570 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   571 _PCA0CPM4	=	0x00de
                           0000E0   572 G$ACC$0$0 == 0x00e0
                           0000E0   573 _ACC	=	0x00e0
                           0000E1   574 G$XBR0$0$0 == 0x00e1
                           0000E1   575 _XBR0	=	0x00e1
                           0000E2   576 G$XBR1$0$0 == 0x00e2
                           0000E2   577 _XBR1	=	0x00e2
                           0000E3   578 G$XBR2$0$0 == 0x00e3
                           0000E3   579 _XBR2	=	0x00e3
                           0000E4   580 G$RCAP4L$0$0 == 0x00e4
                           0000E4   581 _RCAP4L	=	0x00e4
                           0000E5   582 G$RCAP4H$0$0 == 0x00e5
                           0000E5   583 _RCAP4H	=	0x00e5
                           0000E6   584 G$EIE1$0$0 == 0x00e6
                           0000E6   585 _EIE1	=	0x00e6
                           0000E7   586 G$EIE2$0$0 == 0x00e7
                           0000E7   587 _EIE2	=	0x00e7
                           0000E8   588 G$ADC0CN$0$0 == 0x00e8
                           0000E8   589 _ADC0CN	=	0x00e8
                           0000E9   590 G$PCA0L$0$0 == 0x00e9
                           0000E9   591 _PCA0L	=	0x00e9
                           0000EA   592 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   593 _PCA0CPL0	=	0x00ea
                           0000EB   594 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   595 _PCA0CPL1	=	0x00eb
                           0000EC   596 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   597 _PCA0CPL2	=	0x00ec
                           0000ED   598 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   599 _PCA0CPL3	=	0x00ed
                           0000EE   600 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   601 _PCA0CPL4	=	0x00ee
                           0000EF   602 G$RSTSRC$0$0 == 0x00ef
                           0000EF   603 _RSTSRC	=	0x00ef
                           0000F0   604 G$B$0$0 == 0x00f0
                           0000F0   605 _B	=	0x00f0
                           0000F1   606 G$SCON1$0$0 == 0x00f1
                           0000F1   607 _SCON1	=	0x00f1
                           0000F2   608 G$SBUF1$0$0 == 0x00f2
                           0000F2   609 _SBUF1	=	0x00f2
                           0000F3   610 G$SADDR1$0$0 == 0x00f3
                           0000F3   611 _SADDR1	=	0x00f3
                           0000F4   612 G$TL4$0$0 == 0x00f4
                           0000F4   613 _TL4	=	0x00f4
                           0000F5   614 G$TH4$0$0 == 0x00f5
                           0000F5   615 _TH4	=	0x00f5
                           0000F6   616 G$EIP1$0$0 == 0x00f6
                           0000F6   617 _EIP1	=	0x00f6
                           0000F7   618 G$EIP2$0$0 == 0x00f7
                           0000F7   619 _EIP2	=	0x00f7
                           0000F8   620 G$SPI0CN$0$0 == 0x00f8
                           0000F8   621 _SPI0CN	=	0x00f8
                           0000F9   622 G$PCA0H$0$0 == 0x00f9
                           0000F9   623 _PCA0H	=	0x00f9
                           0000FA   624 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   625 _PCA0CPH0	=	0x00fa
                           0000FB   626 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   627 _PCA0CPH1	=	0x00fb
                           0000FC   628 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   629 _PCA0CPH2	=	0x00fc
                           0000FD   630 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   631 _PCA0CPH3	=	0x00fd
                           0000FE   632 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   633 _PCA0CPH4	=	0x00fe
                           0000FF   634 G$WDTCN$0$0 == 0x00ff
                           0000FF   635 _WDTCN	=	0x00ff
                           008C8A   636 G$TMR0$0$0 == 0x8c8a
                           008C8A   637 _TMR0	=	0x8c8a
                           008D8B   638 G$TMR1$0$0 == 0x8d8b
                           008D8B   639 _TMR1	=	0x8d8b
                           00CDCC   640 G$TMR2$0$0 == 0xcdcc
                           00CDCC   641 _TMR2	=	0xcdcc
                           00CBCA   642 G$RCAP2$0$0 == 0xcbca
                           00CBCA   643 _RCAP2	=	0xcbca
                           009594   644 G$TMR3$0$0 == 0x9594
                           009594   645 _TMR3	=	0x9594
                           009392   646 G$TMR3RL$0$0 == 0x9392
                           009392   647 _TMR3RL	=	0x9392
                           00F5F4   648 G$TMR4$0$0 == 0xf5f4
                           00F5F4   649 _TMR4	=	0xf5f4
                           00E5E4   650 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   651 _RCAP4	=	0xe5e4
                           00BFBE   652 G$ADC0$0$0 == 0xbfbe
                           00BFBE   653 _ADC0	=	0xbfbe
                           00C5C4   654 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   655 _ADC0GT	=	0xc5c4
                           00C7C6   656 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   657 _ADC0LT	=	0xc7c6
                           00D3D2   658 G$DAC0$0$0 == 0xd3d2
                           00D3D2   659 _DAC0	=	0xd3d2
                           00D6D5   660 G$DAC1$0$0 == 0xd6d5
                           00D6D5   661 _DAC1	=	0xd6d5
                           00F9E9   662 G$PCA0$0$0 == 0xf9e9
                           00F9E9   663 _PCA0	=	0xf9e9
                           00FAEA   664 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   665 _PCA0CP0	=	0xfaea
                           00FBEB   666 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   667 _PCA0CP1	=	0xfbeb
                           00FCEC   668 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   669 _PCA0CP2	=	0xfcec
                           00FDED   670 G$PCA0CP3$0$0 == 0xfded
                           00FDED   671 _PCA0CP3	=	0xfded
                           00FEEE   672 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   673 _PCA0CP4	=	0xfeee
                                    674 ;--------------------------------------------------------
                                    675 ; special function bits
                                    676 ;--------------------------------------------------------
                                    677 	.area RSEG    (ABS,DATA)
      000000                        678 	.org 0x0000
                           000080   679 G$P0_0$0$0 == 0x0080
                           000080   680 _P0_0	=	0x0080
                           000081   681 G$P0_1$0$0 == 0x0081
                           000081   682 _P0_1	=	0x0081
                           000082   683 G$P0_2$0$0 == 0x0082
                           000082   684 _P0_2	=	0x0082
                           000083   685 G$P0_3$0$0 == 0x0083
                           000083   686 _P0_3	=	0x0083
                           000084   687 G$P0_4$0$0 == 0x0084
                           000084   688 _P0_4	=	0x0084
                           000085   689 G$P0_5$0$0 == 0x0085
                           000085   690 _P0_5	=	0x0085
                           000086   691 G$P0_6$0$0 == 0x0086
                           000086   692 _P0_6	=	0x0086
                           000087   693 G$P0_7$0$0 == 0x0087
                           000087   694 _P0_7	=	0x0087
                           000088   695 G$IT0$0$0 == 0x0088
                           000088   696 _IT0	=	0x0088
                           000089   697 G$IE0$0$0 == 0x0089
                           000089   698 _IE0	=	0x0089
                           00008A   699 G$IT1$0$0 == 0x008a
                           00008A   700 _IT1	=	0x008a
                           00008B   701 G$IE1$0$0 == 0x008b
                           00008B   702 _IE1	=	0x008b
                           00008C   703 G$TR0$0$0 == 0x008c
                           00008C   704 _TR0	=	0x008c
                           00008D   705 G$TF0$0$0 == 0x008d
                           00008D   706 _TF0	=	0x008d
                           00008E   707 G$TR1$0$0 == 0x008e
                           00008E   708 _TR1	=	0x008e
                           00008F   709 G$TF1$0$0 == 0x008f
                           00008F   710 _TF1	=	0x008f
                           000090   711 G$P1_0$0$0 == 0x0090
                           000090   712 _P1_0	=	0x0090
                           000091   713 G$P1_1$0$0 == 0x0091
                           000091   714 _P1_1	=	0x0091
                           000092   715 G$P1_2$0$0 == 0x0092
                           000092   716 _P1_2	=	0x0092
                           000093   717 G$P1_3$0$0 == 0x0093
                           000093   718 _P1_3	=	0x0093
                           000094   719 G$P1_4$0$0 == 0x0094
                           000094   720 _P1_4	=	0x0094
                           000095   721 G$P1_5$0$0 == 0x0095
                           000095   722 _P1_5	=	0x0095
                           000096   723 G$P1_6$0$0 == 0x0096
                           000096   724 _P1_6	=	0x0096
                           000097   725 G$P1_7$0$0 == 0x0097
                           000097   726 _P1_7	=	0x0097
                           000098   727 G$RI$0$0 == 0x0098
                           000098   728 _RI	=	0x0098
                           000098   729 G$RI0$0$0 == 0x0098
                           000098   730 _RI0	=	0x0098
                           000099   731 G$TI$0$0 == 0x0099
                           000099   732 _TI	=	0x0099
                           000099   733 G$TI0$0$0 == 0x0099
                           000099   734 _TI0	=	0x0099
                           00009A   735 G$RB8$0$0 == 0x009a
                           00009A   736 _RB8	=	0x009a
                           00009A   737 G$RB80$0$0 == 0x009a
                           00009A   738 _RB80	=	0x009a
                           00009B   739 G$TB8$0$0 == 0x009b
                           00009B   740 _TB8	=	0x009b
                           00009B   741 G$TB80$0$0 == 0x009b
                           00009B   742 _TB80	=	0x009b
                           00009C   743 G$REN$0$0 == 0x009c
                           00009C   744 _REN	=	0x009c
                           00009C   745 G$REN0$0$0 == 0x009c
                           00009C   746 _REN0	=	0x009c
                           00009D   747 G$SM2$0$0 == 0x009d
                           00009D   748 _SM2	=	0x009d
                           00009D   749 G$SM20$0$0 == 0x009d
                           00009D   750 _SM20	=	0x009d
                           00009D   751 G$MCE0$0$0 == 0x009d
                           00009D   752 _MCE0	=	0x009d
                           00009E   753 G$SM1$0$0 == 0x009e
                           00009E   754 _SM1	=	0x009e
                           00009E   755 G$SM10$0$0 == 0x009e
                           00009E   756 _SM10	=	0x009e
                           00009F   757 G$SM0$0$0 == 0x009f
                           00009F   758 _SM0	=	0x009f
                           00009F   759 G$SM00$0$0 == 0x009f
                           00009F   760 _SM00	=	0x009f
                           00009F   761 G$S0MODE$0$0 == 0x009f
                           00009F   762 _S0MODE	=	0x009f
                           0000A0   763 G$P2_0$0$0 == 0x00a0
                           0000A0   764 _P2_0	=	0x00a0
                           0000A1   765 G$P2_1$0$0 == 0x00a1
                           0000A1   766 _P2_1	=	0x00a1
                           0000A2   767 G$P2_2$0$0 == 0x00a2
                           0000A2   768 _P2_2	=	0x00a2
                           0000A3   769 G$P2_3$0$0 == 0x00a3
                           0000A3   770 _P2_3	=	0x00a3
                           0000A4   771 G$P2_4$0$0 == 0x00a4
                           0000A4   772 _P2_4	=	0x00a4
                           0000A5   773 G$P2_5$0$0 == 0x00a5
                           0000A5   774 _P2_5	=	0x00a5
                           0000A6   775 G$P2_6$0$0 == 0x00a6
                           0000A6   776 _P2_6	=	0x00a6
                           0000A7   777 G$P2_7$0$0 == 0x00a7
                           0000A7   778 _P2_7	=	0x00a7
                           0000A8   779 G$EX0$0$0 == 0x00a8
                           0000A8   780 _EX0	=	0x00a8
                           0000A9   781 G$ET0$0$0 == 0x00a9
                           0000A9   782 _ET0	=	0x00a9
                           0000AA   783 G$EX1$0$0 == 0x00aa
                           0000AA   784 _EX1	=	0x00aa
                           0000AB   785 G$ET1$0$0 == 0x00ab
                           0000AB   786 _ET1	=	0x00ab
                           0000AC   787 G$ES0$0$0 == 0x00ac
                           0000AC   788 _ES0	=	0x00ac
                           0000AC   789 G$ES$0$0 == 0x00ac
                           0000AC   790 _ES	=	0x00ac
                           0000AD   791 G$ET2$0$0 == 0x00ad
                           0000AD   792 _ET2	=	0x00ad
                           0000AF   793 G$EA$0$0 == 0x00af
                           0000AF   794 _EA	=	0x00af
                           0000B0   795 G$P3_0$0$0 == 0x00b0
                           0000B0   796 _P3_0	=	0x00b0
                           0000B1   797 G$P3_1$0$0 == 0x00b1
                           0000B1   798 _P3_1	=	0x00b1
                           0000B2   799 G$P3_2$0$0 == 0x00b2
                           0000B2   800 _P3_2	=	0x00b2
                           0000B3   801 G$P3_3$0$0 == 0x00b3
                           0000B3   802 _P3_3	=	0x00b3
                           0000B4   803 G$P3_4$0$0 == 0x00b4
                           0000B4   804 _P3_4	=	0x00b4
                           0000B5   805 G$P3_5$0$0 == 0x00b5
                           0000B5   806 _P3_5	=	0x00b5
                           0000B6   807 G$P3_6$0$0 == 0x00b6
                           0000B6   808 _P3_6	=	0x00b6
                           0000B7   809 G$P3_7$0$0 == 0x00b7
                           0000B7   810 _P3_7	=	0x00b7
                           0000B8   811 G$PX0$0$0 == 0x00b8
                           0000B8   812 _PX0	=	0x00b8
                           0000B9   813 G$PT0$0$0 == 0x00b9
                           0000B9   814 _PT0	=	0x00b9
                           0000BA   815 G$PX1$0$0 == 0x00ba
                           0000BA   816 _PX1	=	0x00ba
                           0000BB   817 G$PT1$0$0 == 0x00bb
                           0000BB   818 _PT1	=	0x00bb
                           0000BC   819 G$PS0$0$0 == 0x00bc
                           0000BC   820 _PS0	=	0x00bc
                           0000BC   821 G$PS$0$0 == 0x00bc
                           0000BC   822 _PS	=	0x00bc
                           0000BD   823 G$PT2$0$0 == 0x00bd
                           0000BD   824 _PT2	=	0x00bd
                           0000C0   825 G$SMBTOE$0$0 == 0x00c0
                           0000C0   826 _SMBTOE	=	0x00c0
                           0000C1   827 G$SMBFTE$0$0 == 0x00c1
                           0000C1   828 _SMBFTE	=	0x00c1
                           0000C2   829 G$AA$0$0 == 0x00c2
                           0000C2   830 _AA	=	0x00c2
                           0000C3   831 G$SI$0$0 == 0x00c3
                           0000C3   832 _SI	=	0x00c3
                           0000C4   833 G$STO$0$0 == 0x00c4
                           0000C4   834 _STO	=	0x00c4
                           0000C5   835 G$STA$0$0 == 0x00c5
                           0000C5   836 _STA	=	0x00c5
                           0000C6   837 G$ENSMB$0$0 == 0x00c6
                           0000C6   838 _ENSMB	=	0x00c6
                           0000C7   839 G$BUSY$0$0 == 0x00c7
                           0000C7   840 _BUSY	=	0x00c7
                           0000C8   841 G$CPRL2$0$0 == 0x00c8
                           0000C8   842 _CPRL2	=	0x00c8
                           0000C9   843 G$CT2$0$0 == 0x00c9
                           0000C9   844 _CT2	=	0x00c9
                           0000CA   845 G$TR2$0$0 == 0x00ca
                           0000CA   846 _TR2	=	0x00ca
                           0000CB   847 G$EXEN2$0$0 == 0x00cb
                           0000CB   848 _EXEN2	=	0x00cb
                           0000CC   849 G$TCLK$0$0 == 0x00cc
                           0000CC   850 _TCLK	=	0x00cc
                           0000CD   851 G$RCLK$0$0 == 0x00cd
                           0000CD   852 _RCLK	=	0x00cd
                           0000CE   853 G$EXF2$0$0 == 0x00ce
                           0000CE   854 _EXF2	=	0x00ce
                           0000CF   855 G$TF2$0$0 == 0x00cf
                           0000CF   856 _TF2	=	0x00cf
                           0000D0   857 G$P$0$0 == 0x00d0
                           0000D0   858 _P	=	0x00d0
                           0000D1   859 G$F1$0$0 == 0x00d1
                           0000D1   860 _F1	=	0x00d1
                           0000D2   861 G$OV$0$0 == 0x00d2
                           0000D2   862 _OV	=	0x00d2
                           0000D3   863 G$RS0$0$0 == 0x00d3
                           0000D3   864 _RS0	=	0x00d3
                           0000D4   865 G$RS1$0$0 == 0x00d4
                           0000D4   866 _RS1	=	0x00d4
                           0000D5   867 G$F0$0$0 == 0x00d5
                           0000D5   868 _F0	=	0x00d5
                           0000D6   869 G$AC$0$0 == 0x00d6
                           0000D6   870 _AC	=	0x00d6
                           0000D7   871 G$CY$0$0 == 0x00d7
                           0000D7   872 _CY	=	0x00d7
                           0000D8   873 G$CCF0$0$0 == 0x00d8
                           0000D8   874 _CCF0	=	0x00d8
                           0000D9   875 G$CCF1$0$0 == 0x00d9
                           0000D9   876 _CCF1	=	0x00d9
                           0000DA   877 G$CCF2$0$0 == 0x00da
                           0000DA   878 _CCF2	=	0x00da
                           0000DB   879 G$CCF3$0$0 == 0x00db
                           0000DB   880 _CCF3	=	0x00db
                           0000DC   881 G$CCF4$0$0 == 0x00dc
                           0000DC   882 _CCF4	=	0x00dc
                           0000DE   883 G$CR$0$0 == 0x00de
                           0000DE   884 _CR	=	0x00de
                           0000DF   885 G$CF$0$0 == 0x00df
                           0000DF   886 _CF	=	0x00df
                           0000E8   887 G$ADLJST$0$0 == 0x00e8
                           0000E8   888 _ADLJST	=	0x00e8
                           0000E8   889 G$AD0LJST$0$0 == 0x00e8
                           0000E8   890 _AD0LJST	=	0x00e8
                           0000E9   891 G$ADWINT$0$0 == 0x00e9
                           0000E9   892 _ADWINT	=	0x00e9
                           0000E9   893 G$AD0WINT$0$0 == 0x00e9
                           0000E9   894 _AD0WINT	=	0x00e9
                           0000EA   895 G$ADSTM0$0$0 == 0x00ea
                           0000EA   896 _ADSTM0	=	0x00ea
                           0000EA   897 G$AD0CM0$0$0 == 0x00ea
                           0000EA   898 _AD0CM0	=	0x00ea
                           0000EB   899 G$ADSTM1$0$0 == 0x00eb
                           0000EB   900 _ADSTM1	=	0x00eb
                           0000EB   901 G$AD0CM1$0$0 == 0x00eb
                           0000EB   902 _AD0CM1	=	0x00eb
                           0000EC   903 G$ADBUSY$0$0 == 0x00ec
                           0000EC   904 _ADBUSY	=	0x00ec
                           0000EC   905 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   906 _AD0BUSY	=	0x00ec
                           0000ED   907 G$ADCINT$0$0 == 0x00ed
                           0000ED   908 _ADCINT	=	0x00ed
                           0000ED   909 G$AD0INT$0$0 == 0x00ed
                           0000ED   910 _AD0INT	=	0x00ed
                           0000EE   911 G$ADCTM$0$0 == 0x00ee
                           0000EE   912 _ADCTM	=	0x00ee
                           0000EE   913 G$AD0TM$0$0 == 0x00ee
                           0000EE   914 _AD0TM	=	0x00ee
                           0000EF   915 G$ADCEN$0$0 == 0x00ef
                           0000EF   916 _ADCEN	=	0x00ef
                           0000EF   917 G$AD0EN$0$0 == 0x00ef
                           0000EF   918 _AD0EN	=	0x00ef
                           0000F8   919 G$SPIEN$0$0 == 0x00f8
                           0000F8   920 _SPIEN	=	0x00f8
                           0000F9   921 G$MSTEN$0$0 == 0x00f9
                           0000F9   922 _MSTEN	=	0x00f9
                           0000FA   923 G$SLVSEL$0$0 == 0x00fa
                           0000FA   924 _SLVSEL	=	0x00fa
                           0000FB   925 G$TXBSY$0$0 == 0x00fb
                           0000FB   926 _TXBSY	=	0x00fb
                           0000FC   927 G$RXOVRN$0$0 == 0x00fc
                           0000FC   928 _RXOVRN	=	0x00fc
                           0000FD   929 G$MODF$0$0 == 0x00fd
                           0000FD   930 _MODF	=	0x00fd
                           0000FE   931 G$WCOL$0$0 == 0x00fe
                           0000FE   932 _WCOL	=	0x00fe
                           0000FF   933 G$SPIF$0$0 == 0x00ff
                           0000FF   934 _SPIF	=	0x00ff
                           0000C7   935 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   936 _BUS_BUSY	=	0x00c7
                           0000C6   937 G$BUS_EN$0$0 == 0x00c6
                           0000C6   938 _BUS_EN	=	0x00c6
                           0000C5   939 G$BUS_START$0$0 == 0x00c5
                           0000C5   940 _BUS_START	=	0x00c5
                           0000C4   941 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   942 _BUS_STOP	=	0x00c4
                           0000C3   943 G$BUS_INT$0$0 == 0x00c3
                           0000C3   944 _BUS_INT	=	0x00c3
                           0000C2   945 G$BUS_AA$0$0 == 0x00c2
                           0000C2   946 _BUS_AA	=	0x00c2
                           0000C1   947 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   948 _BUS_FTE	=	0x00c1
                           0000C0   949 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   950 _BUS_TOE	=	0x00c0
                           000083   951 G$BUS_SCL$0$0 == 0x0083
                           000083   952 _BUS_SCL	=	0x0083
                           0000B7   953 G$SS$0$0 == 0x00b7
                           0000B7   954 _SS	=	0x00b7
                                    955 ;--------------------------------------------------------
                                    956 ; overlayable register banks
                                    957 ;--------------------------------------------------------
                                    958 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        959 	.ds 8
                                    960 ;--------------------------------------------------------
                                    961 ; internal ram data
                                    962 ;--------------------------------------------------------
                                    963 	.area DSEG    (DATA)
                           000000   964 LLAB4_V45_TESTCODE.lcd_clear$NumBytes$1$80==.
      000000                        965 _lcd_clear_NumBytes_1_80:
      000000                        966 	.ds 1
                           000001   967 LLAB4_V45_TESTCODE.lcd_clear$Cmd$1$80==.
      000001                        968 _lcd_clear_Cmd_1_80:
      000001                        969 	.ds 2
                           000003   970 LLAB4_V45_TESTCODE.read_keypad$i$1$81==.
      000003                        971 _read_keypad_i_1_81:
      000003                        972 	.ds 1
                           000004   973 LLAB4_V45_TESTCODE.read_keypad$Data$1$81==.
      000004                        974 _read_keypad_Data_1_81:
      000004                        975 	.ds 2
                           000006   976 LLAB4_V45_TESTCODE.i2c_write_data$start_reg$1$100==.
      000006                        977 _i2c_write_data_PARM_2:
      000006                        978 	.ds 1
                           000007   979 LLAB4_V45_TESTCODE.i2c_write_data$buffer$1$100==.
      000007                        980 _i2c_write_data_PARM_3:
      000007                        981 	.ds 3
                           00000A   982 LLAB4_V45_TESTCODE.i2c_write_data$num_bytes$1$100==.
      00000A                        983 _i2c_write_data_PARM_4:
      00000A                        984 	.ds 1
                           00000B   985 LLAB4_V45_TESTCODE.i2c_read_data$start_reg$1$102==.
      00000B                        986 _i2c_read_data_PARM_2:
      00000B                        987 	.ds 1
                           00000C   988 LLAB4_V45_TESTCODE.i2c_read_data$buffer$1$102==.
      00000C                        989 _i2c_read_data_PARM_3:
      00000C                        990 	.ds 3
                           00000F   991 LLAB4_V45_TESTCODE.i2c_read_data$num_bytes$1$102==.
      00000F                        992 _i2c_read_data_PARM_4:
      00000F                        993 	.ds 1
                           000010   994 LLAB4_V45_TESTCODE.Accel_Init$Data2$1$106==.
      000010                        995 _Accel_Init_Data2_1_106:
      000010                        996 	.ds 1
                           000011   997 G$hr_count$0$0==.
      000011                        998 _hr_count::
      000011                        999 	.ds 1
                           000012  1000 G$new_print$0$0==.
      000012                       1001 _new_print::
      000012                       1002 	.ds 1
                           000013  1003 G$Counts$0$0==.
      000013                       1004 _Counts::
      000013                       1005 	.ds 1
                           000014  1006 G$n_count$0$0==.
      000014                       1007 _n_count::
      000014                       1008 	.ds 1
                           000015  1009 G$print_count$0$0==.
      000015                       1010 _print_count::
      000015                       1011 	.ds 1
                           000016  1012 G$range$0$0==.
      000016                       1013 _range::
      000016                       1014 	.ds 2
                           000018  1015 G$heading$0$0==.
      000018                       1016 _heading::
      000018                       1017 	.ds 2
                           00001A  1018 G$new_heading$0$0==.
      00001A                       1019 _new_heading::
      00001A                       1020 	.ds 1
                           00001B  1021 G$new_range$0$0==.
      00001B                       1022 _new_range::
      00001B                       1023 	.ds 1
                           00001C  1024 G$comp_addr$0$0==.
      00001C                       1025 _comp_addr::
      00001C                       1026 	.ds 1
                           00001D  1027 G$range_and_ping_addr$0$0==.
      00001D                       1028 _range_and_ping_addr::
      00001D                       1029 	.ds 1
                           00001E  1030 G$comp_and_range_Data$0$0==.
      00001E                       1031 _comp_and_range_Data::
      00001E                       1032 	.ds 2
                           000020  1033 G$ping_Data$0$0==.
      000020                       1034 _ping_Data::
      000020                       1035 	.ds 1
                           000021  1036 G$PW_MAX$0$0==.
      000021                       1037 _PW_MAX::
      000021                       1038 	.ds 2
                           000023  1039 G$PW_MIN$0$0==.
      000023                       1040 _PW_MIN::
      000023                       1041 	.ds 2
                           000025  1042 G$PW_CENTER$0$0==.
      000025                       1043 _PW_CENTER::
      000025                       1044 	.ds 2
                           000027  1045 G$MOTOR_PW_AND_STEER_PW$0$0==.
      000027                       1046 _MOTOR_PW_AND_STEER_PW::
      000027                       1047 	.ds 2
                           000029  1048 G$STEER_PW$0$0==.
      000029                       1049 _STEER_PW::
      000029                       1050 	.ds 2
                           00002B  1051 G$desired_heading$0$0==.
      00002B                       1052 _desired_heading::
      00002B                       1053 	.ds 2
                           00002D  1054 G$error1$0$0==.
      00002D                       1055 _error1::
      00002D                       1056 	.ds 2
                           00002F  1057 G$near_obstical$0$0==.
      00002F                       1058 _near_obstical::
      00002F                       1059 	.ds 1
                           000030  1060 G$battery$0$0==.
      000030                       1061 _battery::
      000030                       1062 	.ds 2
                           000032  1063 G$keypad$0$0==.
      000032                       1064 _keypad::
      000032                       1065 	.ds 2
                           000034  1066 G$steer_gain$0$0==.
      000034                       1067 _steer_gain::
      000034                       1068 	.ds 2
                                   1069 ;--------------------------------------------------------
                                   1070 ; overlayable items in internal ram 
                                   1071 ;--------------------------------------------------------
                                   1072 	.area	OSEG    (OVR,DATA)
                                   1073 	.area	OSEG    (OVR,DATA)
                                   1074 	.area	OSEG    (OVR,DATA)
                                   1075 	.area	OSEG    (OVR,DATA)
                                   1076 	.area	OSEG    (OVR,DATA)
                                   1077 	.area	OSEG    (OVR,DATA)
                                   1078 	.area	OSEG    (OVR,DATA)
                                   1079 	.area	OSEG    (OVR,DATA)
                                   1080 ;--------------------------------------------------------
                                   1081 ; Stack segment in internal ram 
                                   1082 ;--------------------------------------------------------
                                   1083 	.area	SSEG
      000000                       1084 __start__stack:
      000000                       1085 	.ds	1
                                   1086 
                                   1087 ;--------------------------------------------------------
                                   1088 ; indirectly addressable internal ram data
                                   1089 ;--------------------------------------------------------
                                   1090 	.area ISEG    (DATA)
                                   1091 ;--------------------------------------------------------
                                   1092 ; absolute internal ram data
                                   1093 ;--------------------------------------------------------
                                   1094 	.area IABS    (ABS,DATA)
                                   1095 	.area IABS    (ABS,DATA)
                                   1096 ;--------------------------------------------------------
                                   1097 ; bit data
                                   1098 ;--------------------------------------------------------
                                   1099 	.area BSEG    (BIT)
                                   1100 ;--------------------------------------------------------
                                   1101 ; paged external ram data
                                   1102 ;--------------------------------------------------------
                                   1103 	.area PSEG    (PAG,XDATA)
                                   1104 ;--------------------------------------------------------
                                   1105 ; external ram data
                                   1106 ;--------------------------------------------------------
                                   1107 	.area XSEG    (XDATA)
                           000000  1108 LLAB4_V45_TESTCODE.lcd_print$text$1$76==.
      000000                       1109 _lcd_print_text_1_76:
      000000                       1110 	.ds 80
                                   1111 ;--------------------------------------------------------
                                   1112 ; absolute external ram data
                                   1113 ;--------------------------------------------------------
                                   1114 	.area XABS    (ABS,XDATA)
                                   1115 ;--------------------------------------------------------
                                   1116 ; external initialized ram data
                                   1117 ;--------------------------------------------------------
                                   1118 	.area XISEG   (XDATA)
                                   1119 	.area HOME    (CODE)
                                   1120 	.area GSINIT0 (CODE)
                                   1121 	.area GSINIT1 (CODE)
                                   1122 	.area GSINIT2 (CODE)
                                   1123 	.area GSINIT3 (CODE)
                                   1124 	.area GSINIT4 (CODE)
                                   1125 	.area GSINIT5 (CODE)
                                   1126 	.area GSINIT  (CODE)
                                   1127 	.area GSFINAL (CODE)
                                   1128 	.area CSEG    (CODE)
                                   1129 ;--------------------------------------------------------
                                   1130 ; interrupt vector 
                                   1131 ;--------------------------------------------------------
                                   1132 	.area HOME    (CODE)
      000000                       1133 __interrupt_vect:
      000000 02r00r00         [24] 1134 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1135 	reti
      000004                       1136 	.ds	7
      00000B 32               [24] 1137 	reti
      00000C                       1138 	.ds	7
      000013 32               [24] 1139 	reti
      000014                       1140 	.ds	7
      00001B 32               [24] 1141 	reti
      00001C                       1142 	.ds	7
      000023 32               [24] 1143 	reti
      000024                       1144 	.ds	7
      00002B 32               [24] 1145 	reti
      00002C                       1146 	.ds	7
      000033 32               [24] 1147 	reti
      000034                       1148 	.ds	7
      00003B 32               [24] 1149 	reti
      00003C                       1150 	.ds	7
      000043 32               [24] 1151 	reti
      000044                       1152 	.ds	7
      00004B 02r0Cr4E         [24] 1153 	ljmp	_PCA_ISR
                                   1154 ;--------------------------------------------------------
                                   1155 ; global & static initialisations
                                   1156 ;--------------------------------------------------------
                                   1157 	.area HOME    (CODE)
                                   1158 	.area GSINIT  (CODE)
                                   1159 	.area GSFINAL (CODE)
                                   1160 	.area GSINIT  (CODE)
                                   1161 	.globl __sdcc_gsinit_startup
                                   1162 	.globl __sdcc_program_startup
                                   1163 	.globl __start__stack
                                   1164 	.globl __mcs51_genXINIT
                                   1165 	.globl __mcs51_genXRAMCLEAR
                                   1166 	.globl __mcs51_genRAMCLEAR
                           000000  1167 	C$LAB4_V45_TESTCODE.c$65$1$196 ==.
                                   1168 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:65: unsigned char hr_count=0;
      000000 75*11 00         [24] 1169 	mov	_hr_count,#0x00
                           000003  1170 	C$LAB4_V45_TESTCODE.c$66$1$196 ==.
                                   1171 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:66: unsigned char new_print =0; //flag for printing
      000003 75*12 00         [24] 1172 	mov	_new_print,#0x00
                           000006  1173 	C$LAB4_V45_TESTCODE.c$67$1$196 ==.
                                   1174 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:67: unsigned char Counts=0;
      000006 75*13 00         [24] 1175 	mov	_Counts,#0x00
                           000009  1176 	C$LAB4_V45_TESTCODE.c$68$1$196 ==.
                                   1177 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:68: volatile unsigned char n_count=0;
      000009 75*14 00         [24] 1178 	mov	_n_count,#0x00
                           00000C  1179 	C$LAB4_V45_TESTCODE.c$69$1$196 ==.
                                   1180 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:69: unsigned char print_count =0; //overflow count for printing
      00000C 75*15 00         [24] 1181 	mov	_print_count,#0x00
                           00000F  1182 	C$LAB4_V45_TESTCODE.c$72$1$196 ==.
                                   1183 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:72: unsigned int range=0;//range distance
      00000F E4               [12] 1184 	clr	a
      000010 F5*16            [12] 1185 	mov	_range,a
      000012 F5*17            [12] 1186 	mov	(_range + 1),a
                           000014  1187 	C$LAB4_V45_TESTCODE.c$73$1$196 ==.
                                   1188 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:73: unsigned int heading=0;//heading distance
      000014 F5*18            [12] 1189 	mov	_heading,a
      000016 F5*19            [12] 1190 	mov	(_heading + 1),a
                           000018  1191 	C$LAB4_V45_TESTCODE.c$74$1$196 ==.
                                   1192 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:74: unsigned char new_heading = 1;//triggers compass function
      000018 75*1A 01         [24] 1193 	mov	_new_heading,#0x01
                           00001B  1194 	C$LAB4_V45_TESTCODE.c$75$1$196 ==.
                                   1195 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:75: unsigned char new_range = 1;//triggers range function
      00001B 75*1B 01         [24] 1196 	mov	_new_range,#0x01
                           00001E  1197 	C$LAB4_V45_TESTCODE.c$79$1$196 ==.
                                   1198 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:79: unsigned char comp_addr = 0xC0;//the address of the sensor
      00001E 75*1C C0         [24] 1199 	mov	_comp_addr,#0xC0
                           000021  1200 	C$LAB4_V45_TESTCODE.c$80$1$196 ==.
                                   1201 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:80: unsigned char range_and_ping_addr = 0xE0;
      000021 75*1D E0         [24] 1202 	mov	_range_and_ping_addr,#0xE0
                           000024  1203 	C$LAB4_V45_TESTCODE.c$85$1$196 ==.
                                   1204 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:85: unsigned int PW_MAX =3335;//max postion
      000024 75*21 07         [24] 1205 	mov	_PW_MAX,#0x07
      000027 75*22 0D         [24] 1206 	mov	(_PW_MAX + 1),#0x0D
                           00002A  1207 	C$LAB4_V45_TESTCODE.c$86$1$196 ==.
                                   1208 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:86: unsigned int PW_MIN =2345;//min postion
      00002A 75*23 29         [24] 1209 	mov	_PW_MIN,#0x29
      00002D 75*24 09         [24] 1210 	mov	(_PW_MIN + 1),#0x09
                           000030  1211 	C$LAB4_V45_TESTCODE.c$87$1$196 ==.
                                   1212 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:87: unsigned int PW_CENTER =2760;//neutral postion
      000030 75*25 C8         [24] 1213 	mov	_PW_CENTER,#0xC8
      000033 75*26 0A         [24] 1214 	mov	(_PW_CENTER + 1),#0x0A
                           000036  1215 	C$LAB4_V45_TESTCODE.c$90$1$196 ==.
                                   1216 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:90: unsigned int MOTOR_PW_AND_STEER_PW = 0;//used for adjusting drive and steer
      000036 F5*27            [12] 1217 	mov	_MOTOR_PW_AND_STEER_PW,a
      000038 F5*28            [12] 1218 	mov	(_MOTOR_PW_AND_STEER_PW + 1),a
                           00003A  1219 	C$LAB4_V45_TESTCODE.c$91$1$196 ==.
                                   1220 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:91: unsigned int STEER_PW=0;
      00003A F5*29            [12] 1221 	mov	_STEER_PW,a
      00003C F5*2A            [12] 1222 	mov	(_STEER_PW + 1),a
                           00003E  1223 	C$LAB4_V45_TESTCODE.c$92$1$196 ==.
                                   1224 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:92: unsigned int desired_heading = 0; //desired wheel heading
      00003E F5*2B            [12] 1225 	mov	_desired_heading,a
      000040 F5*2C            [12] 1226 	mov	(_desired_heading + 1),a
                           000042  1227 	C$LAB4_V45_TESTCODE.c$98$1$196 ==.
                                   1228 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:98: unsigned char near_obstical=0;
                                   1229 ;	1-genFromRTrack replaced	mov	_near_obstical,#0x00
      000042 F5*2F            [12] 1230 	mov	_near_obstical,a
                           000044  1231 	C$LAB4_V45_TESTCODE.c$99$1$196 ==.
                                   1232 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:99: int battery=0;//adc value for battery//******************float to int FOR RAM
      000044 F5*30            [12] 1233 	mov	_battery,a
      000046 F5*31            [12] 1234 	mov	(_battery + 1),a
                                   1235 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1236 	ljmp	__sdcc_program_startup
                                   1237 ;--------------------------------------------------------
                                   1238 ; Home
                                   1239 ;--------------------------------------------------------
                                   1240 	.area HOME    (CODE)
                                   1241 	.area HOME    (CODE)
      00004E                       1242 __sdcc_program_startup:
      00004E 02r04rEC         [24] 1243 	ljmp	_main
                                   1244 ;	return from main will return to caller
                                   1245 ;--------------------------------------------------------
                                   1246 ; code
                                   1247 ;--------------------------------------------------------
                                   1248 	.area CSEG    (CODE)
                                   1249 ;------------------------------------------------------------
                                   1250 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1251 ;------------------------------------------------------------
                                   1252 ;i                         Allocated to registers r6 r7 
                                   1253 ;------------------------------------------------------------
                           000000  1254 	G$SYSCLK_Init$0$0 ==.
                           000000  1255 	C$c8051_SDCC.h$42$0$0 ==.
                                   1256 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1257 ;	-----------------------------------------
                                   1258 ;	 function SYSCLK_Init
                                   1259 ;	-----------------------------------------
      000000                       1260 _SYSCLK_Init:
                           000007  1261 	ar7 = 0x07
                           000006  1262 	ar6 = 0x06
                           000005  1263 	ar5 = 0x05
                           000004  1264 	ar4 = 0x04
                           000003  1265 	ar3 = 0x03
                           000002  1266 	ar2 = 0x02
                           000001  1267 	ar1 = 0x01
                           000000  1268 	ar0 = 0x00
                           000000  1269 	C$c8051_SDCC.h$46$1$31 ==.
                                   1270 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1271 	mov	_OSCXCN,#0x67
                           000003  1272 	C$c8051_SDCC.h$49$1$31 ==.
                                   1273 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1274 	mov	r6,#0x00
      000005 7F 01            [12] 1275 	mov	r7,#0x01
      000007                       1276 00107$:
      000007 EE               [12] 1277 	mov	a,r6
      000008 24 FF            [12] 1278 	add	a,#0xFF
      00000A FC               [12] 1279 	mov	r4,a
      00000B EF               [12] 1280 	mov	a,r7
      00000C 34 FF            [12] 1281 	addc	a,#0xFF
      00000E FD               [12] 1282 	mov	r5,a
      00000F 8C 06            [24] 1283 	mov	ar6,r4
      000011 8D 07            [24] 1284 	mov	ar7,r5
      000013 EC               [12] 1285 	mov	a,r4
      000014 4D               [12] 1286 	orl	a,r5
      000015 70 F0            [24] 1287 	jnz	00107$
                           000017  1288 	C$c8051_SDCC.h$51$1$31 ==.
                                   1289 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000017                       1290 00102$:
      000017 E5 B1            [12] 1291 	mov	a,_OSCXCN
      000019 30 E7 FB         [24] 1292 	jnb	acc.7,00102$
                           00001C  1293 	C$c8051_SDCC.h$53$1$31 ==.
                                   1294 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      00001C 75 B2 88         [24] 1295 	mov	_OSCICN,#0x88
                           00001F  1296 	C$c8051_SDCC.h$56$1$31 ==.
                           00001F  1297 	XG$SYSCLK_Init$0$0 ==.
      00001F 22               [24] 1298 	ret
                                   1299 ;------------------------------------------------------------
                                   1300 ;Allocation info for local variables in function 'UART0_Init'
                                   1301 ;------------------------------------------------------------
                           000020  1302 	G$UART0_Init$0$0 ==.
                           000020  1303 	C$c8051_SDCC.h$64$1$31 ==.
                                   1304 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1305 ;	-----------------------------------------
                                   1306 ;	 function UART0_Init
                                   1307 ;	-----------------------------------------
      000020                       1308 _UART0_Init:
                           000020  1309 	C$c8051_SDCC.h$66$1$33 ==.
                                   1310 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000020 75 98 50         [24] 1311 	mov	_SCON0,#0x50
                           000023  1312 	C$c8051_SDCC.h$67$1$33 ==.
                                   1313 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      000023 75 89 20         [24] 1314 	mov	_TMOD,#0x20
                           000026  1315 	C$c8051_SDCC.h$68$1$33 ==.
                                   1316 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = 0xFF&-(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      000026 75 8D DC         [24] 1317 	mov	_TH1,#0xDC
                           000029  1318 	C$c8051_SDCC.h$69$1$33 ==.
                                   1319 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000029 D2 8E            [12] 1320 	setb	_TR1
                           00002B  1321 	C$c8051_SDCC.h$70$1$33 ==.
                                   1322 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      00002B 43 8E 10         [24] 1323 	orl	_CKCON,#0x10
                           00002E  1324 	C$c8051_SDCC.h$71$1$33 ==.
                                   1325 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      00002E 43 87 80         [24] 1326 	orl	_PCON,#0x80
                           000031  1327 	C$c8051_SDCC.h$73$1$33 ==.
                                   1328 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      000031 D2 99            [12] 1329 	setb	_TI0
                           000033  1330 	C$c8051_SDCC.h$74$1$33 ==.
                                   1331 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      000033 43 A4 01         [24] 1332 	orl	_P0MDOUT,#0x01
                           000036  1333 	C$c8051_SDCC.h$75$1$33 ==.
                           000036  1334 	XG$UART0_Init$0$0 ==.
      000036 22               [24] 1335 	ret
                                   1336 ;------------------------------------------------------------
                                   1337 ;Allocation info for local variables in function 'Sys_Init'
                                   1338 ;------------------------------------------------------------
                           000037  1339 	G$Sys_Init$0$0 ==.
                           000037  1340 	C$c8051_SDCC.h$83$1$33 ==.
                                   1341 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1342 ;	-----------------------------------------
                                   1343 ;	 function Sys_Init
                                   1344 ;	-----------------------------------------
      000037                       1345 _Sys_Init:
                           000037  1346 	C$c8051_SDCC.h$85$1$35 ==.
                                   1347 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000037 75 FF DE         [24] 1348 	mov	_WDTCN,#0xDE
                           00003A  1349 	C$c8051_SDCC.h$86$1$35 ==.
                                   1350 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      00003A 75 FF AD         [24] 1351 	mov	_WDTCN,#0xAD
                           00003D  1352 	C$c8051_SDCC.h$88$1$35 ==.
                                   1353 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      00003D 12r00r00         [24] 1354 	lcall	_SYSCLK_Init
                           000040  1355 	C$c8051_SDCC.h$89$1$35 ==.
                                   1356 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000040 12r00r20         [24] 1357 	lcall	_UART0_Init
                           000043  1358 	C$c8051_SDCC.h$91$1$35 ==.
                                   1359 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      000043 43 E1 04         [24] 1360 	orl	_XBR0,#0x04
                           000046  1361 	C$c8051_SDCC.h$92$1$35 ==.
                                   1362 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      000046 43 E3 40         [24] 1363 	orl	_XBR2,#0x40
                           000049  1364 	C$c8051_SDCC.h$93$1$35 ==.
                           000049  1365 	XG$Sys_Init$0$0 ==.
      000049 22               [24] 1366 	ret
                                   1367 ;------------------------------------------------------------
                                   1368 ;Allocation info for local variables in function 'putchar'
                                   1369 ;------------------------------------------------------------
                                   1370 ;c                         Allocated to registers r7 
                                   1371 ;------------------------------------------------------------
                           00004A  1372 	G$putchar$0$0 ==.
                           00004A  1373 	C$c8051_SDCC.h$98$1$35 ==.
                                   1374 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1375 ;	-----------------------------------------
                                   1376 ;	 function putchar
                                   1377 ;	-----------------------------------------
      00004A                       1378 _putchar:
      00004A AF 82            [24] 1379 	mov	r7,dpl
                           00004C  1380 	C$c8051_SDCC.h$100$1$37 ==.
                                   1381 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      00004C                       1382 00101$:
                           00004C  1383 	C$c8051_SDCC.h$101$1$37 ==.
                                   1384 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      00004C 10 99 02         [24] 1385 	jbc	_TI0,00112$
      00004F 80 FB            [24] 1386 	sjmp	00101$
      000051                       1387 00112$:
                           000051  1388 	C$c8051_SDCC.h$102$1$37 ==.
                                   1389 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      000051 8F 99            [24] 1390 	mov	_SBUF0,r7
                           000053  1391 	C$c8051_SDCC.h$103$1$37 ==.
                           000053  1392 	XG$putchar$0$0 ==.
      000053 22               [24] 1393 	ret
                                   1394 ;------------------------------------------------------------
                                   1395 ;Allocation info for local variables in function 'getchar'
                                   1396 ;------------------------------------------------------------
                                   1397 ;c                         Allocated to registers 
                                   1398 ;------------------------------------------------------------
                           000054  1399 	G$getchar$0$0 ==.
                           000054  1400 	C$c8051_SDCC.h$108$1$37 ==.
                                   1401 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1402 ;	-----------------------------------------
                                   1403 ;	 function getchar
                                   1404 ;	-----------------------------------------
      000054                       1405 _getchar:
                           000054  1406 	C$c8051_SDCC.h$111$1$39 ==.
                                   1407 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      000054                       1408 00101$:
                           000054  1409 	C$c8051_SDCC.h$112$1$39 ==.
                                   1410 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      000054 10 98 02         [24] 1411 	jbc	_RI0,00112$
      000057 80 FB            [24] 1412 	sjmp	00101$
      000059                       1413 00112$:
                           000059  1414 	C$c8051_SDCC.h$113$1$39 ==.
                                   1415 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000059 85 99 82         [24] 1416 	mov	dpl,_SBUF0
                           00005C  1417 	C$c8051_SDCC.h$114$1$39 ==.
                                   1418 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      00005C 12r00r4A         [24] 1419 	lcall	_putchar
                           00005F  1420 	C$c8051_SDCC.h$115$1$39 ==.
                                   1421 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      00005F 85 99 82         [24] 1422 	mov	dpl,_SBUF0
                           000062  1423 	C$c8051_SDCC.h$116$1$39 ==.
                           000062  1424 	XG$getchar$0$0 ==.
      000062 22               [24] 1425 	ret
                                   1426 ;------------------------------------------------------------
                                   1427 ;Allocation info for local variables in function 'getchar_nw'
                                   1428 ;------------------------------------------------------------
                                   1429 ;c                         Allocated to registers 
                                   1430 ;------------------------------------------------------------
                           000063  1431 	G$getchar_nw$0$0 ==.
                           000063  1432 	C$c8051_SDCC.h$121$1$39 ==.
                                   1433 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:121: char getchar_nw(void)
                                   1434 ;	-----------------------------------------
                                   1435 ;	 function getchar_nw
                                   1436 ;	-----------------------------------------
      000063                       1437 _getchar_nw:
                           000063  1438 	C$c8051_SDCC.h$124$1$41 ==.
                                   1439 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:124: if (!RI0) return 0xFF;
      000063 20 98 05         [24] 1440 	jb	_RI0,00102$
      000066 75 82 FF         [24] 1441 	mov	dpl,#0xFF
      000069 80 0B            [24] 1442 	sjmp	00104$
      00006B                       1443 00102$:
                           00006B  1444 	C$c8051_SDCC.h$127$2$42 ==.
                                   1445 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:127: RI0 = 0;
      00006B C2 98            [12] 1446 	clr	_RI0
                           00006D  1447 	C$c8051_SDCC.h$128$2$42 ==.
                                   1448 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:128: c = SBUF0;
      00006D 85 99 82         [24] 1449 	mov	dpl,_SBUF0
                           000070  1450 	C$c8051_SDCC.h$129$2$42 ==.
                                   1451 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:129: putchar(c);                          // echo to terminal
      000070 12r00r4A         [24] 1452 	lcall	_putchar
                           000073  1453 	C$c8051_SDCC.h$130$2$42 ==.
                                   1454 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:130: return SBUF0;
      000073 85 99 82         [24] 1455 	mov	dpl,_SBUF0
      000076                       1456 00104$:
                           000076  1457 	C$c8051_SDCC.h$132$1$41 ==.
                           000076  1458 	XG$getchar_nw$0$0 ==.
      000076 22               [24] 1459 	ret
                                   1460 ;------------------------------------------------------------
                                   1461 ;Allocation info for local variables in function 'lcd_print'
                                   1462 ;------------------------------------------------------------
                                   1463 ;fmt                       Allocated to stack - _bp -5
                                   1464 ;len                       Allocated to registers r6 
                                   1465 ;i                         Allocated to registers r7 
                                   1466 ;ap                        Allocated to registers 
                                   1467 ;text                      Allocated with name '_lcd_print_text_1_76'
                                   1468 ;------------------------------------------------------------
                           000077  1469 	G$lcd_print$0$0 ==.
                           000077  1470 	C$i2c.h$81$1$41 ==.
                                   1471 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:81: void lcd_print(const char *fmt, ...)
                                   1472 ;	-----------------------------------------
                                   1473 ;	 function lcd_print
                                   1474 ;	-----------------------------------------
      000077                       1475 _lcd_print:
      000077 C0*00            [24] 1476 	push	_bp
      000079 85 81*00         [24] 1477 	mov	_bp,sp
                           00007C  1478 	C$i2c.h$87$1$76 ==.
                                   1479 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:87: if ( strlen(fmt) <= 0 ) return;   //If there is no data to print, return
      00007C E5*00            [12] 1480 	mov	a,_bp
      00007E 24 FB            [12] 1481 	add	a,#0xfb
      000080 F8               [12] 1482 	mov	r0,a
      000081 86 82            [24] 1483 	mov	dpl,@r0
      000083 08               [12] 1484 	inc	r0
      000084 86 83            [24] 1485 	mov	dph,@r0
      000086 08               [12] 1486 	inc	r0
      000087 86 F0            [24] 1487 	mov	b,@r0
      000089 12r00r00         [24] 1488 	lcall	_strlen
      00008C E5 82            [12] 1489 	mov	a,dpl
      00008E 85 83 F0         [24] 1490 	mov	b,dph
      000091 45 F0            [12] 1491 	orl	a,b
      000093 70 02            [24] 1492 	jnz	00102$
      000095 80 5E            [24] 1493 	sjmp	00109$
      000097                       1494 00102$:
                           000097  1495 	C$i2c.h$89$2$77 ==.
                                   1496 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:89: va_start(ap, fmt);
      000097 E5*00            [12] 1497 	mov	a,_bp
      000099 24 FB            [12] 1498 	add	a,#0xFB
      00009B FF               [12] 1499 	mov	r7,a
      00009C 8F*00            [24] 1500 	mov	_vsprintf_PARM_3,r7
                           00009E  1501 	C$i2c.h$90$1$76 ==.
                                   1502 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:90: vsprintf(text, fmt, ap);
      00009E E5*00            [12] 1503 	mov	a,_bp
      0000A0 24 FB            [12] 1504 	add	a,#0xfb
      0000A2 F8               [12] 1505 	mov	r0,a
      0000A3 86*00            [24] 1506 	mov	_vsprintf_PARM_2,@r0
      0000A5 08               [12] 1507 	inc	r0
      0000A6 86*01            [24] 1508 	mov	(_vsprintf_PARM_2 + 1),@r0
      0000A8 08               [12] 1509 	inc	r0
      0000A9 86*02            [24] 1510 	mov	(_vsprintf_PARM_2 + 2),@r0
      0000AB 90r00r00         [24] 1511 	mov	dptr,#_lcd_print_text_1_76
      0000AE 75 F0 00         [24] 1512 	mov	b,#0x00
      0000B1 12r00r00         [24] 1513 	lcall	_vsprintf
                           0000B4  1514 	C$i2c.h$93$1$76 ==.
                                   1515 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:93: len = strlen(text);
      0000B4 90r00r00         [24] 1516 	mov	dptr,#_lcd_print_text_1_76
      0000B7 75 F0 00         [24] 1517 	mov	b,#0x00
      0000BA 12r00r00         [24] 1518 	lcall	_strlen
      0000BD AE 82            [24] 1519 	mov	r6,dpl
                           0000BF  1520 	C$i2c.h$94$1$76 ==.
                                   1521 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000BF 7F 00            [12] 1522 	mov	r7,#0x00
      0000C1                       1523 00107$:
      0000C1 C3               [12] 1524 	clr	c
      0000C2 EF               [12] 1525 	mov	a,r7
      0000C3 9E               [12] 1526 	subb	a,r6
      0000C4 50 1B            [24] 1527 	jnc	00105$
                           0000C6  1528 	C$i2c.h$96$2$79 ==.
                                   1529 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:96: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000C6 EF               [12] 1530 	mov	a,r7
      0000C7 24r00            [12] 1531 	add	a,#_lcd_print_text_1_76
      0000C9 FC               [12] 1532 	mov	r4,a
      0000CA E4               [12] 1533 	clr	a
      0000CB 34s00            [12] 1534 	addc	a,#(_lcd_print_text_1_76 >> 8)
      0000CD FD               [12] 1535 	mov	r5,a
      0000CE 8C 82            [24] 1536 	mov	dpl,r4
      0000D0 8D 83            [24] 1537 	mov	dph,r5
      0000D2 E0               [24] 1538 	movx	a,@dptr
      0000D3 FB               [12] 1539 	mov	r3,a
      0000D4 BB 0A 07         [24] 1540 	cjne	r3,#0x0A,00108$
      0000D7 8C 82            [24] 1541 	mov	dpl,r4
      0000D9 8D 83            [24] 1542 	mov	dph,r5
      0000DB 74 0D            [12] 1543 	mov	a,#0x0D
      0000DD F0               [24] 1544 	movx	@dptr,a
      0000DE                       1545 00108$:
                           0000DE  1546 	C$i2c.h$94$1$76 ==.
                                   1547 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000DE 0F               [12] 1548 	inc	r7
      0000DF 80 E0            [24] 1549 	sjmp	00107$
      0000E1                       1550 00105$:
                           0000E1  1551 	C$i2c.h$99$1$76 ==.
                                   1552 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:99: i2c_write_data(0xC6, 0x00, text, len);
      0000E1 75*07r00         [24] 1553 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_76
      0000E4 75*08s00         [24] 1554 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_76 >> 8)
      0000E7 75*09 00         [24] 1555 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000EA 75*06 00         [24] 1556 	mov	_i2c_write_data_PARM_2,#0x00
      0000ED 8E*0A            [24] 1557 	mov	_i2c_write_data_PARM_4,r6
      0000EF 75 82 C6         [24] 1558 	mov	dpl,#0xC6
      0000F2 12r03r8A         [24] 1559 	lcall	_i2c_write_data
      0000F5                       1560 00109$:
      0000F5 D0*00            [24] 1561 	pop	_bp
                           0000F7  1562 	C$i2c.h$100$1$76 ==.
                           0000F7  1563 	XG$lcd_print$0$0 ==.
      0000F7 22               [24] 1564 	ret
                                   1565 ;------------------------------------------------------------
                                   1566 ;Allocation info for local variables in function 'lcd_clear'
                                   1567 ;------------------------------------------------------------
                                   1568 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_80'
                                   1569 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_80'
                                   1570 ;------------------------------------------------------------
                           0000F8  1571 	G$lcd_clear$0$0 ==.
                           0000F8  1572 	C$i2c.h$103$1$76 ==.
                                   1573 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:103: void lcd_clear()
                                   1574 ;	-----------------------------------------
                                   1575 ;	 function lcd_clear
                                   1576 ;	-----------------------------------------
      0000F8                       1577 _lcd_clear:
                           0000F8  1578 	C$i2c.h$105$1$76 ==.
                                   1579 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:105: unsigned char NumBytes=0, Cmd[2];
      0000F8 75*00 00         [24] 1580 	mov	_lcd_clear_NumBytes_1_80,#0x00
                           0000FB  1581 	C$i2c.h$107$1$80 ==.
                                   1582 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:107: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000FB                       1583 00101$:
      0000FB 74 C0            [12] 1584 	mov	a,#0x100 - 0x40
      0000FD 25*00            [12] 1585 	add	a,_lcd_clear_NumBytes_1_80
      0000FF 40 17            [24] 1586 	jc	00103$
      000101 75*0Cr00         [24] 1587 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_80
      000104 75*0D 00         [24] 1588 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000107 75*0E 40         [24] 1589 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      00010A 75*0B 00         [24] 1590 	mov	_i2c_read_data_PARM_2,#0x00
      00010D 75*0F 01         [24] 1591 	mov	_i2c_read_data_PARM_4,#0x01
      000110 75 82 C6         [24] 1592 	mov	dpl,#0xC6
      000113 12r03rFF         [24] 1593 	lcall	_i2c_read_data
      000116 80 E3            [24] 1594 	sjmp	00101$
      000118                       1595 00103$:
                           000118  1596 	C$i2c.h$109$1$80 ==.
                                   1597 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:109: Cmd[0] = 12;
      000118 75*01 0C         [24] 1598 	mov	_lcd_clear_Cmd_1_80,#0x0C
                           00011B  1599 	C$i2c.h$110$1$80 ==.
                                   1600 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:110: i2c_write_data(0xC6, 0x00, Cmd, 1);
      00011B 75*07r01         [24] 1601 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_80
      00011E 75*08 00         [24] 1602 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000121 75*09 40         [24] 1603 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000124 75*06 00         [24] 1604 	mov	_i2c_write_data_PARM_2,#0x00
      000127 75*0A 01         [24] 1605 	mov	_i2c_write_data_PARM_4,#0x01
      00012A 75 82 C6         [24] 1606 	mov	dpl,#0xC6
      00012D 12r03r8A         [24] 1607 	lcall	_i2c_write_data
                           000130  1608 	C$i2c.h$111$1$80 ==.
                           000130  1609 	XG$lcd_clear$0$0 ==.
      000130 22               [24] 1610 	ret
                                   1611 ;------------------------------------------------------------
                                   1612 ;Allocation info for local variables in function 'read_keypad'
                                   1613 ;------------------------------------------------------------
                                   1614 ;i                         Allocated with name '_read_keypad_i_1_81'
                                   1615 ;Data                      Allocated with name '_read_keypad_Data_1_81'
                                   1616 ;------------------------------------------------------------
                           000131  1617 	G$read_keypad$0$0 ==.
                           000131  1618 	C$i2c.h$114$1$80 ==.
                                   1619 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:114: char read_keypad()
                                   1620 ;	-----------------------------------------
                                   1621 ;	 function read_keypad
                                   1622 ;	-----------------------------------------
      000131                       1623 _read_keypad:
                           000131  1624 	C$i2c.h$118$1$81 ==.
                                   1625 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:118: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      000131 75*0Cr04         [24] 1626 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_81
      000134 75*0D 00         [24] 1627 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000137 75*0E 40         [24] 1628 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      00013A 75*0B 01         [24] 1629 	mov	_i2c_read_data_PARM_2,#0x01
      00013D 75*0F 02         [24] 1630 	mov	_i2c_read_data_PARM_4,#0x02
      000140 75 82 C6         [24] 1631 	mov	dpl,#0xC6
      000143 12r03rFF         [24] 1632 	lcall	_i2c_read_data
                           000146  1633 	C$i2c.h$119$1$81 ==.
                                   1634 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:119: if(Data[0] == 0xFF) return 0;  //No response on bus, no display
      000146 AF*04            [24] 1635 	mov	r7,_read_keypad_Data_1_81
      000148 BF FF 05         [24] 1636 	cjne	r7,#0xFF,00102$
      00014B 75 82 00         [24] 1637 	mov	dpl,#0x00
      00014E 80 60            [24] 1638 	sjmp	00116$
      000150                       1639 00102$:
                           000150  1640 	C$i2c.h$121$1$81 ==.
                                   1641 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000150 7E 00            [12] 1642 	mov	r6,#0x00
                                   1643 ;	1-genFromRTrack replaced	mov	_read_keypad_i_1_81,#0x00
      000152 8E*03            [24] 1644 	mov	_read_keypad_i_1_81,r6
      000154                       1645 00114$:
                           000154  1646 	C$i2c.h$123$2$82 ==.
                                   1647 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:123: if(Data[0] & (0x01 << i))  //find the ASCII value of the keypad read, if it is the current loop value
      000154 85*03 F0         [24] 1648 	mov	b,_read_keypad_i_1_81
      000157 05 F0            [12] 1649 	inc	b
      000159 7B 01            [12] 1650 	mov	r3,#0x01
      00015B 7C 00            [12] 1651 	mov	r4,#0x00
      00015D 80 06            [24] 1652 	sjmp	00145$
      00015F                       1653 00144$:
      00015F EB               [12] 1654 	mov	a,r3
      000160 2B               [12] 1655 	add	a,r3
      000161 FB               [12] 1656 	mov	r3,a
      000162 EC               [12] 1657 	mov	a,r4
      000163 33               [12] 1658 	rlc	a
      000164 FC               [12] 1659 	mov	r4,a
      000165                       1660 00145$:
      000165 D5 F0 F7         [24] 1661 	djnz	b,00144$
      000168 8F 02            [24] 1662 	mov	ar2,r7
      00016A 7D 00            [12] 1663 	mov	r5,#0x00
      00016C EA               [12] 1664 	mov	a,r2
      00016D 52 03            [12] 1665 	anl	ar3,a
      00016F ED               [12] 1666 	mov	a,r5
      000170 52 04            [12] 1667 	anl	ar4,a
      000172 EB               [12] 1668 	mov	a,r3
      000173 4C               [12] 1669 	orl	a,r4
      000174 60 07            [24] 1670 	jz	00115$
                           000176  1671 	C$i2c.h$124$2$82 ==.
                                   1672 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:124: return i+49;
      000176 74 31            [12] 1673 	mov	a,#0x31
      000178 2E               [12] 1674 	add	a,r6
      000179 F5 82            [12] 1675 	mov	dpl,a
      00017B 80 33            [24] 1676 	sjmp	00116$
      00017D                       1677 00115$:
                           00017D  1678 	C$i2c.h$121$1$81 ==.
                                   1679 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      00017D 05*03            [12] 1680 	inc	_read_keypad_i_1_81
      00017F AE*03            [24] 1681 	mov	r6,_read_keypad_i_1_81
      000181 74 F8            [12] 1682 	mov	a,#0x100 - 0x08
      000183 25*03            [12] 1683 	add	a,_read_keypad_i_1_81
      000185 50 CD            [24] 1684 	jnc	00114$
                           000187  1685 	C$i2c.h$127$1$81 ==.
                                   1686 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:127: if(Data[1] & 0x01) return '9'; //if the value is equal to 9 return 9.
      000187 E5*05            [12] 1687 	mov	a,(_read_keypad_Data_1_81 + 0x0001)
      000189 FF               [12] 1688 	mov	r7,a
      00018A 30 E0 05         [24] 1689 	jnb	acc.0,00107$
      00018D 75 82 39         [24] 1690 	mov	dpl,#0x39
      000190 80 1E            [24] 1691 	sjmp	00116$
      000192                       1692 00107$:
                           000192  1693 	C$i2c.h$129$1$81 ==.
                                   1694 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:129: if(Data[1] & 0x02) return '*'; //if the value is equal to the star.
      000192 EF               [12] 1695 	mov	a,r7
      000193 30 E1 05         [24] 1696 	jnb	acc.1,00109$
      000196 75 82 2A         [24] 1697 	mov	dpl,#0x2A
      000199 80 15            [24] 1698 	sjmp	00116$
      00019B                       1699 00109$:
                           00019B  1700 	C$i2c.h$131$1$81 ==.
                                   1701 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:131: if(Data[1] & 0x04) return '0'; //if the value is equal to the 0 key
      00019B EF               [12] 1702 	mov	a,r7
      00019C 30 E2 05         [24] 1703 	jnb	acc.2,00111$
      00019F 75 82 30         [24] 1704 	mov	dpl,#0x30
      0001A2 80 0C            [24] 1705 	sjmp	00116$
      0001A4                       1706 00111$:
                           0001A4  1707 	C$i2c.h$133$1$81 ==.
                                   1708 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:133: if(Data[1] & 0x08) return '#'; //if the value is equal to the pound key
      0001A4 EF               [12] 1709 	mov	a,r7
      0001A5 30 E3 05         [24] 1710 	jnb	acc.3,00113$
      0001A8 75 82 23         [24] 1711 	mov	dpl,#0x23
      0001AB 80 03            [24] 1712 	sjmp	00116$
      0001AD                       1713 00113$:
                           0001AD  1714 	C$i2c.h$135$1$81 ==.
                                   1715 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:135: return -1;                     //else return a numerical -1 (0xFF)
      0001AD 75 82 FF         [24] 1716 	mov	dpl,#0xFF
      0001B0                       1717 00116$:
                           0001B0  1718 	C$i2c.h$136$1$81 ==.
                           0001B0  1719 	XG$read_keypad$0$0 ==.
      0001B0 22               [24] 1720 	ret
                                   1721 ;------------------------------------------------------------
                                   1722 ;Allocation info for local variables in function 'kpd_input'
                                   1723 ;------------------------------------------------------------
                                   1724 ;mode                      Allocated to registers r7 
                                   1725 ;sum                       Allocated to registers r5 r6 
                                   1726 ;key                       Allocated to registers r3 
                                   1727 ;i                         Allocated to registers r7 
                                   1728 ;------------------------------------------------------------
                           0001B1  1729 	G$kpd_input$0$0 ==.
                           0001B1  1730 	C$i2c.h$148$1$81 ==.
                                   1731 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:148: unsigned int kpd_input(char mode)
                                   1732 ;	-----------------------------------------
                                   1733 ;	 function kpd_input
                                   1734 ;	-----------------------------------------
      0001B1                       1735 _kpd_input:
      0001B1 AF 82            [24] 1736 	mov	r7,dpl
                           0001B3  1737 	C$i2c.h$153$1$84 ==.
                                   1738 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:153: sum = 0;
                           0001B3  1739 	C$i2c.h$156$1$84 ==.
                                   1740 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:156: if(mode==0)lcd_print("\nType digits; end w/#");
      0001B3 E4               [12] 1741 	clr	a
      0001B4 FD               [12] 1742 	mov	r5,a
      0001B5 FE               [12] 1743 	mov	r6,a
      0001B6 EF               [12] 1744 	mov	a,r7
      0001B7 70 1D            [24] 1745 	jnz	00102$
      0001B9 C0 06            [24] 1746 	push	ar6
      0001BB C0 05            [24] 1747 	push	ar5
      0001BD 74r00            [12] 1748 	mov	a,#___str_0
      0001BF C0 E0            [24] 1749 	push	acc
      0001C1 74s00            [12] 1750 	mov	a,#(___str_0 >> 8)
      0001C3 C0 E0            [24] 1751 	push	acc
      0001C5 74 80            [12] 1752 	mov	a,#0x80
      0001C7 C0 E0            [24] 1753 	push	acc
      0001C9 12r00r77         [24] 1754 	lcall	_lcd_print
      0001CC 15 81            [12] 1755 	dec	sp
      0001CE 15 81            [12] 1756 	dec	sp
      0001D0 15 81            [12] 1757 	dec	sp
      0001D2 D0 05            [24] 1758 	pop	ar5
      0001D4 D0 06            [24] 1759 	pop	ar6
      0001D6                       1760 00102$:
                           0001D6  1761 	C$i2c.h$158$1$84 ==.
                                   1762 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:158: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001D6 C0 06            [24] 1763 	push	ar6
      0001D8 C0 05            [24] 1764 	push	ar5
      0001DA 74 08            [12] 1765 	mov	a,#0x08
      0001DC C0 E0            [24] 1766 	push	acc
      0001DE E4               [12] 1767 	clr	a
      0001DF C0 E0            [24] 1768 	push	acc
      0001E1 74 08            [12] 1769 	mov	a,#0x08
      0001E3 C0 E0            [24] 1770 	push	acc
      0001E5 E4               [12] 1771 	clr	a
      0001E6 C0 E0            [24] 1772 	push	acc
      0001E8 74 08            [12] 1773 	mov	a,#0x08
      0001EA C0 E0            [24] 1774 	push	acc
      0001EC E4               [12] 1775 	clr	a
      0001ED C0 E0            [24] 1776 	push	acc
      0001EF 74 08            [12] 1777 	mov	a,#0x08
      0001F1 C0 E0            [24] 1778 	push	acc
      0001F3 E4               [12] 1779 	clr	a
      0001F4 C0 E0            [24] 1780 	push	acc
      0001F6 74 08            [12] 1781 	mov	a,#0x08
      0001F8 C0 E0            [24] 1782 	push	acc
      0001FA E4               [12] 1783 	clr	a
      0001FB C0 E0            [24] 1784 	push	acc
      0001FD 74r16            [12] 1785 	mov	a,#___str_1
      0001FF C0 E0            [24] 1786 	push	acc
      000201 74s00            [12] 1787 	mov	a,#(___str_1 >> 8)
      000203 C0 E0            [24] 1788 	push	acc
      000205 74 80            [12] 1789 	mov	a,#0x80
      000207 C0 E0            [24] 1790 	push	acc
      000209 12r00r77         [24] 1791 	lcall	_lcd_print
      00020C E5 81            [12] 1792 	mov	a,sp
      00020E 24 F3            [12] 1793 	add	a,#0xf3
      000210 F5 81            [12] 1794 	mov	sp,a
                           000212  1795 	C$i2c.h$160$1$84 ==.
                                   1796 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:160: delay_time(500000);	//Add 20ms delay before reading i2c in loop
      000212 90 A1 20         [24] 1797 	mov	dptr,#0xA120
      000215 75 F0 07         [24] 1798 	mov	b,#0x07
      000218 E4               [12] 1799 	clr	a
      000219 12r03r25         [24] 1800 	lcall	_delay_time
      00021C D0 05            [24] 1801 	pop	ar5
      00021E D0 06            [24] 1802 	pop	ar6
                           000220  1803 	C$i2c.h$166$3$87 ==.
                                   1804 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:166: while(((key=read_keypad()) == -1) || (key == '*'))delay_time(10000);
      000220 7F 00            [12] 1805 	mov	r7,#0x00
      000222                       1806 00104$:
      000222 C0 07            [24] 1807 	push	ar7
      000224 C0 06            [24] 1808 	push	ar6
      000226 C0 05            [24] 1809 	push	ar5
      000228 12r01r31         [24] 1810 	lcall	_read_keypad
      00022B AC 82            [24] 1811 	mov	r4,dpl
      00022D D0 05            [24] 1812 	pop	ar5
      00022F D0 06            [24] 1813 	pop	ar6
      000231 D0 07            [24] 1814 	pop	ar7
      000233 8C 03            [24] 1815 	mov	ar3,r4
      000235 BC FF 02         [24] 1816 	cjne	r4,#0xFF,00146$
      000238 80 03            [24] 1817 	sjmp	00105$
      00023A                       1818 00146$:
      00023A BB 2A 17         [24] 1819 	cjne	r3,#0x2A,00106$
      00023D                       1820 00105$:
      00023D 90 27 10         [24] 1821 	mov	dptr,#0x2710
      000240 E4               [12] 1822 	clr	a
      000241 F5 F0            [12] 1823 	mov	b,a
      000243 C0 07            [24] 1824 	push	ar7
      000245 C0 06            [24] 1825 	push	ar6
      000247 C0 05            [24] 1826 	push	ar5
      000249 12r03r25         [24] 1827 	lcall	_delay_time
      00024C D0 05            [24] 1828 	pop	ar5
      00024E D0 06            [24] 1829 	pop	ar6
      000250 D0 07            [24] 1830 	pop	ar7
      000252 80 CE            [24] 1831 	sjmp	00104$
      000254                       1832 00106$:
                           000254  1833 	C$i2c.h$167$2$85 ==.
                                   1834 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:167: if(key == '#')
      000254 BB 23 2A         [24] 1835 	cjne	r3,#0x23,00114$
                           000257  1836 	C$i2c.h$169$3$86 ==.
                                   1837 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:169: while(read_keypad() == '#')delay_time(10000);
      000257                       1838 00107$:
      000257 C0 06            [24] 1839 	push	ar6
      000259 C0 05            [24] 1840 	push	ar5
      00025B 12r01r31         [24] 1841 	lcall	_read_keypad
      00025E AC 82            [24] 1842 	mov	r4,dpl
      000260 D0 05            [24] 1843 	pop	ar5
      000262 D0 06            [24] 1844 	pop	ar6
      000264 BC 23 13         [24] 1845 	cjne	r4,#0x23,00109$
      000267 90 27 10         [24] 1846 	mov	dptr,#0x2710
      00026A E4               [12] 1847 	clr	a
      00026B F5 F0            [12] 1848 	mov	b,a
      00026D C0 06            [24] 1849 	push	ar6
      00026F C0 05            [24] 1850 	push	ar5
      000271 12r03r25         [24] 1851 	lcall	_delay_time
      000274 D0 05            [24] 1852 	pop	ar5
      000276 D0 06            [24] 1853 	pop	ar6
      000278 80 DD            [24] 1854 	sjmp	00107$
      00027A                       1855 00109$:
                           00027A  1856 	C$i2c.h$170$3$86 ==.
                                   1857 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:170: return sum;
      00027A 8D 82            [24] 1858 	mov	dpl,r5
      00027C 8E 83            [24] 1859 	mov	dph,r6
      00027E 02r03r24         [24] 1860 	ljmp	00119$
      000281                       1861 00114$:
                           000281  1862 	C$i2c.h$174$3$87 ==.
                                   1863 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:174: lcd_print("%c", key);
      000281 EB               [12] 1864 	mov	a,r3
      000282 FA               [12] 1865 	mov	r2,a
      000283 33               [12] 1866 	rlc	a
      000284 95 E0            [12] 1867 	subb	a,acc
      000286 FC               [12] 1868 	mov	r4,a
      000287 C0 07            [24] 1869 	push	ar7
      000289 C0 06            [24] 1870 	push	ar6
      00028B C0 05            [24] 1871 	push	ar5
      00028D C0 04            [24] 1872 	push	ar4
      00028F C0 03            [24] 1873 	push	ar3
      000291 C0 02            [24] 1874 	push	ar2
      000293 C0 02            [24] 1875 	push	ar2
      000295 C0 04            [24] 1876 	push	ar4
      000297 74r26            [12] 1877 	mov	a,#___str_2
      000299 C0 E0            [24] 1878 	push	acc
      00029B 74s00            [12] 1879 	mov	a,#(___str_2 >> 8)
      00029D C0 E0            [24] 1880 	push	acc
      00029F 74 80            [12] 1881 	mov	a,#0x80
      0002A1 C0 E0            [24] 1882 	push	acc
      0002A3 12r00r77         [24] 1883 	lcall	_lcd_print
      0002A6 E5 81            [12] 1884 	mov	a,sp
      0002A8 24 FB            [12] 1885 	add	a,#0xfb
      0002AA F5 81            [12] 1886 	mov	sp,a
      0002AC D0 02            [24] 1887 	pop	ar2
      0002AE D0 03            [24] 1888 	pop	ar3
      0002B0 D0 04            [24] 1889 	pop	ar4
      0002B2 D0 05            [24] 1890 	pop	ar5
      0002B4 D0 06            [24] 1891 	pop	ar6
                           0002B6  1892 	C$i2c.h$175$1$84 ==.
                                   1893 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:175: sum = sum*10 + key - '0';
      0002B6 8D*00            [24] 1894 	mov	__mulint_PARM_2,r5
      0002B8 8E*01            [24] 1895 	mov	(__mulint_PARM_2 + 1),r6
      0002BA 90 00 0A         [24] 1896 	mov	dptr,#0x000A
      0002BD C0 04            [24] 1897 	push	ar4
      0002BF C0 03            [24] 1898 	push	ar3
      0002C1 C0 02            [24] 1899 	push	ar2
      0002C3 12r00r00         [24] 1900 	lcall	__mulint
      0002C6 A8 82            [24] 1901 	mov	r0,dpl
      0002C8 A9 83            [24] 1902 	mov	r1,dph
      0002CA D0 02            [24] 1903 	pop	ar2
      0002CC D0 03            [24] 1904 	pop	ar3
      0002CE D0 04            [24] 1905 	pop	ar4
      0002D0 D0 07            [24] 1906 	pop	ar7
      0002D2 EA               [12] 1907 	mov	a,r2
      0002D3 28               [12] 1908 	add	a,r0
      0002D4 F8               [12] 1909 	mov	r0,a
      0002D5 EC               [12] 1910 	mov	a,r4
      0002D6 39               [12] 1911 	addc	a,r1
      0002D7 F9               [12] 1912 	mov	r1,a
      0002D8 E8               [12] 1913 	mov	a,r0
      0002D9 24 D0            [12] 1914 	add	a,#0xD0
      0002DB FD               [12] 1915 	mov	r5,a
      0002DC E9               [12] 1916 	mov	a,r1
      0002DD 34 FF            [12] 1917 	addc	a,#0xFF
      0002DF FE               [12] 1918 	mov	r6,a
                           0002E0  1919 	C$i2c.h$176$3$87 ==.
                                   1920 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:176: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002E0                       1921 00110$:
      0002E0 C0 07            [24] 1922 	push	ar7
      0002E2 C0 06            [24] 1923 	push	ar6
      0002E4 C0 05            [24] 1924 	push	ar5
      0002E6 C0 03            [24] 1925 	push	ar3
      0002E8 12r01r31         [24] 1926 	lcall	_read_keypad
      0002EB AC 82            [24] 1927 	mov	r4,dpl
      0002ED D0 03            [24] 1928 	pop	ar3
      0002EF D0 05            [24] 1929 	pop	ar5
      0002F1 D0 06            [24] 1930 	pop	ar6
      0002F3 D0 07            [24] 1931 	pop	ar7
      0002F5 EC               [12] 1932 	mov	a,r4
      0002F6 B5 03 1B         [24] 1933 	cjne	a,ar3,00118$
      0002F9 90 27 10         [24] 1934 	mov	dptr,#0x2710
      0002FC E4               [12] 1935 	clr	a
      0002FD F5 F0            [12] 1936 	mov	b,a
      0002FF C0 07            [24] 1937 	push	ar7
      000301 C0 06            [24] 1938 	push	ar6
      000303 C0 05            [24] 1939 	push	ar5
      000305 C0 03            [24] 1940 	push	ar3
      000307 12r03r25         [24] 1941 	lcall	_delay_time
      00030A D0 03            [24] 1942 	pop	ar3
      00030C D0 05            [24] 1943 	pop	ar5
      00030E D0 06            [24] 1944 	pop	ar6
      000310 D0 07            [24] 1945 	pop	ar7
      000312 80 CC            [24] 1946 	sjmp	00110$
      000314                       1947 00118$:
                           000314  1948 	C$i2c.h$164$1$84 ==.
                                   1949 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      000314 0F               [12] 1950 	inc	r7
      000315 C3               [12] 1951 	clr	c
      000316 EF               [12] 1952 	mov	a,r7
      000317 64 80            [12] 1953 	xrl	a,#0x80
      000319 94 85            [12] 1954 	subb	a,#0x85
      00031B 50 03            [24] 1955 	jnc	00155$
      00031D 02r02r22         [24] 1956 	ljmp	00104$
      000320                       1957 00155$:
                           000320  1958 	C$i2c.h$179$1$84 ==.
                                   1959 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:179: return sum;
      000320 8D 82            [24] 1960 	mov	dpl,r5
      000322 8E 83            [24] 1961 	mov	dph,r6
      000324                       1962 00119$:
                           000324  1963 	C$i2c.h$180$1$84 ==.
                           000324  1964 	XG$kpd_input$0$0 ==.
      000324 22               [24] 1965 	ret
                                   1966 ;------------------------------------------------------------
                                   1967 ;Allocation info for local variables in function 'delay_time'
                                   1968 ;------------------------------------------------------------
                                   1969 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1970 ;index                     Allocated to registers r0 r1 r2 r3 
                                   1971 ;------------------------------------------------------------
                           000325  1972 	G$delay_time$0$0 ==.
                           000325  1973 	C$i2c.h$189$1$84 ==.
                                   1974 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:189: void delay_time (unsigned long time_end)
                                   1975 ;	-----------------------------------------
                                   1976 ;	 function delay_time
                                   1977 ;	-----------------------------------------
      000325                       1978 _delay_time:
      000325 AC 82            [24] 1979 	mov	r4,dpl
      000327 AD 83            [24] 1980 	mov	r5,dph
      000329 AE F0            [24] 1981 	mov	r6,b
      00032B FF               [12] 1982 	mov	r7,a
                           00032C  1983 	C$i2c.h$192$1$89 ==.
                                   1984 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:192: for (index = 0; index < time_end; index++); //for loop delay
      00032C 78 00            [12] 1985 	mov	r0,#0x00
      00032E 79 00            [12] 1986 	mov	r1,#0x00
      000330 7A 00            [12] 1987 	mov	r2,#0x00
      000332 7B 00            [12] 1988 	mov	r3,#0x00
      000334                       1989 00103$:
      000334 C3               [12] 1990 	clr	c
      000335 E8               [12] 1991 	mov	a,r0
      000336 9C               [12] 1992 	subb	a,r4
      000337 E9               [12] 1993 	mov	a,r1
      000338 9D               [12] 1994 	subb	a,r5
      000339 EA               [12] 1995 	mov	a,r2
      00033A 9E               [12] 1996 	subb	a,r6
      00033B EB               [12] 1997 	mov	a,r3
      00033C 9F               [12] 1998 	subb	a,r7
      00033D 50 0F            [24] 1999 	jnc	00105$
      00033F 08               [12] 2000 	inc	r0
      000340 B8 00 09         [24] 2001 	cjne	r0,#0x00,00115$
      000343 09               [12] 2002 	inc	r1
      000344 B9 00 05         [24] 2003 	cjne	r1,#0x00,00115$
      000347 0A               [12] 2004 	inc	r2
      000348 BA 00 E9         [24] 2005 	cjne	r2,#0x00,00103$
      00034B 0B               [12] 2006 	inc	r3
      00034C                       2007 00115$:
      00034C 80 E6            [24] 2008 	sjmp	00103$
      00034E                       2009 00105$:
                           00034E  2010 	C$i2c.h$193$1$89 ==.
                           00034E  2011 	XG$delay_time$0$0 ==.
      00034E 22               [24] 2012 	ret
                                   2013 ;------------------------------------------------------------
                                   2014 ;Allocation info for local variables in function 'i2c_start'
                                   2015 ;------------------------------------------------------------
                           00034F  2016 	G$i2c_start$0$0 ==.
                           00034F  2017 	C$i2c.h$196$1$89 ==.
                                   2018 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:196: void i2c_start(void)
                                   2019 ;	-----------------------------------------
                                   2020 ;	 function i2c_start
                                   2021 ;	-----------------------------------------
      00034F                       2022 _i2c_start:
                           00034F  2023 	C$i2c.h$198$1$91 ==.
                                   2024 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:198: while(BUSY);              //Wait until SMBus0 is free
      00034F                       2025 00101$:
      00034F 20 C7 FD         [24] 2026 	jb	_BUSY,00101$
                           000352  2027 	C$i2c.h$199$1$91 ==.
                                   2028 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:199: STA = 1;                  //Set Start Bit
      000352 D2 C5            [12] 2029 	setb	_STA
                           000354  2030 	C$i2c.h$200$1$91 ==.
                                   2031 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:200: while(!SI);               //Wait until start sent
      000354                       2032 00104$:
      000354 30 C3 FD         [24] 2033 	jnb	_SI,00104$
                           000357  2034 	C$i2c.h$201$1$91 ==.
                                   2035 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:201: STA = 0;                  //Clear start bit
      000357 C2 C5            [12] 2036 	clr	_STA
                           000359  2037 	C$i2c.h$202$1$91 ==.
                                   2038 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:202: SI = 0;                   //Clear SI
      000359 C2 C3            [12] 2039 	clr	_SI
                           00035B  2040 	C$i2c.h$203$1$91 ==.
                           00035B  2041 	XG$i2c_start$0$0 ==.
      00035B 22               [24] 2042 	ret
                                   2043 ;------------------------------------------------------------
                                   2044 ;Allocation info for local variables in function 'i2c_write'
                                   2045 ;------------------------------------------------------------
                                   2046 ;output_data               Allocated to registers 
                                   2047 ;------------------------------------------------------------
                           00035C  2048 	G$i2c_write$0$0 ==.
                           00035C  2049 	C$i2c.h$206$1$91 ==.
                                   2050 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:206: void i2c_write(unsigned char output_data)
                                   2051 ;	-----------------------------------------
                                   2052 ;	 function i2c_write
                                   2053 ;	-----------------------------------------
      00035C                       2054 _i2c_write:
      00035C 85 82 C2         [24] 2055 	mov	_SMB0DAT,dpl
                           00035F  2056 	C$i2c.h$209$1$93 ==.
                                   2057 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:209: while(!SI);               //Wait until send is complete
      00035F                       2058 00101$:
                           00035F  2059 	C$i2c.h$210$1$93 ==.
                                   2060 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:210: SI = 0;                   //Clear SI
      00035F 10 C3 02         [24] 2061 	jbc	_SI,00112$
      000362 80 FB            [24] 2062 	sjmp	00101$
      000364                       2063 00112$:
                           000364  2064 	C$i2c.h$211$1$93 ==.
                           000364  2065 	XG$i2c_write$0$0 ==.
      000364 22               [24] 2066 	ret
                                   2067 ;------------------------------------------------------------
                                   2068 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   2069 ;------------------------------------------------------------
                                   2070 ;output_data               Allocated to registers 
                                   2071 ;------------------------------------------------------------
                           000365  2072 	G$i2c_write_and_stop$0$0 ==.
                           000365  2073 	C$i2c.h$214$1$93 ==.
                                   2074 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:214: void i2c_write_and_stop(unsigned char output_data)
                                   2075 ;	-----------------------------------------
                                   2076 ;	 function i2c_write_and_stop
                                   2077 ;	-----------------------------------------
      000365                       2078 _i2c_write_and_stop:
      000365 85 82 C2         [24] 2079 	mov	_SMB0DAT,dpl
                           000368  2080 	C$i2c.h$217$1$95 ==.
                                   2081 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:217: STO = 1;                  //Set stop bit
      000368 D2 C4            [12] 2082 	setb	_STO
                           00036A  2083 	C$i2c.h$218$1$95 ==.
                                   2084 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:218: while(!SI);               //Wait until send is complete
      00036A                       2085 00101$:
                           00036A  2086 	C$i2c.h$219$1$95 ==.
                                   2087 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:219: SI = 0;                   //clear SI
      00036A 10 C3 02         [24] 2088 	jbc	_SI,00112$
      00036D 80 FB            [24] 2089 	sjmp	00101$
      00036F                       2090 00112$:
                           00036F  2091 	C$i2c.h$220$1$95 ==.
                           00036F  2092 	XG$i2c_write_and_stop$0$0 ==.
      00036F 22               [24] 2093 	ret
                                   2094 ;------------------------------------------------------------
                                   2095 ;Allocation info for local variables in function 'i2c_read'
                                   2096 ;------------------------------------------------------------
                                   2097 ;input_data                Allocated to registers 
                                   2098 ;------------------------------------------------------------
                           000370  2099 	G$i2c_read$0$0 ==.
                           000370  2100 	C$i2c.h$223$1$95 ==.
                                   2101 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:223: unsigned char i2c_read(void)
                                   2102 ;	-----------------------------------------
                                   2103 ;	 function i2c_read
                                   2104 ;	-----------------------------------------
      000370                       2105 _i2c_read:
                           000370  2106 	C$i2c.h$226$1$97 ==.
                                   2107 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:226: while(!SI);                //Wait until we have data to read
      000370                       2108 00101$:
      000370 30 C3 FD         [24] 2109 	jnb	_SI,00101$
                           000373  2110 	C$i2c.h$227$1$97 ==.
                                   2111 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:227: input_data = SMB0DAT;      //Read the data
      000373 85 C2 82         [24] 2112 	mov	dpl,_SMB0DAT
                           000376  2113 	C$i2c.h$228$1$97 ==.
                                   2114 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:228: SI = 0;                    //Clear SI
      000376 C2 C3            [12] 2115 	clr	_SI
                           000378  2116 	C$i2c.h$229$1$97 ==.
                                   2117 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:229: return input_data;         //Return the read data
                           000378  2118 	C$i2c.h$230$1$97 ==.
                           000378  2119 	XG$i2c_read$0$0 ==.
      000378 22               [24] 2120 	ret
                                   2121 ;------------------------------------------------------------
                                   2122 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2123 ;------------------------------------------------------------
                                   2124 ;input_data                Allocated to registers r7 
                                   2125 ;------------------------------------------------------------
                           000379  2126 	G$i2c_read_and_stop$0$0 ==.
                           000379  2127 	C$i2c.h$233$1$97 ==.
                                   2128 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:233: unsigned char i2c_read_and_stop(void)
                                   2129 ;	-----------------------------------------
                                   2130 ;	 function i2c_read_and_stop
                                   2131 ;	-----------------------------------------
      000379                       2132 _i2c_read_and_stop:
                           000379  2133 	C$i2c.h$236$1$99 ==.
                                   2134 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:236: while(!SI);                //Wait until we have data to read
      000379                       2135 00101$:
      000379 30 C3 FD         [24] 2136 	jnb	_SI,00101$
                           00037C  2137 	C$i2c.h$237$1$99 ==.
                                   2138 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:237: input_data = SMB0DAT;      //Read the data
      00037C AF C2            [24] 2139 	mov	r7,_SMB0DAT
                           00037E  2140 	C$i2c.h$238$1$99 ==.
                                   2141 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:238: SI = 0;                    //Clear SI
      00037E C2 C3            [12] 2142 	clr	_SI
                           000380  2143 	C$i2c.h$239$1$99 ==.
                                   2144 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:239: STO = 1;                   //Set stop bit
      000380 D2 C4            [12] 2145 	setb	_STO
                           000382  2146 	C$i2c.h$240$1$99 ==.
                                   2147 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:240: while(!SI);                //Wait for stop
      000382                       2148 00104$:
                           000382  2149 	C$i2c.h$241$1$99 ==.
                                   2150 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:241: SI = 0;
      000382 10 C3 02         [24] 2151 	jbc	_SI,00122$
      000385 80 FB            [24] 2152 	sjmp	00104$
      000387                       2153 00122$:
                           000387  2154 	C$i2c.h$242$1$99 ==.
                                   2155 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:242: return input_data;         //Return the read data
      000387 8F 82            [24] 2156 	mov	dpl,r7
                           000389  2157 	C$i2c.h$243$1$99 ==.
                           000389  2158 	XG$i2c_read_and_stop$0$0 ==.
      000389 22               [24] 2159 	ret
                                   2160 ;------------------------------------------------------------
                                   2161 ;Allocation info for local variables in function 'i2c_write_data'
                                   2162 ;------------------------------------------------------------
                                   2163 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2164 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2165 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2166 ;addr                      Allocated to registers r7 
                                   2167 ;i                         Allocated to registers r7 
                                   2168 ;------------------------------------------------------------
                           00038A  2169 	G$i2c_write_data$0$0 ==.
                           00038A  2170 	C$i2c.h$246$1$99 ==.
                                   2171 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:246: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2172 ;	-----------------------------------------
                                   2173 ;	 function i2c_write_data
                                   2174 ;	-----------------------------------------
      00038A                       2175 _i2c_write_data:
      00038A AF 82            [24] 2176 	mov	r7,dpl
                           00038C  2177 	C$i2c.h$250$1$101 ==.
                                   2178 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:250: i2c_start();               //initiate I2C transfer
      00038C C0 07            [24] 2179 	push	ar7
      00038E 12r03r4F         [24] 2180 	lcall	_i2c_start
      000391 D0 07            [24] 2181 	pop	ar7
                           000393  2182 	C$i2c.h$251$1$101 ==.
                                   2183 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:251: i2c_write(addr & ~0x01);   //write the desired address to the bus
      000393 74 FE            [12] 2184 	mov	a,#0xFE
      000395 5F               [12] 2185 	anl	a,r7
      000396 F5 82            [12] 2186 	mov	dpl,a
      000398 12r03r5C         [24] 2187 	lcall	_i2c_write
                           00039B  2188 	C$i2c.h$252$1$101 ==.
                                   2189 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:252: i2c_write(start_reg);      //write the start register to the bus
      00039B 85*06 82         [24] 2190 	mov	dpl,_i2c_write_data_PARM_2
      00039E 12r03r5C         [24] 2191 	lcall	_i2c_write
                           0003A1  2192 	C$i2c.h$253$1$101 ==.
                                   2193 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003A1 7F 00            [12] 2194 	mov	r7,#0x00
      0003A3                       2195 00103$:
      0003A3 AD*0A            [24] 2196 	mov	r5,_i2c_write_data_PARM_4
      0003A5 7E 00            [12] 2197 	mov	r6,#0x00
      0003A7 ED               [12] 2198 	mov	a,r5
      0003A8 24 FF            [12] 2199 	add	a,#0xFF
      0003AA FB               [12] 2200 	mov	r3,a
      0003AB EE               [12] 2201 	mov	a,r6
      0003AC 34 FF            [12] 2202 	addc	a,#0xFF
      0003AE FC               [12] 2203 	mov	r4,a
      0003AF 8F 01            [24] 2204 	mov	ar1,r7
      0003B1 7A 00            [12] 2205 	mov	r2,#0x00
      0003B3 C3               [12] 2206 	clr	c
      0003B4 E9               [12] 2207 	mov	a,r1
      0003B5 9B               [12] 2208 	subb	a,r3
      0003B6 EA               [12] 2209 	mov	a,r2
      0003B7 64 80            [12] 2210 	xrl	a,#0x80
      0003B9 8C F0            [24] 2211 	mov	b,r4
      0003BB 63 F0 80         [24] 2212 	xrl	b,#0x80
      0003BE 95 F0            [12] 2213 	subb	a,b
      0003C0 50 1F            [24] 2214 	jnc	00101$
                           0003C2  2215 	C$i2c.h$254$1$101 ==.
                                   2216 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:254: i2c_write(buffer[i]);
      0003C2 EF               [12] 2217 	mov	a,r7
      0003C3 25*07            [12] 2218 	add	a,_i2c_write_data_PARM_3
      0003C5 FA               [12] 2219 	mov	r2,a
      0003C6 E4               [12] 2220 	clr	a
      0003C7 35*08            [12] 2221 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003C9 FB               [12] 2222 	mov	r3,a
      0003CA AC*09            [24] 2223 	mov	r4,(_i2c_write_data_PARM_3 + 2)
      0003CC 8A 82            [24] 2224 	mov	dpl,r2
      0003CE 8B 83            [24] 2225 	mov	dph,r3
      0003D0 8C F0            [24] 2226 	mov	b,r4
      0003D2 12r00r00         [24] 2227 	lcall	__gptrget
      0003D5 F5 82            [12] 2228 	mov	dpl,a
      0003D7 C0 07            [24] 2229 	push	ar7
      0003D9 12r03r5C         [24] 2230 	lcall	_i2c_write
      0003DC D0 07            [24] 2231 	pop	ar7
                           0003DE  2232 	C$i2c.h$253$1$101 ==.
                                   2233 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003DE 0F               [12] 2234 	inc	r7
      0003DF 80 C2            [24] 2235 	sjmp	00103$
      0003E1                       2236 00101$:
                           0003E1  2237 	C$i2c.h$255$1$101 ==.
                                   2238 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:255: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003E1 1D               [12] 2239 	dec	r5
      0003E2 BD FF 01         [24] 2240 	cjne	r5,#0xFF,00115$
      0003E5 1E               [12] 2241 	dec	r6
      0003E6                       2242 00115$:
      0003E6 ED               [12] 2243 	mov	a,r5
      0003E7 25*07            [12] 2244 	add	a,_i2c_write_data_PARM_3
      0003E9 FD               [12] 2245 	mov	r5,a
      0003EA EE               [12] 2246 	mov	a,r6
      0003EB 35*08            [12] 2247 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003ED FE               [12] 2248 	mov	r6,a
      0003EE AF*09            [24] 2249 	mov	r7,(_i2c_write_data_PARM_3 + 2)
      0003F0 8D 82            [24] 2250 	mov	dpl,r5
      0003F2 8E 83            [24] 2251 	mov	dph,r6
      0003F4 8F F0            [24] 2252 	mov	b,r7
      0003F6 12r00r00         [24] 2253 	lcall	__gptrget
      0003F9 F5 82            [12] 2254 	mov	dpl,a
      0003FB 12r03r65         [24] 2255 	lcall	_i2c_write_and_stop
                           0003FE  2256 	C$i2c.h$256$1$101 ==.
                           0003FE  2257 	XG$i2c_write_data$0$0 ==.
      0003FE 22               [24] 2258 	ret
                                   2259 ;------------------------------------------------------------
                                   2260 ;Allocation info for local variables in function 'i2c_read_data'
                                   2261 ;------------------------------------------------------------
                                   2262 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2263 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2264 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2265 ;addr                      Allocated to registers r7 
                                   2266 ;j                         Allocated to registers r7 
                                   2267 ;------------------------------------------------------------
                           0003FF  2268 	G$i2c_read_data$0$0 ==.
                           0003FF  2269 	C$i2c.h$259$1$101 ==.
                                   2270 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:259: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2271 ;	-----------------------------------------
                                   2272 ;	 function i2c_read_data
                                   2273 ;	-----------------------------------------
      0003FF                       2274 _i2c_read_data:
      0003FF AF 82            [24] 2275 	mov	r7,dpl
                           000401  2276 	C$i2c.h$262$1$103 ==.
                                   2277 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:262: i2c_start();               //Start I2C transfer
      000401 C0 07            [24] 2278 	push	ar7
      000403 12r03r4F         [24] 2279 	lcall	_i2c_start
      000406 D0 07            [24] 2280 	pop	ar7
                           000408  2281 	C$i2c.h$263$1$103 ==.
                                   2282 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:263: i2c_write(addr & ~0x01);   //Write address of device that will be written to, send 0
      000408 8F 06            [24] 2283 	mov	ar6,r7
      00040A 74 FE            [12] 2284 	mov	a,#0xFE
      00040C 5E               [12] 2285 	anl	a,r6
      00040D F5 82            [12] 2286 	mov	dpl,a
      00040F C0 07            [24] 2287 	push	ar7
      000411 12r03r5C         [24] 2288 	lcall	_i2c_write
                           000414  2289 	C$i2c.h$264$1$103 ==.
                                   2290 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:264: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      000414 85*0B 82         [24] 2291 	mov	dpl,_i2c_read_data_PARM_2
      000417 12r03r65         [24] 2292 	lcall	_i2c_write_and_stop
                           00041A  2293 	C$i2c.h$265$1$103 ==.
                                   2294 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:265: i2c_start();               //Start I2C transfer
      00041A 12r03r4F         [24] 2295 	lcall	_i2c_start
      00041D D0 07            [24] 2296 	pop	ar7
                           00041F  2297 	C$i2c.h$266$1$103 ==.
                                   2298 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:266: i2c_write(addr | 0x01);    //Write address again, this time indicating a read operation
      00041F 74 01            [12] 2299 	mov	a,#0x01
      000421 4F               [12] 2300 	orl	a,r7
      000422 F5 82            [12] 2301 	mov	dpl,a
      000424 12r03r5C         [24] 2302 	lcall	_i2c_write
                           000427  2303 	C$i2c.h$267$1$103 ==.
                                   2304 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000427 7F 00            [12] 2305 	mov	r7,#0x00
      000429                       2306 00103$:
      000429 AD*0F            [24] 2307 	mov	r5,_i2c_read_data_PARM_4
      00042B 7E 00            [12] 2308 	mov	r6,#0x00
      00042D ED               [12] 2309 	mov	a,r5
      00042E 24 FF            [12] 2310 	add	a,#0xFF
      000430 FB               [12] 2311 	mov	r3,a
      000431 EE               [12] 2312 	mov	a,r6
      000432 34 FF            [12] 2313 	addc	a,#0xFF
      000434 FC               [12] 2314 	mov	r4,a
      000435 8F 01            [24] 2315 	mov	ar1,r7
      000437 7A 00            [12] 2316 	mov	r2,#0x00
      000439 C3               [12] 2317 	clr	c
      00043A E9               [12] 2318 	mov	a,r1
      00043B 9B               [12] 2319 	subb	a,r3
      00043C EA               [12] 2320 	mov	a,r2
      00043D 64 80            [12] 2321 	xrl	a,#0x80
      00043F 8C F0            [24] 2322 	mov	b,r4
      000441 63 F0 80         [24] 2323 	xrl	b,#0x80
      000444 95 F0            [12] 2324 	subb	a,b
      000446 50 2E            [24] 2325 	jnc	00101$
                           000448  2326 	C$i2c.h$269$2$104 ==.
                                   2327 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:269: AA = 1;                //Set acknowledge bit
      000448 D2 C2            [12] 2328 	setb	_AA
                           00044A  2329 	C$i2c.h$270$2$104 ==.
                                   2330 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:270: buffer[j] = i2c_read();//Read data, save it in buffer
      00044A EF               [12] 2331 	mov	a,r7
      00044B 25*0C            [12] 2332 	add	a,_i2c_read_data_PARM_3
      00044D FA               [12] 2333 	mov	r2,a
      00044E E4               [12] 2334 	clr	a
      00044F 35*0D            [12] 2335 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000451 FB               [12] 2336 	mov	r3,a
      000452 AC*0E            [24] 2337 	mov	r4,(_i2c_read_data_PARM_3 + 2)
      000454 C0 07            [24] 2338 	push	ar7
      000456 C0 04            [24] 2339 	push	ar4
      000458 C0 03            [24] 2340 	push	ar3
      00045A C0 02            [24] 2341 	push	ar2
      00045C 12r03r70         [24] 2342 	lcall	_i2c_read
      00045F A9 82            [24] 2343 	mov	r1,dpl
      000461 D0 02            [24] 2344 	pop	ar2
      000463 D0 03            [24] 2345 	pop	ar3
      000465 D0 04            [24] 2346 	pop	ar4
      000467 D0 07            [24] 2347 	pop	ar7
      000469 8A 82            [24] 2348 	mov	dpl,r2
      00046B 8B 83            [24] 2349 	mov	dph,r3
      00046D 8C F0            [24] 2350 	mov	b,r4
      00046F E9               [12] 2351 	mov	a,r1
      000470 12r00r00         [24] 2352 	lcall	__gptrput
                           000473  2353 	C$i2c.h$267$1$103 ==.
                                   2354 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000473 0F               [12] 2355 	inc	r7
      000474 80 B3            [24] 2356 	sjmp	00103$
      000476                       2357 00101$:
                           000476  2358 	C$i2c.h$272$1$103 ==.
                                   2359 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:272: AA = 0;
      000476 C2 C2            [12] 2360 	clr	_AA
                           000478  2361 	C$i2c.h$273$1$103 ==.
                                   2362 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:273: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      000478 1D               [12] 2363 	dec	r5
      000479 BD FF 01         [24] 2364 	cjne	r5,#0xFF,00115$
      00047C 1E               [12] 2365 	dec	r6
      00047D                       2366 00115$:
      00047D ED               [12] 2367 	mov	a,r5
      00047E 25*0C            [12] 2368 	add	a,_i2c_read_data_PARM_3
      000480 FD               [12] 2369 	mov	r5,a
      000481 EE               [12] 2370 	mov	a,r6
      000482 35*0D            [12] 2371 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000484 FE               [12] 2372 	mov	r6,a
      000485 AF*0E            [24] 2373 	mov	r7,(_i2c_read_data_PARM_3 + 2)
      000487 C0 07            [24] 2374 	push	ar7
      000489 C0 06            [24] 2375 	push	ar6
      00048B C0 05            [24] 2376 	push	ar5
      00048D 12r03r79         [24] 2377 	lcall	_i2c_read_and_stop
      000490 AC 82            [24] 2378 	mov	r4,dpl
      000492 D0 05            [24] 2379 	pop	ar5
      000494 D0 06            [24] 2380 	pop	ar6
      000496 D0 07            [24] 2381 	pop	ar7
      000498 8D 82            [24] 2382 	mov	dpl,r5
      00049A 8E 83            [24] 2383 	mov	dph,r6
      00049C 8F F0            [24] 2384 	mov	b,r7
      00049E EC               [12] 2385 	mov	a,r4
      00049F 12r00r00         [24] 2386 	lcall	__gptrput
                           0004A2  2387 	C$i2c.h$274$1$103 ==.
                           0004A2  2388 	XG$i2c_read_data$0$0 ==.
      0004A2 22               [24] 2389 	ret
                                   2390 ;------------------------------------------------------------
                                   2391 ;Allocation info for local variables in function 'Accel_Init'
                                   2392 ;------------------------------------------------------------
                                   2393 ;Data2                     Allocated with name '_Accel_Init_Data2_1_106'
                                   2394 ;------------------------------------------------------------
                           0004A3  2395 	G$Accel_Init$0$0 ==.
                           0004A3  2396 	C$i2c.h$283$1$103 ==.
                                   2397 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:283: void Accel_Init(void)
                                   2398 ;	-----------------------------------------
                                   2399 ;	 function Accel_Init
                                   2400 ;	-----------------------------------------
      0004A3                       2401 _Accel_Init:
                           0004A3  2402 	C$i2c.h$287$1$106 ==.
                                   2403 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:287: Data2[0]=0x23;	//normal power mode, 50Hz ODR, y & x axes enabled
      0004A3 75*10 23         [24] 2404 	mov	_Accel_Init_Data2_1_106,#0x23
                           0004A6  2405 	C$i2c.h$289$1$106 ==.
                                   2406 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:289: i2c_write_data(addr_accel, 0x20, Data2, 1);
      0004A6 75*07r10         [24] 2407 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_106
      0004A9 75*08 00         [24] 2408 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004AC 75*09 40         [24] 2409 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004AF 75*06 20         [24] 2410 	mov	_i2c_write_data_PARM_2,#0x20
      0004B2 75*0A 01         [24] 2411 	mov	_i2c_write_data_PARM_4,#0x01
      0004B5 75 82 30         [24] 2412 	mov	dpl,#0x30
      0004B8 12r03r8A         [24] 2413 	lcall	_i2c_write_data
                           0004BB  2414 	C$i2c.h$290$1$106 ==.
                                   2415 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:290: Data2[0]=0x00;	//Default - no filtering
      0004BB 75*10 00         [24] 2416 	mov	_Accel_Init_Data2_1_106,#0x00
                           0004BE  2417 	C$i2c.h$292$1$106 ==.
                                   2418 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:292: i2c_write_data(addr_accel, 0x21, Data2, 1);
      0004BE 75*07r10         [24] 2419 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_106
      0004C1 75*08 00         [24] 2420 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004C4 75*09 40         [24] 2421 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C7 75*06 21         [24] 2422 	mov	_i2c_write_data_PARM_2,#0x21
      0004CA 75*0A 01         [24] 2423 	mov	_i2c_write_data_PARM_4,#0x01
      0004CD 75 82 30         [24] 2424 	mov	dpl,#0x30
      0004D0 12r03r8A         [24] 2425 	lcall	_i2c_write_data
                           0004D3  2426 	C$i2c.h$293$1$106 ==.
                                   2427 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:293: Data2[0]=0x00;	//default - no interrupts enabled
      0004D3 75*10 00         [24] 2428 	mov	_Accel_Init_Data2_1_106,#0x00
                           0004D6  2429 	C$i2c.h$294$1$106 ==.
                                   2430 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:294: i2c_write_data(addr_accel, 0x22, Data2, 1);
      0004D6 75*07r10         [24] 2431 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_106
      0004D9 75*08 00         [24] 2432 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004DC 75*09 40         [24] 2433 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004DF 75*06 22         [24] 2434 	mov	_i2c_write_data_PARM_2,#0x22
      0004E2 75*0A 01         [24] 2435 	mov	_i2c_write_data_PARM_4,#0x01
      0004E5 75 82 30         [24] 2436 	mov	dpl,#0x30
      0004E8 12r03r8A         [24] 2437 	lcall	_i2c_write_data
                           0004EB  2438 	C$i2c.h$298$1$106 ==.
                           0004EB  2439 	XG$Accel_Init$0$0 ==.
      0004EB 22               [24] 2440 	ret
                                   2441 ;------------------------------------------------------------
                                   2442 ;Allocation info for local variables in function 'main'
                                   2443 ;------------------------------------------------------------
                           0004EC  2444 	G$main$0$0 ==.
                           0004EC  2445 	C$LAB4_V45_TESTCODE.c$105$1$106 ==.
                                   2446 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:105: void main(void) {         
                                   2447 ;	-----------------------------------------
                                   2448 ;	 function main
                                   2449 ;	-----------------------------------------
      0004EC                       2450 _main:
                           0004EC  2451 	C$LAB4_V45_TESTCODE.c$106$1$133 ==.
                                   2452 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:106: Sys_Init();	//All init function
      0004EC 12r00r37         [24] 2453 	lcall	_Sys_Init
                           0004EF  2454 	C$LAB4_V45_TESTCODE.c$107$1$133 ==.
                                   2455 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:107: putchar(' ');
      0004EF 75 82 20         [24] 2456 	mov	dpl,#0x20
      0004F2 12r00r4A         [24] 2457 	lcall	_putchar
                           0004F5  2458 	C$LAB4_V45_TESTCODE.c$108$1$133 ==.
                                   2459 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:108: XBR0_Init();
      0004F5 12r0Cr24         [24] 2460 	lcall	_XBR0_Init
                           0004F8  2461 	C$LAB4_V45_TESTCODE.c$109$1$133 ==.
                                   2462 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:109: ADC_Init();    
      0004F8 12r0Cr28         [24] 2463 	lcall	_ADC_Init
                           0004FB  2464 	C$LAB4_V45_TESTCODE.c$110$1$133 ==.
                                   2465 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:110: Port_Init();     
      0004FB 12r0BrFB         [24] 2466 	lcall	_Port_Init
                           0004FE  2467 	C$LAB4_V45_TESTCODE.c$111$1$133 ==.
                                   2468 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:111: PCA_Init();     
      0004FE 12r0BrE9         [24] 2469 	lcall	_PCA_Init
                           000501  2470 	C$LAB4_V45_TESTCODE.c$112$1$133 ==.
                                   2471 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:112: SMB_Init();	//end the init function
      000501 12r0Cr48         [24] 2472 	lcall	_SMB_Init
                           000504  2473 	C$LAB4_V45_TESTCODE.c$114$1$133 ==.
                                   2474 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:114: lcd_clear();	
      000504 12r00rF8         [24] 2475 	lcall	_lcd_clear
                           000507  2476 	C$LAB4_V45_TESTCODE.c$115$1$133 ==.
                                   2477 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:115: lcd_print("initializing\r\n");
      000507 74r29            [12] 2478 	mov	a,#___str_3
      000509 C0 E0            [24] 2479 	push	acc
      00050B 74s00            [12] 2480 	mov	a,#(___str_3 >> 8)
      00050D C0 E0            [24] 2481 	push	acc
      00050F 74 80            [12] 2482 	mov	a,#0x80
      000511 C0 E0            [24] 2483 	push	acc
      000513 12r00r77         [24] 2484 	lcall	_lcd_print
      000516 15 81            [12] 2485 	dec	sp
      000518 15 81            [12] 2486 	dec	sp
      00051A 15 81            [12] 2487 	dec	sp
                           00051C  2488 	C$LAB4_V45_TESTCODE.c$116$1$133 ==.
                                   2489 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:116: printf("\n\n\n\rinitalizing");
      00051C 74r38            [12] 2490 	mov	a,#___str_4
      00051E C0 E0            [24] 2491 	push	acc
      000520 74s00            [12] 2492 	mov	a,#(___str_4 >> 8)
      000522 C0 E0            [24] 2493 	push	acc
      000524 74 80            [12] 2494 	mov	a,#0x80
      000526 C0 E0            [24] 2495 	push	acc
      000528 12r00r00         [24] 2496 	lcall	_printf
      00052B 15 81            [12] 2497 	dec	sp
      00052D 15 81            [12] 2498 	dec	sp
      00052F 15 81            [12] 2499 	dec	sp
                           000531  2500 	C$LAB4_V45_TESTCODE.c$118$1$133 ==.
                                   2501 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:118: PCA0CP2 = 0xFFFF - MOTOR_NEUT;//set all to neutural
      000531 75 EC 32         [24] 2502 	mov	((_PCA0CP2 >> 0) & 0xFF),#0x32
      000534 75 FC F5         [24] 2503 	mov	((_PCA0CP2 >> 8) & 0xFF),#0xF5
                           000537  2504 	C$LAB4_V45_TESTCODE.c$119$1$133 ==.
                                   2505 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:119: PCA0CPL0 = 0xFFFF - PW_CENTER;
      000537 AF*25            [24] 2506 	mov	r7,_PW_CENTER
      000539 74 FF            [12] 2507 	mov	a,#0xFF
      00053B C3               [12] 2508 	clr	c
      00053C 9F               [12] 2509 	subb	a,r7
      00053D F5 EA            [12] 2510 	mov	_PCA0CPL0,a
                           00053F  2511 	C$LAB4_V45_TESTCODE.c$120$1$133 ==.
                                   2512 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:120: PCA0CPH0 = (0xFFFF - PW_CENTER) >> 8;
      00053F 74 FF            [12] 2513 	mov	a,#0xFF
      000541 C3               [12] 2514 	clr	c
      000542 95*25            [12] 2515 	subb	a,_PW_CENTER
      000544 74 FF            [12] 2516 	mov	a,#0xFF
      000546 95*26            [12] 2517 	subb	a,(_PW_CENTER + 1)
      000548 FF               [12] 2518 	mov	r7,a
      000549 8F FA            [24] 2519 	mov	_PCA0CPH0,r7
                           00054B  2520 	C$LAB4_V45_TESTCODE.c$122$1$133 ==.
                                   2521 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:122: pause();	//pause for a second?
      00054B 12r0BrDF         [24] 2522 	lcall	_pause
                           00054E  2523 	C$LAB4_V45_TESTCODE.c$123$1$133 ==.
                                   2524 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:123: start_run();
      00054E 12r05rB5         [24] 2525 	lcall	_start_run
                           000551  2526 	C$LAB4_V45_TESTCODE.c$126$2$134 ==.
                                   2527 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:126: while(SS){            // if the slideswitch is off          
      000551                       2528 00101$:
      000551 30 B7 05         [24] 2529 	jnb	_SS,00115$
                           000554  2530 	C$LAB4_V45_TESTCODE.c$127$3$135 ==.
                                   2531 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:127: slide_switch_off();
      000554 12r05rEE         [24] 2532 	lcall	_slide_switch_off
                           000557  2533 	C$LAB4_V45_TESTCODE.c$129$1$133 ==.
                                   2534 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:129: while(!SS){	//while the slideswitch is on
      000557 80 F8            [24] 2535 	sjmp	00101$
      000559                       2536 00115$:
      000559                       2537 00104$:
      000559 20 B7 F5         [24] 2538 	jb	_SS,00101$
                           00055C  2539 	C$LAB4_V45_TESTCODE.c$130$3$136 ==.
                                   2540 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:130: Heading();
      00055C 12r06r94         [24] 2541 	lcall	_Heading
                           00055F  2542 	C$LAB4_V45_TESTCODE.c$131$3$136 ==.
                                   2543 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:131: Ranger();
      00055F 12r06rA8         [24] 2544 	lcall	_Ranger
                           000562  2545 	C$LAB4_V45_TESTCODE.c$132$3$136 ==.
                                   2546 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:132: LCD_Print();	//print all values on the lcd
      000562 12r06rE7         [24] 2547 	lcall	_LCD_Print
                           000565  2548 	C$LAB4_V45_TESTCODE.c$133$3$136 ==.
                                   2549 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:133: printf("\n\rRange:%d Compass:%d dh: %d, mPW: %d, sPW %d, batt:%d, obst: %d", range, heading, desired_heading, MOTOR_PW_AND_STEER_PW, STEER_PW, 10*battery, near_obstical);	//print these on the secure crt for data aquisition
      000565 AE*2F            [24] 2550 	mov	r6,_near_obstical
      000567 7F 00            [12] 2551 	mov	r7,#0x00
      000569 85*30*00         [24] 2552 	mov	__mulint_PARM_2,_battery
      00056C 85*31*01         [24] 2553 	mov	(__mulint_PARM_2 + 1),(_battery + 1)
      00056F 90 00 0A         [24] 2554 	mov	dptr,#0x000A
      000572 C0 07            [24] 2555 	push	ar7
      000574 C0 06            [24] 2556 	push	ar6
      000576 12r00r00         [24] 2557 	lcall	__mulint
      000579 AC 82            [24] 2558 	mov	r4,dpl
      00057B AD 83            [24] 2559 	mov	r5,dph
      00057D D0 06            [24] 2560 	pop	ar6
      00057F D0 07            [24] 2561 	pop	ar7
      000581 C0 06            [24] 2562 	push	ar6
      000583 C0 07            [24] 2563 	push	ar7
      000585 C0 04            [24] 2564 	push	ar4
      000587 C0 05            [24] 2565 	push	ar5
      000589 C0*29            [24] 2566 	push	_STEER_PW
      00058B C0*2A            [24] 2567 	push	(_STEER_PW + 1)
      00058D C0*27            [24] 2568 	push	_MOTOR_PW_AND_STEER_PW
      00058F C0*28            [24] 2569 	push	(_MOTOR_PW_AND_STEER_PW + 1)
      000591 C0*2B            [24] 2570 	push	_desired_heading
      000593 C0*2C            [24] 2571 	push	(_desired_heading + 1)
      000595 C0*18            [24] 2572 	push	_heading
      000597 C0*19            [24] 2573 	push	(_heading + 1)
      000599 C0*16            [24] 2574 	push	_range
      00059B C0*17            [24] 2575 	push	(_range + 1)
      00059D 74r48            [12] 2576 	mov	a,#___str_5
      00059F C0 E0            [24] 2577 	push	acc
      0005A1 74s00            [12] 2578 	mov	a,#(___str_5 >> 8)
      0005A3 C0 E0            [24] 2579 	push	acc
      0005A5 74 80            [12] 2580 	mov	a,#0x80
      0005A7 C0 E0            [24] 2581 	push	acc
      0005A9 12r00r00         [24] 2582 	lcall	_printf
      0005AC E5 81            [12] 2583 	mov	a,sp
      0005AE 24 EF            [12] 2584 	add	a,#0xef
      0005B0 F5 81            [12] 2585 	mov	sp,a
      0005B2 80 A5            [24] 2586 	sjmp	00104$
                           0005B4  2587 	C$LAB4_V45_TESTCODE.c$137$1$133 ==.
                           0005B4  2588 	XG$main$0$0 ==.
      0005B4 22               [24] 2589 	ret
                                   2590 ;------------------------------------------------------------
                                   2591 ;Allocation info for local variables in function 'start_run'
                                   2592 ;------------------------------------------------------------
                           0005B5  2593 	G$start_run$0$0 ==.
                           0005B5  2594 	C$LAB4_V45_TESTCODE.c$142$1$133 ==.
                                   2595 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:142: void start_run(void){	//function that does the inital thngs like get heading, gain, set values to neutral
                                   2596 ;	-----------------------------------------
                                   2597 ;	 function start_run
                                   2598 ;	-----------------------------------------
      0005B5                       2599 _start_run:
                           0005B5  2600 	C$LAB4_V45_TESTCODE.c$143$1$138 ==.
                                   2601 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:143: desired_heading=900;//desired_heading = choose_heading();                 
      0005B5 75*2B 84         [24] 2602 	mov	_desired_heading,#0x84
      0005B8 75*2C 03         [24] 2603 	mov	(_desired_heading + 1),#0x03
                           0005BB  2604 	C$LAB4_V45_TESTCODE.c$144$1$138 ==.
                                   2605 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:144: steer_gain=1; //choose_gain();
      0005BB 75*34 01         [24] 2606 	mov	_steer_gain,#0x01
      0005BE 75*35 00         [24] 2607 	mov	(_steer_gain + 1),#0x00
                           0005C1  2608 	C$LAB4_V45_TESTCODE.c$145$1$138 ==.
                                   2609 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:145: pause();
      0005C1 12r0BrDF         [24] 2610 	lcall	_pause
                           0005C4  2611 	C$LAB4_V45_TESTCODE.c$146$1$138 ==.
                                   2612 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:146: choose_speed();
      0005C4 12r09r45         [24] 2613 	lcall	_choose_speed
                           0005C7  2614 	C$LAB4_V45_TESTCODE.c$148$1$138 ==.
                                   2615 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:148: MOTOR_PW_AND_STEER_PW = MOTOR_NEUT;	//start off in neutral
      0005C7 75*27 CD         [24] 2616 	mov	_MOTOR_PW_AND_STEER_PW,#0xCD
      0005CA 75*28 0A         [24] 2617 	mov	(_MOTOR_PW_AND_STEER_PW + 1),#0x0A
                           0005CD  2618 	C$LAB4_V45_TESTCODE.c$149$1$138 ==.
                                   2619 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:149: PCA0CP2 = 0xFFFF - MOTOR_PW_AND_STEER_PW;
      0005CD 75 EC 32         [24] 2620 	mov	((_PCA0CP2 >> 0) & 0xFF),#0x32
      0005D0 75 FC F5         [24] 2621 	mov	((_PCA0CP2 >> 8) & 0xFF),#0xF5
                           0005D3  2622 	C$LAB4_V45_TESTCODE.c$150$1$138 ==.
                                   2623 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:150: STEER_PW=PW_CENTER;			//start off with the wheels straight
      0005D3 85*25*29         [24] 2624 	mov	_STEER_PW,_PW_CENTER
      0005D6 85*26*2A         [24] 2625 	mov	(_STEER_PW + 1),(_PW_CENTER + 1)
                           0005D9  2626 	C$LAB4_V45_TESTCODE.c$151$1$138 ==.
                                   2627 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:151: PCA0CPL0 = 0xFFFF - STEER_PW;
      0005D9 AF*29            [24] 2628 	mov	r7,_STEER_PW
      0005DB 74 FF            [12] 2629 	mov	a,#0xFF
      0005DD C3               [12] 2630 	clr	c
      0005DE 9F               [12] 2631 	subb	a,r7
      0005DF F5 EA            [12] 2632 	mov	_PCA0CPL0,a
                           0005E1  2633 	C$LAB4_V45_TESTCODE.c$152$1$138 ==.
                                   2634 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:152: PCA0CPH0 = (0xFFFF - STEER_PW) >> 8;
      0005E1 74 FF            [12] 2635 	mov	a,#0xFF
      0005E3 C3               [12] 2636 	clr	c
      0005E4 95*29            [12] 2637 	subb	a,_STEER_PW
      0005E6 74 FF            [12] 2638 	mov	a,#0xFF
      0005E8 95*2A            [12] 2639 	subb	a,(_STEER_PW + 1)
      0005EA FF               [12] 2640 	mov	r7,a
      0005EB 8F FA            [24] 2641 	mov	_PCA0CPH0,r7
                           0005ED  2642 	C$LAB4_V45_TESTCODE.c$153$1$138 ==.
                           0005ED  2643 	XG$start_run$0$0 ==.
      0005ED 22               [24] 2644 	ret
                                   2645 ;------------------------------------------------------------
                                   2646 ;Allocation info for local variables in function 'slide_switch_off'
                                   2647 ;------------------------------------------------------------
                           0005EE  2648 	G$slide_switch_off$0$0 ==.
                           0005EE  2649 	C$LAB4_V45_TESTCODE.c$155$1$138 ==.
                                   2650 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:155: void slide_switch_off(void){//function that does stuff when the slide swithc is off
                                   2651 ;	-----------------------------------------
                                   2652 ;	 function slide_switch_off
                                   2653 ;	-----------------------------------------
      0005EE                       2654 _slide_switch_off:
                           0005EE  2655 	C$LAB4_V45_TESTCODE.c$156$1$140 ==.
                                   2656 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:156: MOTOR_PW_AND_STEER_PW = MOTOR_NEUT;	//run switch is off, stop the car
      0005EE 75*27 CD         [24] 2657 	mov	_MOTOR_PW_AND_STEER_PW,#0xCD
      0005F1 75*28 0A         [24] 2658 	mov	(_MOTOR_PW_AND_STEER_PW + 1),#0x0A
                           0005F4  2659 	C$LAB4_V45_TESTCODE.c$157$1$140 ==.
                                   2660 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:157: PCA0CP2 = 0xFFFF - MOTOR_PW_AND_STEER_PW;
      0005F4 75 EC 32         [24] 2661 	mov	((_PCA0CP2 >> 0) & 0xFF),#0x32
      0005F7 75 FC F5         [24] 2662 	mov	((_PCA0CP2 >> 8) & 0xFF),#0xF5
                           0005FA  2663 	C$LAB4_V45_TESTCODE.c$158$1$140 ==.
                                   2664 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:158: STEER_PW=PW_CENTER;			//run switch is off, might as well turn straight now too.
      0005FA 85*25*29         [24] 2665 	mov	_STEER_PW,_PW_CENTER
      0005FD 85*26*2A         [24] 2666 	mov	(_STEER_PW + 1),(_PW_CENTER + 1)
                           000600  2667 	C$LAB4_V45_TESTCODE.c$159$1$140 ==.
                                   2668 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:159: PCA0CPL0 = 0xFFFF - STEER_PW;
      000600 AF*29            [24] 2669 	mov	r7,_STEER_PW
      000602 74 FF            [12] 2670 	mov	a,#0xFF
      000604 C3               [12] 2671 	clr	c
      000605 9F               [12] 2672 	subb	a,r7
      000606 F5 EA            [12] 2673 	mov	_PCA0CPL0,a
                           000608  2674 	C$LAB4_V45_TESTCODE.c$160$1$140 ==.
                                   2675 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:160: PCA0CPH0 = (0xFFFF - STEER_PW) >> 8;   
      000608 74 FF            [12] 2676 	mov	a,#0xFF
      00060A C3               [12] 2677 	clr	c
      00060B 95*29            [12] 2678 	subb	a,_STEER_PW
      00060D 74 FF            [12] 2679 	mov	a,#0xFF
      00060F 95*2A            [12] 2680 	subb	a,(_STEER_PW + 1)
      000611 FF               [12] 2681 	mov	r7,a
      000612 8F FA            [24] 2682 	mov	_PCA0CPH0,r7
                           000614  2683 	C$LAB4_V45_TESTCODE.c$161$1$140 ==.
                                   2684 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:161: lcd_clear();
      000614 12r00rF8         [24] 2685 	lcall	_lcd_clear
                           000617  2686 	C$LAB4_V45_TESTCODE.c$162$1$140 ==.
                                   2687 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:162: lcd_print("The slideswitch is off. Turn it on."); 	
      000617 74r89            [12] 2688 	mov	a,#___str_6
      000619 C0 E0            [24] 2689 	push	acc
      00061B 74s00            [12] 2690 	mov	a,#(___str_6 >> 8)
      00061D C0 E0            [24] 2691 	push	acc
      00061F 74 80            [12] 2692 	mov	a,#0x80
      000621 C0 E0            [24] 2693 	push	acc
      000623 12r00r77         [24] 2694 	lcall	_lcd_print
      000626 15 81            [12] 2695 	dec	sp
      000628 15 81            [12] 2696 	dec	sp
      00062A 15 81            [12] 2697 	dec	sp
                           00062C  2698 	C$LAB4_V45_TESTCODE.c$163$1$140 ==.
                           00062C  2699 	XG$slide_switch_off$0$0 ==.
      00062C 22               [24] 2700 	ret
                                   2701 ;------------------------------------------------------------
                                   2702 ;Allocation info for local variables in function 'ReadCompass'
                                   2703 ;------------------------------------------------------------
                           00062D  2704 	G$ReadCompass$0$0 ==.
                           00062D  2705 	C$LAB4_V45_TESTCODE.c$168$1$140 ==.
                                   2706 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:168: unsigned int ReadCompass() {	//Reads Compass, returns heading
                                   2707 ;	-----------------------------------------
                                   2708 ;	 function ReadCompass
                                   2709 ;	-----------------------------------------
      00062D                       2710 _ReadCompass:
                           00062D  2711 	C$LAB4_V45_TESTCODE.c$169$1$141 ==.
                                   2712 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:169: i2c_read_data(comp_addr, 2, comp_and_range_Data, 2);	//read two byte, starting at reg 2
      00062D 75*0Cr1E         [24] 2713 	mov	_i2c_read_data_PARM_3,#_comp_and_range_Data
      000630 75*0D 00         [24] 2714 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000633 75*0E 40         [24] 2715 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000636 75*0B 02         [24] 2716 	mov	_i2c_read_data_PARM_2,#0x02
      000639 75*0F 02         [24] 2717 	mov	_i2c_read_data_PARM_4,#0x02
      00063C 85*1C 82         [24] 2718 	mov	dpl,_comp_addr
      00063F 12r03rFF         [24] 2719 	lcall	_i2c_read_data
                           000642  2720 	C$LAB4_V45_TESTCODE.c$170$1$141 ==.
                                   2721 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:170: return (unsigned int)(comp_and_range_Data[0]<<8 | comp_and_range_Data[1]);	//combine the two values
      000642 AF*1E            [24] 2722 	mov	r7,_comp_and_range_Data
      000644 7E 00            [12] 2723 	mov	r6,#0x00
      000646 AC*1F            [24] 2724 	mov	r4,(_comp_and_range_Data + 0x0001)
      000648 7D 00            [12] 2725 	mov	r5,#0x00
      00064A EC               [12] 2726 	mov	a,r4
      00064B 42 06            [12] 2727 	orl	ar6,a
      00064D ED               [12] 2728 	mov	a,r5
      00064E 42 07            [12] 2729 	orl	ar7,a
      000650 8E 82            [24] 2730 	mov	dpl,r6
      000652 8F 83            [24] 2731 	mov	dph,r7
                           000654  2732 	C$LAB4_V45_TESTCODE.c$172$1$141 ==.
                           000654  2733 	XG$ReadCompass$0$0 ==.
      000654 22               [24] 2734 	ret
                                   2735 ;------------------------------------------------------------
                                   2736 ;Allocation info for local variables in function 'ReadRanger'
                                   2737 ;------------------------------------------------------------
                           000655  2738 	G$ReadRanger$0$0 ==.
                           000655  2739 	C$LAB4_V45_TESTCODE.c$174$1$141 ==.
                                   2740 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:174: unsigned int ReadRanger() {		//Reads ranger, returns distance
                                   2741 ;	-----------------------------------------
                                   2742 ;	 function ReadRanger
                                   2743 ;	-----------------------------------------
      000655                       2744 _ReadRanger:
                           000655  2745 	C$LAB4_V45_TESTCODE.c$175$1$142 ==.
                                   2746 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:175: i2c_read_data(range_and_ping_addr, 2, comp_and_range_Data, 2); // read two bytes, starting at reg 2
      000655 75*0Cr1E         [24] 2747 	mov	_i2c_read_data_PARM_3,#_comp_and_range_Data
      000658 75*0D 00         [24] 2748 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00065B 75*0E 40         [24] 2749 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      00065E 75*0B 02         [24] 2750 	mov	_i2c_read_data_PARM_2,#0x02
      000661 75*0F 02         [24] 2751 	mov	_i2c_read_data_PARM_4,#0x02
      000664 85*1D 82         [24] 2752 	mov	dpl,_range_and_ping_addr
      000667 12r03rFF         [24] 2753 	lcall	_i2c_read_data
                           00066A  2754 	C$LAB4_V45_TESTCODE.c$176$1$142 ==.
                                   2755 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:176: return (((unsigned int)comp_and_range_Data[0] << 8) | comp_and_range_Data[1]);
      00066A AF*1E            [24] 2756 	mov	r7,_comp_and_range_Data
      00066C 7E 00            [12] 2757 	mov	r6,#0x00
      00066E AC*1F            [24] 2758 	mov	r4,(_comp_and_range_Data + 0x0001)
      000670 7D 00            [12] 2759 	mov	r5,#0x00
      000672 EC               [12] 2760 	mov	a,r4
      000673 4E               [12] 2761 	orl	a,r6
      000674 F5 82            [12] 2762 	mov	dpl,a
      000676 ED               [12] 2763 	mov	a,r5
      000677 4F               [12] 2764 	orl	a,r7
      000678 F5 83            [12] 2765 	mov	dph,a
                           00067A  2766 	C$LAB4_V45_TESTCODE.c$177$1$142 ==.
                           00067A  2767 	XG$ReadRanger$0$0 ==.
      00067A 22               [24] 2768 	ret
                                   2769 ;------------------------------------------------------------
                                   2770 ;Allocation info for local variables in function 'start_ping'
                                   2771 ;------------------------------------------------------------
                           00067B  2772 	G$start_ping$0$0 ==.
                           00067B  2773 	C$LAB4_V45_TESTCODE.c$179$1$142 ==.
                                   2774 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:179: void start_ping(void) {	//The start ping function
                                   2775 ;	-----------------------------------------
                                   2776 ;	 function start_ping
                                   2777 ;	-----------------------------------------
      00067B                       2778 _start_ping:
                           00067B  2779 	C$LAB4_V45_TESTCODE.c$180$1$144 ==.
                                   2780 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:180: ping_Data[0] = 0x51;    // write 0x51 to reg 0 of the ranger
      00067B 75*20 51         [24] 2781 	mov	_ping_Data,#0x51
                           00067E  2782 	C$LAB4_V45_TESTCODE.c$181$1$144 ==.
                                   2783 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:181: i2c_write_data(range_and_ping_addr, 0, ping_Data, 1);    // write one byte of data to reg 0 at addr
      00067E 75*07r20         [24] 2784 	mov	_i2c_write_data_PARM_3,#_ping_Data
      000681 75*08 00         [24] 2785 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000684 75*09 40         [24] 2786 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000687 75*06 00         [24] 2787 	mov	_i2c_write_data_PARM_2,#0x00
      00068A 75*0A 01         [24] 2788 	mov	_i2c_write_data_PARM_4,#0x01
      00068D 85*1D 82         [24] 2789 	mov	dpl,_range_and_ping_addr
      000690 12r03r8A         [24] 2790 	lcall	_i2c_write_data
                           000693  2791 	C$LAB4_V45_TESTCODE.c$182$1$144 ==.
                           000693  2792 	XG$start_ping$0$0 ==.
      000693 22               [24] 2793 	ret
                                   2794 ;------------------------------------------------------------
                                   2795 ;Allocation info for local variables in function 'Heading'
                                   2796 ;------------------------------------------------------------
                           000694  2797 	G$Heading$0$0 ==.
                           000694  2798 	C$LAB4_V45_TESTCODE.c$188$1$144 ==.
                                   2799 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:188: void Heading(void) {
                                   2800 ;	-----------------------------------------
                                   2801 ;	 function Heading
                                   2802 ;	-----------------------------------------
      000694                       2803 _Heading:
                           000694  2804 	C$LAB4_V45_TESTCODE.c$189$1$146 ==.
                                   2805 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:189: if (new_heading){ //20 ms passed
      000694 E5*1A            [12] 2806 	mov	a,_new_heading
      000696 60 0C            [24] 2807 	jz	00102$
                           000698  2808 	C$LAB4_V45_TESTCODE.c$190$2$147 ==.
                                   2809 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:190: heading = ReadCompass();
      000698 12r06r2D         [24] 2810 	lcall	_ReadCompass
      00069B 85 82*18         [24] 2811 	mov	_heading,dpl
      00069E 85 83*19         [24] 2812 	mov	(_heading + 1),dph
                           0006A1  2813 	C$LAB4_V45_TESTCODE.c$191$2$147 ==.
                                   2814 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:191: new_heading = 0;
      0006A1 75*1A 00         [24] 2815 	mov	_new_heading,#0x00
      0006A4                       2816 00102$:
                           0006A4  2817 	C$LAB4_V45_TESTCODE.c$193$1$146 ==.
                                   2818 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:193: Steering_Servo();	//even if not new heading, run the steering servo
      0006A4 12r09rD6         [24] 2819 	lcall	_Steering_Servo
                           0006A7  2820 	C$LAB4_V45_TESTCODE.c$194$1$146 ==.
                           0006A7  2821 	XG$Heading$0$0 ==.
      0006A7 22               [24] 2822 	ret
                                   2823 ;------------------------------------------------------------
                                   2824 ;Allocation info for local variables in function 'Ranger'
                                   2825 ;------------------------------------------------------------
                           0006A8  2826 	G$Ranger$0$0 ==.
                           0006A8  2827 	C$LAB4_V45_TESTCODE.c$196$1$146 ==.
                                   2828 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:196: void Ranger(void)  {
                                   2829 ;	-----------------------------------------
                                   2830 ;	 function Ranger
                                   2831 ;	-----------------------------------------
      0006A8                       2832 _Ranger:
                           0006A8  2833 	C$LAB4_V45_TESTCODE.c$197$1$149 ==.
                                   2834 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:197: if (new_range){ //80ms passed
      0006A8 E5*1B            [12] 2835 	mov	a,_new_range
      0006AA 60 37            [24] 2836 	jz	00105$
                           0006AC  2837 	C$LAB4_V45_TESTCODE.c$199$2$150 ==.
                                   2838 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:199: new_range = 0;
      0006AC 75*1B 00         [24] 2839 	mov	_new_range,#0x00
                           0006AF  2840 	C$LAB4_V45_TESTCODE.c$200$2$150 ==.
                                   2841 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:200: range=ReadRanger();
      0006AF 12r06r55         [24] 2842 	lcall	_ReadRanger
      0006B2 85 82*16         [24] 2843 	mov	_range,dpl
      0006B5 85 83*17         [24] 2844 	mov	(_range + 1),dph
                           0006B8  2845 	C$LAB4_V45_TESTCODE.c$201$2$150 ==.
                                   2846 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:201: if(range<65 &&range >0){
      0006B8 C3               [12] 2847 	clr	c
      0006B9 E5*16            [12] 2848 	mov	a,_range
      0006BB 94 41            [12] 2849 	subb	a,#0x41
      0006BD E5*17            [12] 2850 	mov	a,(_range + 1)
      0006BF 94 00            [12] 2851 	subb	a,#0x00
      0006C1 50 08            [24] 2852 	jnc	00102$
      0006C3 E5*16            [12] 2853 	mov	a,_range
      0006C5 45*17            [12] 2854 	orl	a,(_range + 1)
      0006C7 60 02            [24] 2855 	jz	00102$
                           0006C9  2856 	C$LAB4_V45_TESTCODE.c$202$3$151 ==.
                                   2857 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:202: near_obstical++;
      0006C9 05*2F            [12] 2858 	inc	_near_obstical
      0006CB                       2859 00102$:
                           0006CB  2860 	C$LAB4_V45_TESTCODE.c$206$2$150 ==.
                                   2861 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:206: comp_and_range_Data[0] = 0x51 ;  // write 0x51 to reg 0 of the ranger:
      0006CB 75*1E 51         [24] 2862 	mov	_comp_and_range_Data,#0x51
                           0006CE  2863 	C$LAB4_V45_TESTCODE.c$207$2$150 ==.
                                   2864 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:207: i2c_write_data(0xE0, 0, comp_and_range_Data, 1) ; // write one byte of data to reg 0 at addr_r
      0006CE 75*07r1E         [24] 2865 	mov	_i2c_write_data_PARM_3,#_comp_and_range_Data
      0006D1 75*08 00         [24] 2866 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0006D4 75*09 40         [24] 2867 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0006D7 75*06 00         [24] 2868 	mov	_i2c_write_data_PARM_2,#0x00
      0006DA 75*0A 01         [24] 2869 	mov	_i2c_write_data_PARM_4,#0x01
      0006DD 75 82 E0         [24] 2870 	mov	dpl,#0xE0
      0006E0 12r03r8A         [24] 2871 	lcall	_i2c_write_data
      0006E3                       2872 00105$:
                           0006E3  2873 	C$LAB4_V45_TESTCODE.c$210$1$149 ==.
                                   2874 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:210: Drive_Motor();	//even if not new range info, run the drive motor
      0006E3 12r0ArA1         [24] 2875 	lcall	_Drive_Motor
                           0006E6  2876 	C$LAB4_V45_TESTCODE.c$211$1$149 ==.
                           0006E6  2877 	XG$Ranger$0$0 ==.
      0006E6 22               [24] 2878 	ret
                                   2879 ;------------------------------------------------------------
                                   2880 ;Allocation info for local variables in function 'LCD_Print'
                                   2881 ;------------------------------------------------------------
                           0006E7  2882 	G$LCD_Print$0$0 ==.
                           0006E7  2883 	C$LAB4_V45_TESTCODE.c$216$1$149 ==.
                                   2884 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:216: void LCD_Print(void) {
                                   2885 ;	-----------------------------------------
                                   2886 ;	 function LCD_Print
                                   2887 ;	-----------------------------------------
      0006E7                       2888 _LCD_Print:
                           0006E7  2889 	C$LAB4_V45_TESTCODE.c$217$1$153 ==.
                                   2890 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:217: if (new_print){ // Call display function every 400 ms 
      0006E7 E5*12            [12] 2891 	mov	a,_new_print
      0006E9 70 03            [24] 2892 	jnz	00113$
      0006EB 02r07rAB         [24] 2893 	ljmp	00105$
      0006EE                       2894 00113$:
                           0006EE  2895 	C$LAB4_V45_TESTCODE.c$218$2$154 ==.
                                   2896 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:218: new_print =0;
      0006EE 75*12 00         [24] 2897 	mov	_new_print,#0x00
                           0006F1  2898 	C$LAB4_V45_TESTCODE.c$219$2$154 ==.
                                   2899 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:219: lcd_clear();
      0006F1 12r00rF8         [24] 2900 	lcall	_lcd_clear
                           0006F4  2901 	C$LAB4_V45_TESTCODE.c$221$1$153 ==.
                                   2902 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:221: lcd_print("\rHeading: %u", heading/10);
      0006F4 75*00 0A         [24] 2903 	mov	__divuint_PARM_2,#0x0A
      0006F7 75*01 00         [24] 2904 	mov	(__divuint_PARM_2 + 1),#0x00
      0006FA 85*18 82         [24] 2905 	mov	dpl,_heading
      0006FD 85*19 83         [24] 2906 	mov	dph,(_heading + 1)
      000700 12r00r00         [24] 2907 	lcall	__divuint
      000703 AE 82            [24] 2908 	mov	r6,dpl
      000705 AF 83            [24] 2909 	mov	r7,dph
      000707 C0 06            [24] 2910 	push	ar6
      000709 C0 07            [24] 2911 	push	ar7
      00070B 74rAD            [12] 2912 	mov	a,#___str_7
      00070D C0 E0            [24] 2913 	push	acc
      00070F 74s00            [12] 2914 	mov	a,#(___str_7 >> 8)
      000711 C0 E0            [24] 2915 	push	acc
      000713 74 80            [12] 2916 	mov	a,#0x80
      000715 C0 E0            [24] 2917 	push	acc
      000717 12r00r77         [24] 2918 	lcall	_lcd_print
      00071A E5 81            [12] 2919 	mov	a,sp
      00071C 24 FB            [12] 2920 	add	a,#0xfb
      00071E F5 81            [12] 2921 	mov	sp,a
                           000720  2922 	C$LAB4_V45_TESTCODE.c$222$2$154 ==.
                                   2923 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:222: lcd_print("\rRange:%u", range);
      000720 C0*16            [24] 2924 	push	_range
      000722 C0*17            [24] 2925 	push	(_range + 1)
      000724 74rBA            [12] 2926 	mov	a,#___str_8
      000726 C0 E0            [24] 2927 	push	acc
      000728 74s00            [12] 2928 	mov	a,#(___str_8 >> 8)
      00072A C0 E0            [24] 2929 	push	acc
      00072C 74 80            [12] 2930 	mov	a,#0x80
      00072E C0 E0            [24] 2931 	push	acc
      000730 12r00r77         [24] 2932 	lcall	_lcd_print
      000733 E5 81            [12] 2933 	mov	a,sp
      000735 24 FB            [12] 2934 	add	a,#0xfb
      000737 F5 81            [12] 2935 	mov	sp,a
                           000739  2936 	C$LAB4_V45_TESTCODE.c$223$2$154 ==.
                                   2937 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:223: if(Counts==1){	//only call the battery voltage once every second
      000739 74 01            [12] 2938 	mov	a,#0x01
      00073B B5*13 44         [24] 2939 	cjne	a,_Counts,00102$
                           00073E  2940 	C$LAB4_V45_TESTCODE.c$224$3$155 ==.
                                   2941 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:224: battery=(read_AD_input(4));	//switch channels
      00073E 75 82 04         [24] 2942 	mov	dpl,#0x04
      000741 12r0Cr32         [24] 2943 	lcall	_read_AD_input
      000744 AF 82            [24] 2944 	mov	r7,dpl
      000746 8F*30            [24] 2945 	mov	_battery,r7
      000748 75*31 00         [24] 2946 	mov	(_battery + 1),#0x00
                           00074B  2947 	C$LAB4_V45_TESTCODE.c$225$1$153 ==.
                                   2948 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:225: battery =((1000*battery)/256)*15;	//Reads once it has stabilized do calc
      00074B 85*30*00         [24] 2949 	mov	__mulint_PARM_2,_battery
      00074E 85*31*01         [24] 2950 	mov	(__mulint_PARM_2 + 1),(_battery + 1)
      000751 90 03 E8         [24] 2951 	mov	dptr,#0x03E8
      000754 12r00r00         [24] 2952 	lcall	__mulint
      000757 75*00 00         [24] 2953 	mov	__divsint_PARM_2,#0x00
      00075A 75*01 01         [24] 2954 	mov	(__divsint_PARM_2 + 1),#0x01
      00075D 12r00r00         [24] 2955 	lcall	__divsint
      000760 85 82*00         [24] 2956 	mov	__mulint_PARM_2,dpl
      000763 85 83*01         [24] 2957 	mov	(__mulint_PARM_2 + 1),dph
      000766 90 00 0F         [24] 2958 	mov	dptr,#0x000F
      000769 12r00r00         [24] 2959 	lcall	__mulint
      00076C 85 82*30         [24] 2960 	mov	_battery,dpl
      00076F 85 83*31         [24] 2961 	mov	(_battery + 1),dph
                           000772  2962 	C$LAB4_V45_TESTCODE.c$226$3$155 ==.
                                   2963 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:226: keypad = read_AD_input(5);	//Allow it stabilize. using this variable as just a throw away
      000772 75 82 05         [24] 2964 	mov	dpl,#0x05
      000775 12r0Cr32         [24] 2965 	lcall	_read_AD_input
      000778 AF 82            [24] 2966 	mov	r7,dpl
      00077A 8F*32            [24] 2967 	mov	_keypad,r7
      00077C 75*33 00         [24] 2968 	mov	(_keypad + 1),#0x00
                           00077F  2969 	C$LAB4_V45_TESTCODE.c$227$3$155 ==.
                                   2970 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:227: Counts=0;
      00077F 75*13 00         [24] 2971 	mov	_Counts,#0x00
      000782                       2972 00102$:
                           000782  2973 	C$LAB4_V45_TESTCODE.c$229$1$153 ==.
                                   2974 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:229: lcd_print("\rVoltage:%d", 10*battery);	//prints battery voltage to nearest volt
      000782 85*30*00         [24] 2975 	mov	__mulint_PARM_2,_battery
      000785 85*31*01         [24] 2976 	mov	(__mulint_PARM_2 + 1),(_battery + 1)
      000788 90 00 0A         [24] 2977 	mov	dptr,#0x000A
      00078B 12r00r00         [24] 2978 	lcall	__mulint
      00078E AE 82            [24] 2979 	mov	r6,dpl
      000790 AF 83            [24] 2980 	mov	r7,dph
      000792 C0 06            [24] 2981 	push	ar6
      000794 C0 07            [24] 2982 	push	ar7
      000796 74rC4            [12] 2983 	mov	a,#___str_9
      000798 C0 E0            [24] 2984 	push	acc
      00079A 74s00            [12] 2985 	mov	a,#(___str_9 >> 8)
      00079C C0 E0            [24] 2986 	push	acc
      00079E 74 80            [12] 2987 	mov	a,#0x80
      0007A0 C0 E0            [24] 2988 	push	acc
      0007A2 12r00r77         [24] 2989 	lcall	_lcd_print
      0007A5 E5 81            [12] 2990 	mov	a,sp
      0007A7 24 FB            [12] 2991 	add	a,#0xfb
      0007A9 F5 81            [12] 2992 	mov	sp,a
      0007AB                       2993 00105$:
                           0007AB  2994 	C$LAB4_V45_TESTCODE.c$231$1$153 ==.
                           0007AB  2995 	XG$LCD_Print$0$0 ==.
      0007AB 22               [24] 2996 	ret
                                   2997 ;------------------------------------------------------------
                                   2998 ;Allocation info for local variables in function 'choose_gain'
                                   2999 ;------------------------------------------------------------
                           0007AC  3000 	G$choose_gain$0$0 ==.
                           0007AC  3001 	C$LAB4_V45_TESTCODE.c$236$1$153 ==.
                                   3002 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:236: void choose_gain(void) // This function reads desired steering gain from the keypad
                                   3003 ;	-----------------------------------------
                                   3004 ;	 function choose_gain
                                   3005 ;	-----------------------------------------
      0007AC                       3006 _choose_gain:
                           0007AC  3007 	C$LAB4_V45_TESTCODE.c$238$1$157 ==.
                                   3008 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:238: lcd_clear();
      0007AC 12r00rF8         [24] 3009 	lcall	_lcd_clear
                           0007AF  3010 	C$LAB4_V45_TESTCODE.c$239$2$158 ==.
                                   3011 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:239: while (keypad != 35) 
      0007AF                       3012 00106$:
      0007AF 74 23            [12] 3013 	mov	a,#0x23
      0007B1 B5*32 06         [24] 3014 	cjne	a,_keypad,00128$
      0007B4 E4               [12] 3015 	clr	a
      0007B5 B5*33 02         [24] 3016 	cjne	a,(_keypad + 1),00128$
      0007B8 80 6F            [24] 3017 	sjmp	00108$
      0007BA                       3018 00128$:
                           0007BA  3019 	C$LAB4_V45_TESTCODE.c$241$2$158 ==.
                                   3020 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:241: lcd_clear();
      0007BA 12r00rF8         [24] 3021 	lcall	_lcd_clear
                           0007BD  3022 	C$LAB4_V45_TESTCODE.c$242$2$158 ==.
                                   3023 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:242: lcd_print("\rPress 2 to increase gain, press 8 to decrease gain");
      0007BD 74rD0            [12] 3024 	mov	a,#___str_10
      0007BF C0 E0            [24] 3025 	push	acc
      0007C1 74s00            [12] 3026 	mov	a,#(___str_10 >> 8)
      0007C3 C0 E0            [24] 3027 	push	acc
      0007C5 74 80            [12] 3028 	mov	a,#0x80
      0007C7 C0 E0            [24] 3029 	push	acc
      0007C9 12r00r77         [24] 3030 	lcall	_lcd_print
      0007CC 15 81            [12] 3031 	dec	sp
      0007CE 15 81            [12] 3032 	dec	sp
      0007D0 15 81            [12] 3033 	dec	sp
                           0007D2  3034 	C$LAB4_V45_TESTCODE.c$243$2$158 ==.
                                   3035 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:243: lcd_print("\rGain is: %d", steer_gain); // print gain
      0007D2 C0*34            [24] 3036 	push	_steer_gain
      0007D4 C0*35            [24] 3037 	push	(_steer_gain + 1)
      0007D6 74r04            [12] 3038 	mov	a,#___str_11
      0007D8 C0 E0            [24] 3039 	push	acc
      0007DA 74s01            [12] 3040 	mov	a,#(___str_11 >> 8)
      0007DC C0 E0            [24] 3041 	push	acc
      0007DE 74 80            [12] 3042 	mov	a,#0x80
      0007E0 C0 E0            [24] 3043 	push	acc
      0007E2 12r00r77         [24] 3044 	lcall	_lcd_print
      0007E5 E5 81            [12] 3045 	mov	a,sp
      0007E7 24 FB            [12] 3046 	add	a,#0xfb
      0007E9 F5 81            [12] 3047 	mov	sp,a
                           0007EB  3048 	C$LAB4_V45_TESTCODE.c$244$2$158 ==.
                                   3049 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:244: keypad = read_keypad();
      0007EB 12r01r31         [24] 3050 	lcall	_read_keypad
      0007EE E5 82            [12] 3051 	mov	a,dpl
      0007F0 F5*32            [12] 3052 	mov	_keypad,a
      0007F2 33               [12] 3053 	rlc	a
      0007F3 95 E0            [12] 3054 	subb	a,acc
      0007F5 F5*33            [12] 3055 	mov	(_keypad + 1),a
                           0007F7  3056 	C$LAB4_V45_TESTCODE.c$245$2$158 ==.
                                   3057 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:245: pause();
      0007F7 12r0BrDF         [24] 3058 	lcall	_pause
                           0007FA  3059 	C$LAB4_V45_TESTCODE.c$246$2$158 ==.
                                   3060 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:246: if (keypad == 50) 
      0007FA 74 32            [12] 3061 	mov	a,#0x32
      0007FC B5*32 06         [24] 3062 	cjne	a,_keypad,00129$
      0007FF E4               [12] 3063 	clr	a
      000800 B5*33 02         [24] 3064 	cjne	a,(_keypad + 1),00129$
      000803 80 02            [24] 3065 	sjmp	00130$
      000805                       3066 00129$:
      000805 80 0A            [24] 3067 	sjmp	00104$
      000807                       3068 00130$:
                           000807  3069 	C$LAB4_V45_TESTCODE.c$248$3$159 ==.
                                   3070 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:248: steer_gain++;
      000807 05*34            [12] 3071 	inc	_steer_gain
      000809 E4               [12] 3072 	clr	a
      00080A B5*34 A2         [24] 3073 	cjne	a,_steer_gain,00106$
      00080D 05*35            [12] 3074 	inc	(_steer_gain + 1)
      00080F 80 9E            [24] 3075 	sjmp	00106$
      000811                       3076 00104$:
                           000811  3077 	C$LAB4_V45_TESTCODE.c$250$2$158 ==.
                                   3078 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:250: else if (keypad == 56) 
      000811 74 38            [12] 3079 	mov	a,#0x38
      000813 B5*32 06         [24] 3080 	cjne	a,_keypad,00132$
      000816 E4               [12] 3081 	clr	a
      000817 B5*33 02         [24] 3082 	cjne	a,(_keypad + 1),00132$
      00081A 80 02            [24] 3083 	sjmp	00133$
      00081C                       3084 00132$:
      00081C 80 91            [24] 3085 	sjmp	00106$
      00081E                       3086 00133$:
                           00081E  3087 	C$LAB4_V45_TESTCODE.c$252$3$160 ==.
                                   3088 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:252: steer_gain--; 
      00081E 15*34            [12] 3089 	dec	_steer_gain
      000820 74 FF            [12] 3090 	mov	a,#0xFF
      000822 B5*34 02         [24] 3091 	cjne	a,_steer_gain,00134$
      000825 15*35            [12] 3092 	dec	(_steer_gain + 1)
      000827                       3093 00134$:
      000827 80 86            [24] 3094 	sjmp	00106$
      000829                       3095 00108$:
                           000829  3096 	C$LAB4_V45_TESTCODE.c$255$1$157 ==.
                                   3097 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:255: if(steer_gain<=0){
      000829 E5*34            [12] 3098 	mov	a,_steer_gain
      00082B 45*35            [12] 3099 	orl	a,(_steer_gain + 1)
                           00082D  3100 	C$LAB4_V45_TESTCODE.c$256$2$161 ==.
                                   3101 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:256: steer_gain=1;
      00082D 70 05            [24] 3102 	jnz	00110$
      00082F 75*34 01         [24] 3103 	mov	_steer_gain,#0x01
      000832 F5*35            [12] 3104 	mov	(_steer_gain + 1),a
      000834                       3105 00110$:
                           000834  3106 	C$LAB4_V45_TESTCODE.c$258$1$157 ==.
                                   3107 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:258: lcd_clear();
      000834 12r00rF8         [24] 3108 	lcall	_lcd_clear
                           000837  3109 	C$LAB4_V45_TESTCODE.c$259$1$157 ==.
                                   3110 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:259: lcd_print("\rYour gain is: %d\n", steer_gain);
      000837 C0*34            [24] 3111 	push	_steer_gain
      000839 C0*35            [24] 3112 	push	(_steer_gain + 1)
      00083B 74r11            [12] 3113 	mov	a,#___str_12
      00083D C0 E0            [24] 3114 	push	acc
      00083F 74s01            [12] 3115 	mov	a,#(___str_12 >> 8)
      000841 C0 E0            [24] 3116 	push	acc
      000843 74 80            [12] 3117 	mov	a,#0x80
      000845 C0 E0            [24] 3118 	push	acc
      000847 12r00r77         [24] 3119 	lcall	_lcd_print
      00084A E5 81            [12] 3120 	mov	a,sp
      00084C 24 FB            [12] 3121 	add	a,#0xfb
      00084E F5 81            [12] 3122 	mov	sp,a
                           000850  3123 	C$LAB4_V45_TESTCODE.c$261$1$157 ==.
                                   3124 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:261: keypad = 0;
      000850 E4               [12] 3125 	clr	a
      000851 F5*32            [12] 3126 	mov	_keypad,a
      000853 F5*33            [12] 3127 	mov	(_keypad + 1),a
                           000855  3128 	C$LAB4_V45_TESTCODE.c$263$1$157 ==.
                           000855  3129 	XG$choose_gain$0$0 ==.
      000855 22               [24] 3130 	ret
                                   3131 ;------------------------------------------------------------
                                   3132 ;Allocation info for local variables in function 'choose_heading'
                                   3133 ;------------------------------------------------------------
                           000856  3134 	G$choose_heading$0$0 ==.
                           000856  3135 	C$LAB4_V45_TESTCODE.c$267$1$157 ==.
                                   3136 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:267: int choose_heading(void){ // This function reads desired heading from the keypad
                                   3137 ;	-----------------------------------------
                                   3138 ;	 function choose_heading
                                   3139 ;	-----------------------------------------
      000856                       3140 _choose_heading:
                           000856  3141 	C$LAB4_V45_TESTCODE.c$269$1$163 ==.
                                   3142 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:269: lcd_clear();
      000856 12r00rF8         [24] 3143 	lcall	_lcd_clear
                           000859  3144 	C$LAB4_V45_TESTCODE.c$270$1$163 ==.
                                   3145 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:270: lcd_print("Press 1 for list or Press 2 for a specific value");
      000859 74r24            [12] 3146 	mov	a,#___str_13
      00085B C0 E0            [24] 3147 	push	acc
      00085D 74s01            [12] 3148 	mov	a,#(___str_13 >> 8)
      00085F C0 E0            [24] 3149 	push	acc
      000861 74 80            [12] 3150 	mov	a,#0x80
      000863 C0 E0            [24] 3151 	push	acc
      000865 12r00r77         [24] 3152 	lcall	_lcd_print
      000868 15 81            [12] 3153 	dec	sp
      00086A 15 81            [12] 3154 	dec	sp
      00086C 15 81            [12] 3155 	dec	sp
                           00086E  3156 	C$LAB4_V45_TESTCODE.c$271$1$163 ==.
                                   3157 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:271: keypad=kpd_input(0); 	
      00086E 75 82 00         [24] 3158 	mov	dpl,#0x00
      000871 12r01rB1         [24] 3159 	lcall	_kpd_input
      000874 85 82*32         [24] 3160 	mov	_keypad,dpl
      000877 85 83*33         [24] 3161 	mov	(_keypad + 1),dph
                           00087A  3162 	C$LAB4_V45_TESTCODE.c$272$1$163 ==.
                                   3163 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:272: if(keypad==1) {	
      00087A 74 01            [12] 3164 	mov	a,#0x01
      00087C B5*32 06         [24] 3165 	cjne	a,_keypad,00134$
      00087F E4               [12] 3166 	clr	a
      000880 B5*33 02         [24] 3167 	cjne	a,(_keypad + 1),00134$
      000883 80 02            [24] 3168 	sjmp	00135$
      000885                       3169 00134$:
      000885 80 71            [24] 3170 	sjmp	00112$
      000887                       3171 00135$:
                           000887  3172 	C$LAB4_V45_TESTCODE.c$273$2$164 ==.
                                   3173 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:273: lcd_clear();	//must clear screen before filling with each new print statment
      000887 12r00rF8         [24] 3174 	lcall	_lcd_clear
                           00088A  3175 	C$LAB4_V45_TESTCODE.c$274$2$164 ==.
                                   3176 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:274: lcd_print("Press 2 for 0 deg, 6 for 90, 8 for 180, 4 for 270");
      00088A 74r55            [12] 3177 	mov	a,#___str_14
      00088C C0 E0            [24] 3178 	push	acc
      00088E 74s01            [12] 3179 	mov	a,#(___str_14 >> 8)
      000890 C0 E0            [24] 3180 	push	acc
      000892 74 80            [12] 3181 	mov	a,#0x80
      000894 C0 E0            [24] 3182 	push	acc
      000896 12r00r77         [24] 3183 	lcall	_lcd_print
      000899 15 81            [12] 3184 	dec	sp
      00089B 15 81            [12] 3185 	dec	sp
      00089D 15 81            [12] 3186 	dec	sp
                           00089F  3187 	C$LAB4_V45_TESTCODE.c$275$2$164 ==.
                                   3188 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:275: keypad=kpd_input(0);
      00089F 75 82 00         [24] 3189 	mov	dpl,#0x00
      0008A2 12r01rB1         [24] 3190 	lcall	_kpd_input
      0008A5 85 82*32         [24] 3191 	mov	_keypad,dpl
      0008A8 85 83*33         [24] 3192 	mov	(_keypad + 1),dph
                           0008AB  3193 	C$LAB4_V45_TESTCODE.c$276$2$164 ==.
                                   3194 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:276: if(keypad==2)
      0008AB 74 02            [12] 3195 	mov	a,#0x02
      0008AD B5*32 06         [24] 3196 	cjne	a,_keypad,00136$
      0008B0 E4               [12] 3197 	clr	a
      0008B1 B5*33 02         [24] 3198 	cjne	a,(_keypad + 1),00136$
      0008B4 80 02            [24] 3199 	sjmp	00137$
      0008B6                       3200 00136$:
      0008B6 80 05            [24] 3201 	sjmp	00102$
      0008B8                       3202 00137$:
                           0008B8  3203 	C$LAB4_V45_TESTCODE.c$277$2$164 ==.
                                   3204 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:277: desired_heading=0;
      0008B8 E4               [12] 3205 	clr	a
      0008B9 F5*2B            [12] 3206 	mov	_desired_heading,a
      0008BB F5*2C            [12] 3207 	mov	(_desired_heading + 1),a
      0008BD                       3208 00102$:
                           0008BD  3209 	C$LAB4_V45_TESTCODE.c$278$2$164 ==.
                                   3210 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:278: if(keypad==6)
      0008BD 74 06            [12] 3211 	mov	a,#0x06
      0008BF B5*32 06         [24] 3212 	cjne	a,_keypad,00138$
      0008C2 E4               [12] 3213 	clr	a
      0008C3 B5*33 02         [24] 3214 	cjne	a,(_keypad + 1),00138$
      0008C6 80 02            [24] 3215 	sjmp	00139$
      0008C8                       3216 00138$:
      0008C8 80 06            [24] 3217 	sjmp	00104$
      0008CA                       3218 00139$:
                           0008CA  3219 	C$LAB4_V45_TESTCODE.c$279$2$164 ==.
                                   3220 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:279: desired_heading=900;
      0008CA 75*2B 84         [24] 3221 	mov	_desired_heading,#0x84
      0008CD 75*2C 03         [24] 3222 	mov	(_desired_heading + 1),#0x03
      0008D0                       3223 00104$:
                           0008D0  3224 	C$LAB4_V45_TESTCODE.c$280$2$164 ==.
                                   3225 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:280: if(keypad==8)
      0008D0 74 08            [12] 3226 	mov	a,#0x08
      0008D2 B5*32 06         [24] 3227 	cjne	a,_keypad,00140$
      0008D5 E4               [12] 3228 	clr	a
      0008D6 B5*33 02         [24] 3229 	cjne	a,(_keypad + 1),00140$
      0008D9 80 02            [24] 3230 	sjmp	00141$
      0008DB                       3231 00140$:
      0008DB 80 06            [24] 3232 	sjmp	00106$
      0008DD                       3233 00141$:
                           0008DD  3234 	C$LAB4_V45_TESTCODE.c$281$2$164 ==.
                                   3235 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:281: desired_heading=1800;
      0008DD 75*2B 08         [24] 3236 	mov	_desired_heading,#0x08
      0008E0 75*2C 07         [24] 3237 	mov	(_desired_heading + 1),#0x07
      0008E3                       3238 00106$:
                           0008E3  3239 	C$LAB4_V45_TESTCODE.c$282$2$164 ==.
                                   3240 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:282: if(keypad==4)	
      0008E3 74 04            [12] 3241 	mov	a,#0x04
      0008E5 B5*32 06         [24] 3242 	cjne	a,_keypad,00142$
      0008E8 E4               [12] 3243 	clr	a
      0008E9 B5*33 02         [24] 3244 	cjne	a,(_keypad + 1),00142$
      0008EC 80 02            [24] 3245 	sjmp	00143$
      0008EE                       3246 00142$:
      0008EE 80 48            [24] 3247 	sjmp	00113$
      0008F0                       3248 00143$:
                           0008F0  3249 	C$LAB4_V45_TESTCODE.c$283$2$164 ==.
                                   3250 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:283: desired_heading=2700;
      0008F0 75*2B 8C         [24] 3251 	mov	_desired_heading,#0x8C
      0008F3 75*2C 0A         [24] 3252 	mov	(_desired_heading + 1),#0x0A
      0008F6 80 40            [24] 3253 	sjmp	00113$
      0008F8                       3254 00112$:
                           0008F8  3255 	C$LAB4_V45_TESTCODE.c$285$1$163 ==.
                                   3256 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:285: else if(keypad==2)
      0008F8 74 02            [12] 3257 	mov	a,#0x02
      0008FA B5*32 06         [24] 3258 	cjne	a,_keypad,00144$
      0008FD E4               [12] 3259 	clr	a
      0008FE B5*33 02         [24] 3260 	cjne	a,(_keypad + 1),00144$
      000901 80 02            [24] 3261 	sjmp	00145$
      000903                       3262 00144$:
      000903 80 33            [24] 3263 	sjmp	00113$
      000905                       3264 00145$:
                           000905  3265 	C$LAB4_V45_TESTCODE.c$287$2$165 ==.
                                   3266 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:287: lcd_print("\rEnter your desired heading between 0 and 360:\n");
      000905 74r87            [12] 3267 	mov	a,#___str_15
      000907 C0 E0            [24] 3268 	push	acc
      000909 74s01            [12] 3269 	mov	a,#(___str_15 >> 8)
      00090B C0 E0            [24] 3270 	push	acc
      00090D 74 80            [12] 3271 	mov	a,#0x80
      00090F C0 E0            [24] 3272 	push	acc
      000911 12r00r77         [24] 3273 	lcall	_lcd_print
      000914 15 81            [12] 3274 	dec	sp
      000916 15 81            [12] 3275 	dec	sp
      000918 15 81            [12] 3276 	dec	sp
                           00091A  3277 	C$LAB4_V45_TESTCODE.c$288$2$165 ==.
                                   3278 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:288: desired_heading = kpd_input(1);
      00091A 75 82 01         [24] 3279 	mov	dpl,#0x01
      00091D 12r01rB1         [24] 3280 	lcall	_kpd_input
      000920 85 82*2B         [24] 3281 	mov	_desired_heading,dpl
      000923 85 83*2C         [24] 3282 	mov	(_desired_heading + 1),dph
                           000926  3283 	C$LAB4_V45_TESTCODE.c$289$1$163 ==.
                                   3284 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:289: desired_heading=desired_heading*10;
      000926 85*2B*00         [24] 3285 	mov	__mulint_PARM_2,_desired_heading
      000929 85*2C*01         [24] 3286 	mov	(__mulint_PARM_2 + 1),(_desired_heading + 1)
      00092C 90 00 0A         [24] 3287 	mov	dptr,#0x000A
      00092F 12r00r00         [24] 3288 	lcall	__mulint
      000932 85 82*2B         [24] 3289 	mov	_desired_heading,dpl
      000935 85 83*2C         [24] 3290 	mov	(_desired_heading + 1),dph
      000938                       3291 00113$:
                           000938  3292 	C$LAB4_V45_TESTCODE.c$291$1$163 ==.
                                   3293 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:291: pause();
      000938 12r0BrDF         [24] 3294 	lcall	_pause
                           00093B  3295 	C$LAB4_V45_TESTCODE.c$292$1$163 ==.
                                   3296 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:292: lcd_clear();
      00093B 12r00rF8         [24] 3297 	lcall	_lcd_clear
                           00093E  3298 	C$LAB4_V45_TESTCODE.c$294$1$163 ==.
                                   3299 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:294: return desired_heading;
      00093E 85*2B 82         [24] 3300 	mov	dpl,_desired_heading
      000941 85*2C 83         [24] 3301 	mov	dph,(_desired_heading + 1)
                           000944  3302 	C$LAB4_V45_TESTCODE.c$295$1$163 ==.
                           000944  3303 	XG$choose_heading$0$0 ==.
      000944 22               [24] 3304 	ret
                                   3305 ;------------------------------------------------------------
                                   3306 ;Allocation info for local variables in function 'choose_speed'
                                   3307 ;------------------------------------------------------------
                           000945  3308 	G$choose_speed$0$0 ==.
                           000945  3309 	C$LAB4_V45_TESTCODE.c$301$1$163 ==.
                                   3310 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:301: void choose_speed(void){
                                   3311 ;	-----------------------------------------
                                   3312 ;	 function choose_speed
                                   3313 ;	-----------------------------------------
      000945                       3314 _choose_speed:
                           000945  3315 	C$LAB4_V45_TESTCODE.c$302$1$167 ==.
                                   3316 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:302: lcd_clear();
      000945 12r00rF8         [24] 3317 	lcall	_lcd_clear
                           000948  3318 	C$LAB4_V45_TESTCODE.c$303$1$167 ==.
                                   3319 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:303: lcd_print("To set speed, adjust pMeter now");
      000948 74rB7            [12] 3320 	mov	a,#___str_16
      00094A C0 E0            [24] 3321 	push	acc
      00094C 74s01            [12] 3322 	mov	a,#(___str_16 >> 8)
      00094E C0 E0            [24] 3323 	push	acc
      000950 74 80            [12] 3324 	mov	a,#0x80
      000952 C0 E0            [24] 3325 	push	acc
      000954 12r00r77         [24] 3326 	lcall	_lcd_print
      000957 15 81            [12] 3327 	dec	sp
      000959 15 81            [12] 3328 	dec	sp
      00095B 15 81            [12] 3329 	dec	sp
                           00095D  3330 	C$LAB4_V45_TESTCODE.c$304$1$167 ==.
                                   3331 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:304: lcd_print("\n3 seconds to do so");
      00095D 74rD7            [12] 3332 	mov	a,#___str_17
      00095F C0 E0            [24] 3333 	push	acc
      000961 74s01            [12] 3334 	mov	a,#(___str_17 >> 8)
      000963 C0 E0            [24] 3335 	push	acc
      000965 74 80            [12] 3336 	mov	a,#0x80
      000967 C0 E0            [24] 3337 	push	acc
      000969 12r00r77         [24] 3338 	lcall	_lcd_print
      00096C 15 81            [12] 3339 	dec	sp
      00096E 15 81            [12] 3340 	dec	sp
      000970 15 81            [12] 3341 	dec	sp
                           000972  3342 	C$LAB4_V45_TESTCODE.c$305$1$167 ==.
                                   3343 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:305: pause();
      000972 12r0BrDF         [24] 3344 	lcall	_pause
                           000975  3345 	C$LAB4_V45_TESTCODE.c$306$1$167 ==.
                                   3346 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:306: lcd_clear();
      000975 12r00rF8         [24] 3347 	lcall	_lcd_clear
                           000978  3348 	C$LAB4_V45_TESTCODE.c$307$1$167 ==.
                                   3349 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:307: lcd_print("To set speed, adjust pMeter now");
      000978 74rB7            [12] 3350 	mov	a,#___str_16
      00097A C0 E0            [24] 3351 	push	acc
      00097C 74s01            [12] 3352 	mov	a,#(___str_16 >> 8)
      00097E C0 E0            [24] 3353 	push	acc
      000980 74 80            [12] 3354 	mov	a,#0x80
      000982 C0 E0            [24] 3355 	push	acc
      000984 12r00r77         [24] 3356 	lcall	_lcd_print
      000987 15 81            [12] 3357 	dec	sp
      000989 15 81            [12] 3358 	dec	sp
      00098B 15 81            [12] 3359 	dec	sp
                           00098D  3360 	C$LAB4_V45_TESTCODE.c$308$1$167 ==.
                                   3361 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:308: lcd_print("\n2 seconds to do so");
      00098D 74rEB            [12] 3362 	mov	a,#___str_18
      00098F C0 E0            [24] 3363 	push	acc
      000991 74s01            [12] 3364 	mov	a,#(___str_18 >> 8)
      000993 C0 E0            [24] 3365 	push	acc
      000995 74 80            [12] 3366 	mov	a,#0x80
      000997 C0 E0            [24] 3367 	push	acc
      000999 12r00r77         [24] 3368 	lcall	_lcd_print
      00099C 15 81            [12] 3369 	dec	sp
      00099E 15 81            [12] 3370 	dec	sp
      0009A0 15 81            [12] 3371 	dec	sp
                           0009A2  3372 	C$LAB4_V45_TESTCODE.c$309$1$167 ==.
                                   3373 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:309: pause();
      0009A2 12r0BrDF         [24] 3374 	lcall	_pause
                           0009A5  3375 	C$LAB4_V45_TESTCODE.c$310$1$167 ==.
                                   3376 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:310: lcd_clear();
      0009A5 12r00rF8         [24] 3377 	lcall	_lcd_clear
                           0009A8  3378 	C$LAB4_V45_TESTCODE.c$311$1$167 ==.
                                   3379 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:311: lcd_print("To set speed, adjust pMeter now");
      0009A8 74rB7            [12] 3380 	mov	a,#___str_16
      0009AA C0 E0            [24] 3381 	push	acc
      0009AC 74s01            [12] 3382 	mov	a,#(___str_16 >> 8)
      0009AE C0 E0            [24] 3383 	push	acc
      0009B0 74 80            [12] 3384 	mov	a,#0x80
      0009B2 C0 E0            [24] 3385 	push	acc
      0009B4 12r00r77         [24] 3386 	lcall	_lcd_print
      0009B7 15 81            [12] 3387 	dec	sp
      0009B9 15 81            [12] 3388 	dec	sp
      0009BB 15 81            [12] 3389 	dec	sp
                           0009BD  3390 	C$LAB4_V45_TESTCODE.c$312$1$167 ==.
                                   3391 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:312: lcd_print("\n1 seconds to do so");
      0009BD 74rFF            [12] 3392 	mov	a,#___str_19
      0009BF C0 E0            [24] 3393 	push	acc
      0009C1 74s01            [12] 3394 	mov	a,#(___str_19 >> 8)
      0009C3 C0 E0            [24] 3395 	push	acc
      0009C5 74 80            [12] 3396 	mov	a,#0x80
      0009C7 C0 E0            [24] 3397 	push	acc
      0009C9 12r00r77         [24] 3398 	lcall	_lcd_print
      0009CC 15 81            [12] 3399 	dec	sp
      0009CE 15 81            [12] 3400 	dec	sp
      0009D0 15 81            [12] 3401 	dec	sp
                           0009D2  3402 	C$LAB4_V45_TESTCODE.c$313$1$167 ==.
                                   3403 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:313: pause();
      0009D2 12r0BrDF         [24] 3404 	lcall	_pause
                           0009D5  3405 	C$LAB4_V45_TESTCODE.c$315$1$167 ==.
                           0009D5  3406 	XG$choose_speed$0$0 ==.
      0009D5 22               [24] 3407 	ret
                                   3408 ;------------------------------------------------------------
                                   3409 ;Allocation info for local variables in function 'Steering_Servo'
                                   3410 ;------------------------------------------------------------
                           0009D6  3411 	G$Steering_Servo$0$0 ==.
                           0009D6  3412 	C$LAB4_V45_TESTCODE.c$320$1$167 ==.
                                   3413 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:320: void Steering_Servo() {	//function that steers using compass
                                   3414 ;	-----------------------------------------
                                   3415 ;	 function Steering_Servo
                                   3416 ;	-----------------------------------------
      0009D6                       3417 _Steering_Servo:
                           0009D6  3418 	C$LAB4_V45_TESTCODE.c$322$1$168 ==.
                                   3419 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:322: error1 = desired_heading - heading;
      0009D6 E5*2B            [12] 3420 	mov	a,_desired_heading
      0009D8 C3               [12] 3421 	clr	c
      0009D9 95*18            [12] 3422 	subb	a,_heading
      0009DB F5*2D            [12] 3423 	mov	_error1,a
      0009DD E5*2C            [12] 3424 	mov	a,(_desired_heading + 1)
      0009DF 95*19            [12] 3425 	subb	a,(_heading + 1)
      0009E1 F5*2E            [12] 3426 	mov	(_error1 + 1),a
                           0009E3  3427 	C$LAB4_V45_TESTCODE.c$325$1$168 ==.
                                   3428 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:325: if (abs(error1)<=abs(error1+3600))  {
      0009E3 85*2D 82         [24] 3429 	mov	dpl,_error1
      0009E6 85*2E 83         [24] 3430 	mov	dph,(_error1 + 1)
      0009E9 12r00r00         [24] 3431 	lcall	_abs
      0009EC AE 82            [24] 3432 	mov	r6,dpl
      0009EE AF 83            [24] 3433 	mov	r7,dph
      0009F0 74 10            [12] 3434 	mov	a,#0x10
      0009F2 25*2D            [12] 3435 	add	a,_error1
      0009F4 F5 82            [12] 3436 	mov	dpl,a
      0009F6 74 0E            [12] 3437 	mov	a,#0x0E
      0009F8 35*2E            [12] 3438 	addc	a,(_error1 + 1)
      0009FA F5 83            [12] 3439 	mov	dph,a
      0009FC C0 07            [24] 3440 	push	ar7
      0009FE C0 06            [24] 3441 	push	ar6
      000A00 12r00r00         [24] 3442 	lcall	_abs
      000A03 AC 82            [24] 3443 	mov	r4,dpl
      000A05 AD 83            [24] 3444 	mov	r5,dph
      000A07 D0 06            [24] 3445 	pop	ar6
      000A09 D0 07            [24] 3446 	pop	ar7
      000A0B C3               [12] 3447 	clr	c
      000A0C EC               [12] 3448 	mov	a,r4
      000A0D 9E               [12] 3449 	subb	a,r6
      000A0E ED               [12] 3450 	mov	a,r5
      000A0F 64 80            [12] 3451 	xrl	a,#0x80
      000A11 8F F0            [24] 3452 	mov	b,r7
      000A13 63 F0 80         [24] 3453 	xrl	b,#0x80
      000A16 95 F0            [12] 3454 	subb	a,b
      000A18 40 25            [24] 3455 	jc	00102$
                           000A1A  3456 	C$LAB4_V45_TESTCODE.c$326$2$169 ==.
                                   3457 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:326: STEER_PW = (steer_gain*error1)/2 + PW_CENTER;	//use the smaller error to calcualte the servo setting
      000A1A 85*2D*00         [24] 3458 	mov	__mulint_PARM_2,_error1
      000A1D 85*2E*01         [24] 3459 	mov	(__mulint_PARM_2 + 1),(_error1 + 1)
      000A20 85*34 82         [24] 3460 	mov	dpl,_steer_gain
      000A23 85*35 83         [24] 3461 	mov	dph,(_steer_gain + 1)
      000A26 12r00r00         [24] 3462 	lcall	__mulint
      000A29 AE 82            [24] 3463 	mov	r6,dpl
      000A2B E5 83            [12] 3464 	mov	a,dph
      000A2D C3               [12] 3465 	clr	c
      000A2E 13               [12] 3466 	rrc	a
      000A2F CE               [12] 3467 	xch	a,r6
      000A30 13               [12] 3468 	rrc	a
      000A31 CE               [12] 3469 	xch	a,r6
      000A32 FF               [12] 3470 	mov	r7,a
      000A33 E5*25            [12] 3471 	mov	a,_PW_CENTER
      000A35 2E               [12] 3472 	add	a,r6
      000A36 F5*29            [12] 3473 	mov	_STEER_PW,a
      000A38 E5*26            [12] 3474 	mov	a,(_PW_CENTER + 1)
      000A3A 3F               [12] 3475 	addc	a,r7
      000A3B F5*2A            [12] 3476 	mov	(_STEER_PW + 1),a
      000A3D 80 2B            [24] 3477 	sjmp	00103$
      000A3F                       3478 00102$:
                           000A3F  3479 	C$LAB4_V45_TESTCODE.c$329$2$170 ==.
                                   3480 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:329: STEER_PW = (steer_gain*(error1+3600))/2 + PW_CENTER;
      000A3F 74 10            [12] 3481 	mov	a,#0x10
      000A41 25*2D            [12] 3482 	add	a,_error1
      000A43 FE               [12] 3483 	mov	r6,a
      000A44 74 0E            [12] 3484 	mov	a,#0x0E
      000A46 35*2E            [12] 3485 	addc	a,(_error1 + 1)
      000A48 FF               [12] 3486 	mov	r7,a
      000A49 8E*00            [24] 3487 	mov	__mulint_PARM_2,r6
      000A4B 8F*01            [24] 3488 	mov	(__mulint_PARM_2 + 1),r7
      000A4D 85*34 82         [24] 3489 	mov	dpl,_steer_gain
      000A50 85*35 83         [24] 3490 	mov	dph,(_steer_gain + 1)
      000A53 12r00r00         [24] 3491 	lcall	__mulint
      000A56 AE 82            [24] 3492 	mov	r6,dpl
      000A58 E5 83            [12] 3493 	mov	a,dph
      000A5A C3               [12] 3494 	clr	c
      000A5B 13               [12] 3495 	rrc	a
      000A5C CE               [12] 3496 	xch	a,r6
      000A5D 13               [12] 3497 	rrc	a
      000A5E CE               [12] 3498 	xch	a,r6
      000A5F FF               [12] 3499 	mov	r7,a
      000A60 E5*25            [12] 3500 	mov	a,_PW_CENTER
      000A62 2E               [12] 3501 	add	a,r6
      000A63 F5*29            [12] 3502 	mov	_STEER_PW,a
      000A65 E5*26            [12] 3503 	mov	a,(_PW_CENTER + 1)
      000A67 3F               [12] 3504 	addc	a,r7
      000A68 F5*2A            [12] 3505 	mov	(_STEER_PW + 1),a
      000A6A                       3506 00103$:
                           000A6A  3507 	C$LAB4_V45_TESTCODE.c$331$1$168 ==.
                                   3508 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:331: if (STEER_PW < PW_MIN)  {	//if steering is set to below the minimum, set servo to minum postion
      000A6A C3               [12] 3509 	clr	c
      000A6B E5*29            [12] 3510 	mov	a,_STEER_PW
      000A6D 95*23            [12] 3511 	subb	a,_PW_MIN
      000A6F E5*2A            [12] 3512 	mov	a,(_STEER_PW + 1)
      000A71 95*24            [12] 3513 	subb	a,(_PW_MIN + 1)
      000A73 50 06            [24] 3514 	jnc	00105$
                           000A75  3515 	C$LAB4_V45_TESTCODE.c$332$2$171 ==.
                                   3516 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:332: STEER_PW = PW_MIN;
      000A75 85*23*29         [24] 3517 	mov	_STEER_PW,_PW_MIN
      000A78 85*24*2A         [24] 3518 	mov	(_STEER_PW + 1),(_PW_MIN + 1)
      000A7B                       3519 00105$:
                           000A7B  3520 	C$LAB4_V45_TESTCODE.c$334$1$168 ==.
                                   3521 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:334: if (STEER_PW > PW_MAX)  { //if steering is set to above the maximum, set servo to max postion
      000A7B C3               [12] 3522 	clr	c
      000A7C E5*21            [12] 3523 	mov	a,_PW_MAX
      000A7E 95*29            [12] 3524 	subb	a,_STEER_PW
      000A80 E5*22            [12] 3525 	mov	a,(_PW_MAX + 1)
      000A82 95*2A            [12] 3526 	subb	a,(_STEER_PW + 1)
      000A84 50 06            [24] 3527 	jnc	00107$
                           000A86  3528 	C$LAB4_V45_TESTCODE.c$335$2$172 ==.
                                   3529 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:335: STEER_PW = PW_MAX;
      000A86 85*21*29         [24] 3530 	mov	_STEER_PW,_PW_MAX
      000A89 85*22*2A         [24] 3531 	mov	(_STEER_PW + 1),(_PW_MAX + 1)
      000A8C                       3532 00107$:
                           000A8C  3533 	C$LAB4_V45_TESTCODE.c$338$1$168 ==.
                                   3534 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:338: PCA0CPL0 = 0xFFFF - STEER_PW;
      000A8C AF*29            [24] 3535 	mov	r7,_STEER_PW
      000A8E 74 FF            [12] 3536 	mov	a,#0xFF
      000A90 C3               [12] 3537 	clr	c
      000A91 9F               [12] 3538 	subb	a,r7
      000A92 F5 EA            [12] 3539 	mov	_PCA0CPL0,a
                           000A94  3540 	C$LAB4_V45_TESTCODE.c$339$1$168 ==.
                                   3541 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:339: PCA0CPH0 = (0xFFFF - STEER_PW) >> 8;	//set servo values
      000A94 74 FF            [12] 3542 	mov	a,#0xFF
      000A96 C3               [12] 3543 	clr	c
      000A97 95*29            [12] 3544 	subb	a,_STEER_PW
      000A99 74 FF            [12] 3545 	mov	a,#0xFF
      000A9B 95*2A            [12] 3546 	subb	a,(_STEER_PW + 1)
      000A9D FF               [12] 3547 	mov	r7,a
      000A9E 8F FA            [24] 3548 	mov	_PCA0CPH0,r7
                           000AA0  3549 	C$LAB4_V45_TESTCODE.c$340$1$168 ==.
                           000AA0  3550 	XG$Steering_Servo$0$0 ==.
      000AA0 22               [24] 3551 	ret
                                   3552 ;------------------------------------------------------------
                                   3553 ;Allocation info for local variables in function 'Drive_Motor'
                                   3554 ;------------------------------------------------------------
                           000AA1  3555 	G$Drive_Motor$0$0 ==.
                           000AA1  3556 	C$LAB4_V45_TESTCODE.c$343$1$168 ==.
                                   3557 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:343: void Drive_Motor(void){
                                   3558 ;	-----------------------------------------
                                   3559 ;	 function Drive_Motor
                                   3560 ;	-----------------------------------------
      000AA1                       3561 _Drive_Motor:
                           000AA1  3562 	C$LAB4_V45_TESTCODE.c$344$1$174 ==.
                                   3563 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:344: if (range<=65 &&range>0) {
      000AA1 C3               [12] 3564 	clr	c
      000AA2 74 41            [12] 3565 	mov	a,#0x41
      000AA4 95*16            [12] 3566 	subb	a,_range
      000AA6 E4               [12] 3567 	clr	a
      000AA7 95*17            [12] 3568 	subb	a,(_range + 1)
      000AA9 50 03            [24] 3569 	jnc	00135$
      000AAB 02r0Br34         [24] 3570 	ljmp	00108$
      000AAE                       3571 00135$:
      000AAE E5*16            [12] 3572 	mov	a,_range
      000AB0 45*17            [12] 3573 	orl	a,(_range + 1)
      000AB2 70 03            [24] 3574 	jnz	00136$
      000AB4 02r0Br34         [24] 3575 	ljmp	00108$
      000AB7                       3576 00136$:
                           000AB7  3577 	C$LAB4_V45_TESTCODE.c$345$2$175 ==.
                                   3578 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:345: if(near_obstical<30){
      000AB7 74 E2            [12] 3579 	mov	a,#0x100 - 0x1E
      000AB9 25*2F            [12] 3580 	add	a,_near_obstical
      000ABB 40 6F            [24] 3581 	jc	00102$
                           000ABD  3582 	C$LAB4_V45_TESTCODE.c$346$3$176 ==.
                                   3583 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:346: MOTOR_PW_AND_STEER_PW = 2028+read_AD_input(4)*5.8;//Normal speed
      000ABD 75 82 04         [24] 3584 	mov	dpl,#0x04
      000AC0 12r0Cr32         [24] 3585 	lcall	_read_AD_input
      000AC3 12r00r00         [24] 3586 	lcall	___uchar2fs
      000AC6 AC 82            [24] 3587 	mov	r4,dpl
      000AC8 AD 83            [24] 3588 	mov	r5,dph
      000ACA AE F0            [24] 3589 	mov	r6,b
      000ACC FF               [12] 3590 	mov	r7,a
      000ACD C0 04            [24] 3591 	push	ar4
      000ACF C0 05            [24] 3592 	push	ar5
      000AD1 C0 06            [24] 3593 	push	ar6
      000AD3 C0 07            [24] 3594 	push	ar7
      000AD5 90 99 9A         [24] 3595 	mov	dptr,#0x999A
      000AD8 75 F0 B9         [24] 3596 	mov	b,#0xB9
      000ADB 74 40            [12] 3597 	mov	a,#0x40
      000ADD 12r00r00         [24] 3598 	lcall	___fsmul
      000AE0 AC 82            [24] 3599 	mov	r4,dpl
      000AE2 AD 83            [24] 3600 	mov	r5,dph
      000AE4 AE F0            [24] 3601 	mov	r6,b
      000AE6 FF               [12] 3602 	mov	r7,a
      000AE7 E5 81            [12] 3603 	mov	a,sp
      000AE9 24 FC            [12] 3604 	add	a,#0xfc
      000AEB F5 81            [12] 3605 	mov	sp,a
      000AED E4               [12] 3606 	clr	a
      000AEE C0 E0            [24] 3607 	push	acc
      000AF0 74 80            [12] 3608 	mov	a,#0x80
      000AF2 C0 E0            [24] 3609 	push	acc
      000AF4 74 FD            [12] 3610 	mov	a,#0xFD
      000AF6 C0 E0            [24] 3611 	push	acc
      000AF8 74 44            [12] 3612 	mov	a,#0x44
      000AFA C0 E0            [24] 3613 	push	acc
      000AFC 8C 82            [24] 3614 	mov	dpl,r4
      000AFE 8D 83            [24] 3615 	mov	dph,r5
      000B00 8E F0            [24] 3616 	mov	b,r6
      000B02 EF               [12] 3617 	mov	a,r7
      000B03 12r00r00         [24] 3618 	lcall	___fsadd
      000B06 AC 82            [24] 3619 	mov	r4,dpl
      000B08 AD 83            [24] 3620 	mov	r5,dph
      000B0A AE F0            [24] 3621 	mov	r6,b
      000B0C FF               [12] 3622 	mov	r7,a
      000B0D E5 81            [12] 3623 	mov	a,sp
      000B0F 24 FC            [12] 3624 	add	a,#0xfc
      000B11 F5 81            [12] 3625 	mov	sp,a
      000B13 8C 82            [24] 3626 	mov	dpl,r4
      000B15 8D 83            [24] 3627 	mov	dph,r5
      000B17 8E F0            [24] 3628 	mov	b,r6
      000B19 EF               [12] 3629 	mov	a,r7
      000B1A 12r00r00         [24] 3630 	lcall	___fs2uint
      000B1D 85 82*27         [24] 3631 	mov	_MOTOR_PW_AND_STEER_PW,dpl
      000B20 85 83*28         [24] 3632 	mov	(_MOTOR_PW_AND_STEER_PW + 1),dph
                           000B23  3633 	C$LAB4_V45_TESTCODE.c$347$3$176 ==.
                                   3634 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:347: desired_heading=1800;
      000B23 75*2B 08         [24] 3635 	mov	_desired_heading,#0x08
      000B26 75*2C 07         [24] 3636 	mov	(_desired_heading + 1),#0x07
      000B29 02r0BrA8         [24] 3637 	ljmp	00109$
      000B2C                       3638 00102$:
                           000B2C  3639 	C$LAB4_V45_TESTCODE.c$350$3$177 ==.
                                   3640 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:350: MOTOR_PW_AND_STEER_PW=MOTOR_NEUT;
      000B2C 75*27 CD         [24] 3641 	mov	_MOTOR_PW_AND_STEER_PW,#0xCD
      000B2F 75*28 0A         [24] 3642 	mov	(_MOTOR_PW_AND_STEER_PW + 1),#0x0A
      000B32 80 74            [24] 3643 	sjmp	00109$
      000B34                       3644 00108$:
                           000B34  3645 	C$LAB4_V45_TESTCODE.c$354$2$178 ==.
                                   3646 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:354: if (near_obstical<30)
      000B34 74 E2            [12] 3647 	mov	a,#0x100 - 0x1E
      000B36 25*2F            [12] 3648 	add	a,_near_obstical
      000B38 40 68            [24] 3649 	jc	00105$
                           000B3A  3650 	C$LAB4_V45_TESTCODE.c$355$2$178 ==.
                                   3651 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:355: MOTOR_PW_AND_STEER_PW = 2028+read_AD_input(4)*5.8;//adjust speed based on potentiometer
      000B3A 75 82 04         [24] 3652 	mov	dpl,#0x04
      000B3D 12r0Cr32         [24] 3653 	lcall	_read_AD_input
      000B40 12r00r00         [24] 3654 	lcall	___uchar2fs
      000B43 AC 82            [24] 3655 	mov	r4,dpl
      000B45 AD 83            [24] 3656 	mov	r5,dph
      000B47 AE F0            [24] 3657 	mov	r6,b
      000B49 FF               [12] 3658 	mov	r7,a
      000B4A C0 04            [24] 3659 	push	ar4
      000B4C C0 05            [24] 3660 	push	ar5
      000B4E C0 06            [24] 3661 	push	ar6
      000B50 C0 07            [24] 3662 	push	ar7
      000B52 90 99 9A         [24] 3663 	mov	dptr,#0x999A
      000B55 75 F0 B9         [24] 3664 	mov	b,#0xB9
      000B58 74 40            [12] 3665 	mov	a,#0x40
      000B5A 12r00r00         [24] 3666 	lcall	___fsmul
      000B5D AC 82            [24] 3667 	mov	r4,dpl
      000B5F AD 83            [24] 3668 	mov	r5,dph
      000B61 AE F0            [24] 3669 	mov	r6,b
      000B63 FF               [12] 3670 	mov	r7,a
      000B64 E5 81            [12] 3671 	mov	a,sp
      000B66 24 FC            [12] 3672 	add	a,#0xfc
      000B68 F5 81            [12] 3673 	mov	sp,a
      000B6A E4               [12] 3674 	clr	a
      000B6B C0 E0            [24] 3675 	push	acc
      000B6D 74 80            [12] 3676 	mov	a,#0x80
      000B6F C0 E0            [24] 3677 	push	acc
      000B71 74 FD            [12] 3678 	mov	a,#0xFD
      000B73 C0 E0            [24] 3679 	push	acc
      000B75 74 44            [12] 3680 	mov	a,#0x44
      000B77 C0 E0            [24] 3681 	push	acc
      000B79 8C 82            [24] 3682 	mov	dpl,r4
      000B7B 8D 83            [24] 3683 	mov	dph,r5
      000B7D 8E F0            [24] 3684 	mov	b,r6
      000B7F EF               [12] 3685 	mov	a,r7
      000B80 12r00r00         [24] 3686 	lcall	___fsadd
      000B83 AC 82            [24] 3687 	mov	r4,dpl
      000B85 AD 83            [24] 3688 	mov	r5,dph
      000B87 AE F0            [24] 3689 	mov	r6,b
      000B89 FF               [12] 3690 	mov	r7,a
      000B8A E5 81            [12] 3691 	mov	a,sp
      000B8C 24 FC            [12] 3692 	add	a,#0xfc
      000B8E F5 81            [12] 3693 	mov	sp,a
      000B90 8C 82            [24] 3694 	mov	dpl,r4
      000B92 8D 83            [24] 3695 	mov	dph,r5
      000B94 8E F0            [24] 3696 	mov	b,r6
      000B96 EF               [12] 3697 	mov	a,r7
      000B97 12r00r00         [24] 3698 	lcall	___fs2uint
      000B9A 85 82*27         [24] 3699 	mov	_MOTOR_PW_AND_STEER_PW,dpl
      000B9D 85 83*28         [24] 3700 	mov	(_MOTOR_PW_AND_STEER_PW + 1),dph
      000BA0 80 06            [24] 3701 	sjmp	00109$
      000BA2                       3702 00105$:
                           000BA2  3703 	C$LAB4_V45_TESTCODE.c$357$2$178 ==.
                                   3704 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:357: MOTOR_PW_AND_STEER_PW=MOTOR_NEUT;
      000BA2 75*27 CD         [24] 3705 	mov	_MOTOR_PW_AND_STEER_PW,#0xCD
      000BA5 75*28 0A         [24] 3706 	mov	(_MOTOR_PW_AND_STEER_PW + 1),#0x0A
      000BA8                       3707 00109$:
                           000BA8  3708 	C$LAB4_V45_TESTCODE.c$361$1$174 ==.
                                   3709 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:361: if(MOTOR_PW_AND_STEER_PW<MOTOR_NEUT){
      000BA8 C3               [12] 3710 	clr	c
      000BA9 E5*27            [12] 3711 	mov	a,_MOTOR_PW_AND_STEER_PW
      000BAB 94 CD            [12] 3712 	subb	a,#0xCD
      000BAD E5*28            [12] 3713 	mov	a,(_MOTOR_PW_AND_STEER_PW + 1)
      000BAF 94 0A            [12] 3714 	subb	a,#0x0A
      000BB1 50 06            [24] 3715 	jnc	00112$
                           000BB3  3716 	C$LAB4_V45_TESTCODE.c$362$2$179 ==.
                                   3717 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:362: MOTOR_PW_AND_STEER_PW=MOTOR_NEUT+10;		//NEED TO GET IT SO IT ALWAYS RUNS FORWARDS
      000BB3 75*27 D7         [24] 3718 	mov	_MOTOR_PW_AND_STEER_PW,#0xD7
      000BB6 75*28 0A         [24] 3719 	mov	(_MOTOR_PW_AND_STEER_PW + 1),#0x0A
      000BB9                       3720 00112$:
                           000BB9  3721 	C$LAB4_V45_TESTCODE.c$364$1$174 ==.
                                   3722 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:364: if (MOTOR_PW_AND_STEER_PW>3502){
      000BB9 C3               [12] 3723 	clr	c
      000BBA 74 AE            [12] 3724 	mov	a,#0xAE
      000BBC 95*27            [12] 3725 	subb	a,_MOTOR_PW_AND_STEER_PW
      000BBE 74 0D            [12] 3726 	mov	a,#0x0D
      000BC0 95*28            [12] 3727 	subb	a,(_MOTOR_PW_AND_STEER_PW + 1)
      000BC2 50 06            [24] 3728 	jnc	00114$
                           000BC4  3729 	C$LAB4_V45_TESTCODE.c$365$2$180 ==.
                                   3730 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:365: MOTOR_PW_AND_STEER_PW=3502;
      000BC4 75*27 AE         [24] 3731 	mov	_MOTOR_PW_AND_STEER_PW,#0xAE
      000BC7 75*28 0D         [24] 3732 	mov	(_MOTOR_PW_AND_STEER_PW + 1),#0x0D
      000BCA                       3733 00114$:
                           000BCA  3734 	C$LAB4_V45_TESTCODE.c$367$1$174 ==.
                                   3735 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:367: PCA0CPL2 = 0xFFFF - MOTOR_PW_AND_STEER_PW;
      000BCA AF*27            [24] 3736 	mov	r7,_MOTOR_PW_AND_STEER_PW
      000BCC 74 FF            [12] 3737 	mov	a,#0xFF
      000BCE C3               [12] 3738 	clr	c
      000BCF 9F               [12] 3739 	subb	a,r7
      000BD0 F5 EC            [12] 3740 	mov	_PCA0CPL2,a
                           000BD2  3741 	C$LAB4_V45_TESTCODE.c$368$1$174 ==.
                                   3742 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:368: PCA0CPH2 = (0xFFFF - MOTOR_PW_AND_STEER_PW) >> 8;//set motor values
      000BD2 74 FF            [12] 3743 	mov	a,#0xFF
      000BD4 C3               [12] 3744 	clr	c
      000BD5 95*27            [12] 3745 	subb	a,_MOTOR_PW_AND_STEER_PW
      000BD7 74 FF            [12] 3746 	mov	a,#0xFF
      000BD9 95*28            [12] 3747 	subb	a,(_MOTOR_PW_AND_STEER_PW + 1)
      000BDB FF               [12] 3748 	mov	r7,a
      000BDC 8F FC            [24] 3749 	mov	_PCA0CPH2,r7
                           000BDE  3750 	C$LAB4_V45_TESTCODE.c$369$1$174 ==.
                           000BDE  3751 	XG$Drive_Motor$0$0 ==.
      000BDE 22               [24] 3752 	ret
                                   3753 ;------------------------------------------------------------
                                   3754 ;Allocation info for local variables in function 'pause'
                                   3755 ;------------------------------------------------------------
                           000BDF  3756 	G$pause$0$0 ==.
                           000BDF  3757 	C$LAB4_V45_TESTCODE.c$374$1$174 ==.
                                   3758 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:374: void pause(void){
                                   3759 ;	-----------------------------------------
                                   3760 ;	 function pause
                                   3761 ;	-----------------------------------------
      000BDF                       3762 _pause:
                           000BDF  3763 	C$LAB4_V45_TESTCODE.c$375$1$182 ==.
                                   3764 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:375: n_count=0;
      000BDF 75*14 00         [24] 3765 	mov	_n_count,#0x00
                           000BE2  3766 	C$LAB4_V45_TESTCODE.c$376$1$182 ==.
                                   3767 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:376: while(n_count<=45);
      000BE2                       3768 00101$:
      000BE2 E5*14            [12] 3769 	mov	a,_n_count
      000BE4 24 D2            [12] 3770 	add	a,#0xff - 0x2D
      000BE6 50 FA            [24] 3771 	jnc	00101$
                           000BE8  3772 	C$LAB4_V45_TESTCODE.c$377$1$182 ==.
                           000BE8  3773 	XG$pause$0$0 ==.
      000BE8 22               [24] 3774 	ret
                                   3775 ;------------------------------------------------------------
                                   3776 ;Allocation info for local variables in function 'PCA_Init'
                                   3777 ;------------------------------------------------------------
                           000BE9  3778 	G$PCA_Init$0$0 ==.
                           000BE9  3779 	C$LAB4_V45_TESTCODE.c$383$1$182 ==.
                                   3780 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:383: void PCA_Init(void){
                                   3781 ;	-----------------------------------------
                                   3782 ;	 function PCA_Init
                                   3783 ;	-----------------------------------------
      000BE9                       3784 _PCA_Init:
                           000BE9  3785 	C$LAB4_V45_TESTCODE.c$384$1$184 ==.
                                   3786 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:384: PCA0MD = 0x81;// Sysclk /12
      000BE9 75 D9 81         [24] 3787 	mov	_PCA0MD,#0x81
                           000BEC  3788 	C$LAB4_V45_TESTCODE.c$385$1$184 ==.
                                   3789 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:385: PCA0CPM2 = 0xC2;//16 bit converter
      000BEC 75 DC C2         [24] 3790 	mov	_PCA0CPM2,#0xC2
                           000BEF  3791 	C$LAB4_V45_TESTCODE.c$386$1$184 ==.
                                   3792 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:386: PCA0CPM0 = 0xC2;
      000BEF 75 DA C2         [24] 3793 	mov	_PCA0CPM0,#0xC2
                           000BF2  3794 	C$LAB4_V45_TESTCODE.c$387$1$184 ==.
                                   3795 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:387: PCA0CN = 0x40;//enable PCA counter
      000BF2 75 D8 40         [24] 3796 	mov	_PCA0CN,#0x40
                           000BF5  3797 	C$LAB4_V45_TESTCODE.c$388$1$184 ==.
                                   3798 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:388: EIE1 |= 0x08;//enable pca interrupt
      000BF5 43 E6 08         [24] 3799 	orl	_EIE1,#0x08
                           000BF8  3800 	C$LAB4_V45_TESTCODE.c$389$1$184 ==.
                                   3801 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:389: EA =1; //enable global iterrupt
      000BF8 D2 AF            [12] 3802 	setb	_EA
                           000BFA  3803 	C$LAB4_V45_TESTCODE.c$390$1$184 ==.
                           000BFA  3804 	XG$PCA_Init$0$0 ==.
      000BFA 22               [24] 3805 	ret
                                   3806 ;------------------------------------------------------------
                                   3807 ;Allocation info for local variables in function 'Port_Init'
                                   3808 ;------------------------------------------------------------
                           000BFB  3809 	G$Port_Init$0$0 ==.
                           000BFB  3810 	C$LAB4_V45_TESTCODE.c$392$1$184 ==.
                                   3811 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:392: void Port_Init(void){
                                   3812 ;	-----------------------------------------
                                   3813 ;	 function Port_Init
                                   3814 ;	-----------------------------------------
      000BFB                       3815 _Port_Init:
                           000BFB  3816 	C$LAB4_V45_TESTCODE.c$393$1$186 ==.
                                   3817 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:393: P1MDOUT |= 0x03;  //lab 1 stuff set output pin for CEX0 or CEX2 in push-pull mode
      000BFB 43 A5 03         [24] 3818 	orl	_P1MDOUT,#0x03
                           000BFE  3819 	C$LAB4_V45_TESTCODE.c$394$1$186 ==.
                                   3820 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:394: P0MDOUT &=0xC0;	//lab 2 stuff
      000BFE 53 A4 C0         [24] 3821 	anl	_P0MDOUT,#0xC0
                           000C01  3822 	C$LAB4_V45_TESTCODE.c$395$1$186 ==.
                                   3823 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:395: P0 |= ~0xC0;	//lab 2 stuff
      000C01 AF 80            [24] 3824 	mov	r7,_P0
      000C03 74 3F            [12] 3825 	mov	a,#0x3F
      000C05 4F               [12] 3826 	orl	a,r7
      000C06 F5 80            [12] 3827 	mov	_P0,a
                           000C08  3828 	C$LAB4_V45_TESTCODE.c$396$1$186 ==.
                                   3829 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:396: P3MDOUT &= ~0x60;	//slide switches
      000C08 AF A7            [24] 3830 	mov	r7,_P3MDOUT
      000C0A 74 9F            [12] 3831 	mov	a,#0x9F
      000C0C 5F               [12] 3832 	anl	a,r7
      000C0D F5 A7            [12] 3833 	mov	_P3MDOUT,a
                           000C0F  3834 	C$LAB4_V45_TESTCODE.c$397$1$186 ==.
                                   3835 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:397: P3 |= 0x60;			//slide switches
      000C0F 43 B0 60         [24] 3836 	orl	_P3,#0x60
                           000C12  3837 	C$LAB4_V45_TESTCODE.c$398$1$186 ==.
                                   3838 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:398: P1MDIN &= ~0x30; //1.4 and 1.5 analog input
      000C12 AF BD            [24] 3839 	mov	r7,_P1MDIN
      000C14 74 CF            [12] 3840 	mov	a,#0xCF
      000C16 5F               [12] 3841 	anl	a,r7
      000C17 F5 BD            [12] 3842 	mov	_P1MDIN,a
                           000C19  3843 	C$LAB4_V45_TESTCODE.c$399$1$186 ==.
                                   3844 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:399: P1MDOUT &= ~0x30;//1.4 and 1.5 to open drain
      000C19 AF A5            [24] 3845 	mov	r7,_P1MDOUT
      000C1B 74 CF            [12] 3846 	mov	a,#0xCF
      000C1D 5F               [12] 3847 	anl	a,r7
      000C1E F5 A5            [12] 3848 	mov	_P1MDOUT,a
                           000C20  3849 	C$LAB4_V45_TESTCODE.c$400$1$186 ==.
                                   3850 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:400: P1 |= 0x30; 
      000C20 43 90 30         [24] 3851 	orl	_P1,#0x30
                           000C23  3852 	C$LAB4_V45_TESTCODE.c$401$1$186 ==.
                           000C23  3853 	XG$Port_Init$0$0 ==.
      000C23 22               [24] 3854 	ret
                                   3855 ;------------------------------------------------------------
                                   3856 ;Allocation info for local variables in function 'XBR0_Init'
                                   3857 ;------------------------------------------------------------
                           000C24  3858 	G$XBR0_Init$0$0 ==.
                           000C24  3859 	C$LAB4_V45_TESTCODE.c$402$1$186 ==.
                                   3860 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:402: void XBR0_Init(void){
                                   3861 ;	-----------------------------------------
                                   3862 ;	 function XBR0_Init
                                   3863 ;	-----------------------------------------
      000C24                       3864 _XBR0_Init:
                           000C24  3865 	C$LAB4_V45_TESTCODE.c$403$1$188 ==.
                                   3866 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:403: XBR0=0x27;
      000C24 75 E1 27         [24] 3867 	mov	_XBR0,#0x27
                           000C27  3868 	C$LAB4_V45_TESTCODE.c$404$1$188 ==.
                           000C27  3869 	XG$XBR0_Init$0$0 ==.
      000C27 22               [24] 3870 	ret
                                   3871 ;------------------------------------------------------------
                                   3872 ;Allocation info for local variables in function 'ADC_Init'
                                   3873 ;------------------------------------------------------------
                           000C28  3874 	G$ADC_Init$0$0 ==.
                           000C28  3875 	C$LAB4_V45_TESTCODE.c$406$1$188 ==.
                                   3876 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:406: void ADC_Init(void){
                                   3877 ;	-----------------------------------------
                                   3878 ;	 function ADC_Init
                                   3879 ;	-----------------------------------------
      000C28                       3880 _ADC_Init:
                           000C28  3881 	C$LAB4_V45_TESTCODE.c$407$1$190 ==.
                                   3882 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:407: REF0CN = 0x03; //set Vref to use internal reference voltage
      000C28 75 D1 03         [24] 3883 	mov	_REF0CN,#0x03
                           000C2B  3884 	C$LAB4_V45_TESTCODE.c$408$1$190 ==.
                                   3885 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:408: ADC1CN = 0x80; //enable A/D converter ADC1
      000C2B 75 AA 80         [24] 3886 	mov	_ADC1CN,#0x80
                           000C2E  3887 	C$LAB4_V45_TESTCODE.c$409$1$190 ==.
                                   3888 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:409: ADC1CF |= 0x01; //set A/D converter gain to 1
      000C2E 43 AB 01         [24] 3889 	orl	_ADC1CF,#0x01
                           000C31  3890 	C$LAB4_V45_TESTCODE.c$410$1$190 ==.
                           000C31  3891 	XG$ADC_Init$0$0 ==.
      000C31 22               [24] 3892 	ret
                                   3893 ;------------------------------------------------------------
                                   3894 ;Allocation info for local variables in function 'read_AD_input'
                                   3895 ;------------------------------------------------------------
                                   3896 ;n                         Allocated to registers 
                                   3897 ;------------------------------------------------------------
                           000C32  3898 	G$read_AD_input$0$0 ==.
                           000C32  3899 	C$LAB4_V45_TESTCODE.c$412$1$190 ==.
                                   3900 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:412: unsigned char read_AD_input(unsigned char n) {// reads analog at port n
                                   3901 ;	-----------------------------------------
                                   3902 ;	 function read_AD_input
                                   3903 ;	-----------------------------------------
      000C32                       3904 _read_AD_input:
      000C32 85 82 AC         [24] 3905 	mov	_AMX1SL,dpl
                           000C35  3906 	C$LAB4_V45_TESTCODE.c$417$1$192 ==.
                                   3907 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:417: ADC1CN = ADC1CN & ~0x20; 		//Clear the [Conversion Completed] flag 
      000C35 AF AA            [24] 3908 	mov	r7,_ADC1CN
      000C37 74 DF            [12] 3909 	mov	a,#0xDF
      000C39 5F               [12] 3910 	anl	a,r7
      000C3A F5 AA            [12] 3911 	mov	_ADC1CN,a
                           000C3C  3912 	C$LAB4_V45_TESTCODE.c$418$1$192 ==.
                                   3913 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:418: ADC1CN = ADC1CN | 0x10; 		//Initiate A/D conversion 
      000C3C 43 AA 10         [24] 3914 	orl	_ADC1CN,#0x10
                           000C3F  3915 	C$LAB4_V45_TESTCODE.c$419$1$192 ==.
                                   3916 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:419: while ((ADC1CN & 0x20) == 0x00);//Wait for conversion to complete 
      000C3F                       3917 00101$:
      000C3F E5 AA            [12] 3918 	mov	a,_ADC1CN
      000C41 30 E5 FB         [24] 3919 	jnb	acc.5,00101$
                           000C44  3920 	C$LAB4_V45_TESTCODE.c$420$1$192 ==.
                                   3921 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:420: return ADC1; 					//Return digital value in ADC1 register 
      000C44 85 9C 82         [24] 3922 	mov	dpl,_ADC1
                           000C47  3923 	C$LAB4_V45_TESTCODE.c$421$1$192 ==.
                           000C47  3924 	XG$read_AD_input$0$0 ==.
      000C47 22               [24] 3925 	ret
                                   3926 ;------------------------------------------------------------
                                   3927 ;Allocation info for local variables in function 'SMB_Init'
                                   3928 ;------------------------------------------------------------
                           000C48  3929 	G$SMB_Init$0$0 ==.
                           000C48  3930 	C$LAB4_V45_TESTCODE.c$425$1$192 ==.
                                   3931 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:425: void SMB_Init(void) {
                                   3932 ;	-----------------------------------------
                                   3933 ;	 function SMB_Init
                                   3934 ;	-----------------------------------------
      000C48                       3935 _SMB_Init:
                           000C48  3936 	C$LAB4_V45_TESTCODE.c$426$1$194 ==.
                                   3937 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:426: SMB0CR = 0x93;//set SCL to ~100 Khz
      000C48 75 CF 93         [24] 3938 	mov	_SMB0CR,#0x93
                           000C4B  3939 	C$LAB4_V45_TESTCODE.c$427$1$194 ==.
                                   3940 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:427: ENSMB=1; //enable the SMBus, bit 6 of SMB0CN
      000C4B D2 C6            [12] 3941 	setb	_ENSMB
                           000C4D  3942 	C$LAB4_V45_TESTCODE.c$428$1$194 ==.
                           000C4D  3943 	XG$SMB_Init$0$0 ==.
      000C4D 22               [24] 3944 	ret
                                   3945 ;------------------------------------------------------------
                                   3946 ;Allocation info for local variables in function 'PCA_ISR'
                                   3947 ;------------------------------------------------------------
                           000C4E  3948 	G$PCA_ISR$0$0 ==.
                           000C4E  3949 	C$LAB4_V45_TESTCODE.c$433$1$194 ==.
                                   3950 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:433: void PCA_ISR(void) __interrupt 9  {   
                                   3951 ;	-----------------------------------------
                                   3952 ;	 function PCA_ISR
                                   3953 ;	-----------------------------------------
      000C4E                       3954 _PCA_ISR:
      000C4E C0 E0            [24] 3955 	push	acc
      000C50 C0 D0            [24] 3956 	push	psw
                           000C52  3957 	C$LAB4_V45_TESTCODE.c$434$1$196 ==.
                                   3958 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:434: if (CF)  {         
                           000C52  3959 	C$LAB4_V45_TESTCODE.c$436$2$197 ==.
                                   3960 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:436: CF = 0; // clear overflow indicator  
      000C52 10 DF 02         [24] 3961 	jbc	_CF,00129$
      000C55 80 3A            [24] 3962 	sjmp	00111$
      000C57                       3963 00129$:
                           000C57  3964 	C$LAB4_V45_TESTCODE.c$437$2$197 ==.
                                   3965 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:437: PCA0 = 28672;       
      000C57 75 E9 00         [24] 3966 	mov	((_PCA0 >> 0) & 0xFF),#0x00
      000C5A 75 F9 70         [24] 3967 	mov	((_PCA0 >> 8) & 0xFF),#0x70
                           000C5D  3968 	C$LAB4_V45_TESTCODE.c$438$2$197 ==.
                                   3969 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:438: hr_count++;  
      000C5D 05*11            [12] 3970 	inc	_hr_count
                           000C5F  3971 	C$LAB4_V45_TESTCODE.c$439$2$197 ==.
                                   3972 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:439: n_count++;
      000C5F 05*14            [12] 3973 	inc	_n_count
                           000C61  3974 	C$LAB4_V45_TESTCODE.c$441$2$197 ==.
                                   3975 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:441: if (hr_count == 2){  //40ms for the compass           
      000C61 74 02            [12] 3976 	mov	a,#0x02
      000C63 B5*11 05         [24] 3977 	cjne	a,_hr_count,00104$
                           000C66  3978 	C$LAB4_V45_TESTCODE.c$442$3$198 ==.
                                   3979 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:442: new_heading=1;	//new heading flag             
      000C66 75*1A 01         [24] 3980 	mov	_new_heading,#0x01
      000C69 80 10            [24] 3981 	sjmp	00105$
      000C6B                       3982 00104$:
                           000C6B  3983 	C$LAB4_V45_TESTCODE.c$445$2$197 ==.
                                   3984 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:445: else if (hr_count == 4) {//80ms for the ranger                       
      000C6B 74 04            [12] 3985 	mov	a,#0x04
      000C6D B5*11 0B         [24] 3986 	cjne	a,_hr_count,00105$
                           000C70  3987 	C$LAB4_V45_TESTCODE.c$446$3$199 ==.
                                   3988 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:446: hr_count = 0;	//reset
      000C70 75*11 00         [24] 3989 	mov	_hr_count,#0x00
                           000C73  3990 	C$LAB4_V45_TESTCODE.c$447$3$199 ==.
                                   3991 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:447: print_count++;	//increment print count
      000C73 05*15            [12] 3992 	inc	_print_count
                           000C75  3993 	C$LAB4_V45_TESTCODE.c$448$3$199 ==.
                                   3994 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:448: new_range = 1;	//set the new rage flag 
      000C75 75*1B 01         [24] 3995 	mov	_new_range,#0x01
                           000C78  3996 	C$LAB4_V45_TESTCODE.c$449$3$199 ==.
                                   3997 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:449: new_heading = 1; //set the new heading flag
      000C78 75*1A 01         [24] 3998 	mov	_new_heading,#0x01
      000C7B                       3999 00105$:
                           000C7B  4000 	C$LAB4_V45_TESTCODE.c$452$2$197 ==.
                                   4001 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:452: if (n_count == 50){//battery		
      000C7B 74 32            [12] 4002 	mov	a,#0x32
      000C7D B5*14 06         [24] 4003 	cjne	a,_n_count,00107$
                           000C80  4004 	C$LAB4_V45_TESTCODE.c$453$3$200 ==.
                                   4005 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:453: n_count = 0;	//reset
      000C80 75*14 00         [24] 4006 	mov	_n_count,#0x00
                           000C83  4007 	C$LAB4_V45_TESTCODE.c$454$3$200 ==.
                                   4008 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:454: Counts=1;    //new battery voltage print flag
      000C83 75*13 01         [24] 4009 	mov	_Counts,#0x01
      000C86                       4010 00107$:
                           000C86  4011 	C$LAB4_V45_TESTCODE.c$457$2$197 ==.
                                   4012 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:457: if(print_count == 5){	//lcd printing
      000C86 74 05            [12] 4013 	mov	a,#0x05
      000C88 B5*15 06         [24] 4014 	cjne	a,_print_count,00111$
                           000C8B  4015 	C$LAB4_V45_TESTCODE.c$458$3$201 ==.
                                   4016 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:458: print_count = 0;	//reset
      000C8B 75*15 00         [24] 4017 	mov	_print_count,#0x00
                           000C8E  4018 	C$LAB4_V45_TESTCODE.c$459$3$201 ==.
                                   4019 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:459: new_print =1;	//set the print flag
      000C8E 75*12 01         [24] 4020 	mov	_new_print,#0x01
      000C91                       4021 00111$:
                           000C91  4022 	C$LAB4_V45_TESTCODE.c$462$1$196 ==.
                                   4023 ;	C:\Users\hoddip\Documents\GitHub\LightTechs\Labs\Lab4\final_day_4_15\LAB4_V45_TESTCODE.c:462: PCA0CN &= 0xC0; // handle other PCA interrupt sources  
      000C91 53 D8 C0         [24] 4024 	anl	_PCA0CN,#0xC0
      000C94 D0 D0            [24] 4025 	pop	psw
      000C96 D0 E0            [24] 4026 	pop	acc
                           000C98  4027 	C$LAB4_V45_TESTCODE.c$463$1$196 ==.
                           000C98  4028 	XG$PCA_ISR$0$0 ==.
      000C98 32               [24] 4029 	reti
                                   4030 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   4031 ;	eliminated unneeded push/pop dpl
                                   4032 ;	eliminated unneeded push/pop dph
                                   4033 ;	eliminated unneeded push/pop b
                                   4034 	.area CSEG    (CODE)
                                   4035 	.area CONST   (CODE)
                           000000  4036 FLAB4_V45_TESTCODE$__str_0$0$0 == .
      000000                       4037 ___str_0:
      000000 0A                    4038 	.db 0x0A
      000001 54 79 70 65 20 64 69  4039 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    4040 	.db 0x00
                           000016  4041 FLAB4_V45_TESTCODE$__str_1$0$0 == .
      000016                       4042 ___str_1:
      000016 20 20 20 20 20 25 63  4043 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    4044 	.db 0x00
                           000026  4045 FLAB4_V45_TESTCODE$__str_2$0$0 == .
      000026                       4046 ___str_2:
      000026 25 63                 4047 	.ascii "%c"
      000028 00                    4048 	.db 0x00
                           000029  4049 FLAB4_V45_TESTCODE$__str_3$0$0 == .
      000029                       4050 ___str_3:
      000029 69 6E 69 74 69 61 6C  4051 	.ascii "initializing"
             69 7A 69 6E 67
      000035 0D                    4052 	.db 0x0D
      000036 0A                    4053 	.db 0x0A
      000037 00                    4054 	.db 0x00
                           000038  4055 FLAB4_V45_TESTCODE$__str_4$0$0 == .
      000038                       4056 ___str_4:
      000038 0A                    4057 	.db 0x0A
      000039 0A                    4058 	.db 0x0A
      00003A 0A                    4059 	.db 0x0A
      00003B 0D                    4060 	.db 0x0D
      00003C 69 6E 69 74 61 6C 69  4061 	.ascii "initalizing"
             7A 69 6E 67
      000047 00                    4062 	.db 0x00
                           000048  4063 FLAB4_V45_TESTCODE$__str_5$0$0 == .
      000048                       4064 ___str_5:
      000048 0A                    4065 	.db 0x0A
      000049 0D                    4066 	.db 0x0D
      00004A 52 61 6E 67 65 3A 25  4067 	.ascii "Range:%d Compass:%d dh: %d, mPW: %d, sPW %d, batt:%d, obst"
             64 20 43 6F 6D 70 61
             73 73 3A 25 64 20 64
             68 3A 20 25 64 2C 20
             6D 50 57 3A 20 25 64
             2C 20 73 50 57 20 25
             64 2C 20 62 61 74 74
             3A 25 64 2C 20 6F 62
             73 74
      000084 3A 20 25 64           4068 	.ascii ": %d"
      000088 00                    4069 	.db 0x00
                           000089  4070 FLAB4_V45_TESTCODE$__str_6$0$0 == .
      000089                       4071 ___str_6:
      000089 54 68 65 20 73 6C 69  4072 	.ascii "The slideswitch is off. Turn it on."
             64 65 73 77 69 74 63
             68 20 69 73 20 6F 66
             66 2E 20 54 75 72 6E
             20 69 74 20 6F 6E 2E
      0000AC 00                    4073 	.db 0x00
                           0000AD  4074 FLAB4_V45_TESTCODE$__str_7$0$0 == .
      0000AD                       4075 ___str_7:
      0000AD 0D                    4076 	.db 0x0D
      0000AE 48 65 61 64 69 6E 67  4077 	.ascii "Heading: %u"
             3A 20 25 75
      0000B9 00                    4078 	.db 0x00
                           0000BA  4079 FLAB4_V45_TESTCODE$__str_8$0$0 == .
      0000BA                       4080 ___str_8:
      0000BA 0D                    4081 	.db 0x0D
      0000BB 52 61 6E 67 65 3A 25  4082 	.ascii "Range:%u"
             75
      0000C3 00                    4083 	.db 0x00
                           0000C4  4084 FLAB4_V45_TESTCODE$__str_9$0$0 == .
      0000C4                       4085 ___str_9:
      0000C4 0D                    4086 	.db 0x0D
      0000C5 56 6F 6C 74 61 67 65  4087 	.ascii "Voltage:%d"
             3A 25 64
      0000CF 00                    4088 	.db 0x00
                           0000D0  4089 FLAB4_V45_TESTCODE$__str_10$0$0 == .
      0000D0                       4090 ___str_10:
      0000D0 0D                    4091 	.db 0x0D
      0000D1 50 72 65 73 73 20 32  4092 	.ascii "Press 2 to increase gain, press 8 to decrease gain"
             20 74 6F 20 69 6E 63
             72 65 61 73 65 20 67
             61 69 6E 2C 20 70 72
             65 73 73 20 38 20 74
             6F 20 64 65 63 72 65
             61 73 65 20 67 61 69
             6E
      000103 00                    4093 	.db 0x00
                           000104  4094 FLAB4_V45_TESTCODE$__str_11$0$0 == .
      000104                       4095 ___str_11:
      000104 0D                    4096 	.db 0x0D
      000105 47 61 69 6E 20 69 73  4097 	.ascii "Gain is: %d"
             3A 20 25 64
      000110 00                    4098 	.db 0x00
                           000111  4099 FLAB4_V45_TESTCODE$__str_12$0$0 == .
      000111                       4100 ___str_12:
      000111 0D                    4101 	.db 0x0D
      000112 59 6F 75 72 20 67 61  4102 	.ascii "Your gain is: %d"
             69 6E 20 69 73 3A 20
             25 64
      000122 0A                    4103 	.db 0x0A
      000123 00                    4104 	.db 0x00
                           000124  4105 FLAB4_V45_TESTCODE$__str_13$0$0 == .
      000124                       4106 ___str_13:
      000124 50 72 65 73 73 20 31  4107 	.ascii "Press 1 for list or Press 2 for a specific value"
             20 66 6F 72 20 6C 69
             73 74 20 6F 72 20 50
             72 65 73 73 20 32 20
             66 6F 72 20 61 20 73
             70 65 63 69 66 69 63
             20 76 61 6C 75 65
      000154 00                    4108 	.db 0x00
                           000155  4109 FLAB4_V45_TESTCODE$__str_14$0$0 == .
      000155                       4110 ___str_14:
      000155 50 72 65 73 73 20 32  4111 	.ascii "Press 2 for 0 deg, 6 for 90, 8 for 180, 4 for 270"
             20 66 6F 72 20 30 20
             64 65 67 2C 20 36 20
             66 6F 72 20 39 30 2C
             20 38 20 66 6F 72 20
             31 38 30 2C 20 34 20
             66 6F 72 20 32 37 30
      000186 00                    4112 	.db 0x00
                           000187  4113 FLAB4_V45_TESTCODE$__str_15$0$0 == .
      000187                       4114 ___str_15:
      000187 0D                    4115 	.db 0x0D
      000188 45 6E 74 65 72 20 79  4116 	.ascii "Enter your desired heading between 0 and 360:"
             6F 75 72 20 64 65 73
             69 72 65 64 20 68 65
             61 64 69 6E 67 20 62
             65 74 77 65 65 6E 20
             30 20 61 6E 64 20 33
             36 30 3A
      0001B5 0A                    4117 	.db 0x0A
      0001B6 00                    4118 	.db 0x00
                           0001B7  4119 FLAB4_V45_TESTCODE$__str_16$0$0 == .
      0001B7                       4120 ___str_16:
      0001B7 54 6F 20 73 65 74 20  4121 	.ascii "To set speed, adjust pMeter now"
             73 70 65 65 64 2C 20
             61 64 6A 75 73 74 20
             70 4D 65 74 65 72 20
             6E 6F 77
      0001D6 00                    4122 	.db 0x00
                           0001D7  4123 FLAB4_V45_TESTCODE$__str_17$0$0 == .
      0001D7                       4124 ___str_17:
      0001D7 0A                    4125 	.db 0x0A
      0001D8 33 20 73 65 63 6F 6E  4126 	.ascii "3 seconds to do so"
             64 73 20 74 6F 20 64
             6F 20 73 6F
      0001EA 00                    4127 	.db 0x00
                           0001EB  4128 FLAB4_V45_TESTCODE$__str_18$0$0 == .
      0001EB                       4129 ___str_18:
      0001EB 0A                    4130 	.db 0x0A
      0001EC 32 20 73 65 63 6F 6E  4131 	.ascii "2 seconds to do so"
             64 73 20 74 6F 20 64
             6F 20 73 6F
      0001FE 00                    4132 	.db 0x00
                           0001FF  4133 FLAB4_V45_TESTCODE$__str_19$0$0 == .
      0001FF                       4134 ___str_19:
      0001FF 0A                    4135 	.db 0x0A
      000200 31 20 73 65 63 6F 6E  4136 	.ascii "1 seconds to do so"
             64 73 20 74 6F 20 64
             6F 20 73 6F
      000212 00                    4137 	.db 0x00
                                   4138 	.area XINIT   (CODE)
                                   4139 	.area CABS    (ABS,CODE)
